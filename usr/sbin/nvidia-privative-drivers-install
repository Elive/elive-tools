#!/bin/bash
source /usr/lib/elive-tools/functions


#===  FUNCTION  ================================================================
#          NAME:  usage
#   DESCRIPTION:  Shows the usage help, don't exit
#===============================================================================
usage(){
    #
    # if -a : should return true in case of installed or false if install failed
    #           already installed? already running?
    # if -i : will ask the user which version to install (suggesting the best option to use)
    # if -f : only for debug purposes, but should install successfully too
    #
    echo -e "Usage: $(basename $BASH_SOURCE) [options]"
    echo -e "  -a: auto install"
    #echo -e "  -i: interactive mode  (in terminal/console)"
    # TODO: if interactive (default of live mode), we should ask first if we want to use privative drivers, then we can proceed to detect the driver needed (which is slower), so if users wants nouveau then we can skip the process
    # add an option of "live mode" maybe, to not download packages if they are not downloaded and just proceed with asking (on such case and regarding the previous question, how much time takes to upnpack them? betatest when working)
    # if "onlyfree" in cmdline, do a first exit at start (show some info)
    echo -e "  -l: live mode (don't pre-download packages, pre-ask if want to install, more interactive)"
    echo -e "  -f: force install (if no nvidia cards are found)"
    echo -e "  -q: quiet mode"
    echo -e "  -c: check only (tell which version of the driver we need)"
    echo -e "  -m: model (version of driver) to use"
    echo -e "      - like:  current, legacy-304xx, legacy-173xx, legacy-96xx, legacy-71xx"
    #echo -e "  -s: simulate mode (simulate that you have the specified model hardware" # TODO
    #echo -e "  -u: uninstall driver"
    echo -e "  -v: verbose mode"
}

#===  FUNCTION  ================================================================
#          NAME:  check_hardware
#   DESCRIPTION:  check the hardware if has or not the graphic card
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
check_hardware(){
    # pre {{{
    el_debug
    #el_security_function_loop || return

    # }}}

    # FIXME: what about optimus? skip? ask? try a tower with nvidia + mobo graphic card (mine?)

    # pci-id with nvidia on first graphic card
    _DEVICE="$(lspci -mn | awk '/0300/ { print $3$4 }' | sed -e 's|"||g' | tr [a-z] [A-Z] | grep -E '^(10DE|12D2)' | head -n1)"

    if echo "${_DEVICE}" | grep -qs -E '^(10DE|12D2)' ; then
        el_explain 3 "nvidia card found on pci-id"
        is_nvidia_card_found=1
    fi

    # check if hardware has nvidia
    if lspci | grep -qsiE "VGA\s+.*\s+nvidia\s+" ; then
        el_explain 3 "nvidia card found in lspci"
        is_nvidia_card_found=1
    fi

    # force or exit?
    if ! ((is_nvidia_card_found)) ; then
        if ((is_mode_force)) ; then
            el_warning "Forcing install of nvidia in a machine where is not detected nvidia card"
            is_nvidia_card_found=1
        else
            el_error "No nvidia graphic cards found on this machine"
            return 1
        fi
    fi
}
#===  FUNCTION  ================================================================
#          NAME:  detect_driver_version
#   DESCRIPTION:  detect or ask which version of the driver to use
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
detect_driver_version(){
    # pre {{{
    local prev_dir file
    prev_dir="$(pwd)"

    el_debug

    if el_check_variables "driver_version" 1>/dev/null 2>&1 ; then
        el_explain 2 "Selected __${driver_version}__ version of driver to use"
        _NVIDIA_VERSION="$driver_version"
        #_NVIDIA_MODULE="nvidia" # should be always this one in all the versions, or maybe not?
        return
    fi

    if ! el_check_variables "_DEVICE" 1>/dev/null 2>&1 ; then
        # pci-id with nvidia on first graphic card
        _DEVICE="$(lspci -mn | awk '/0300/ { print $3$4 }' | sed -e 's|"||g' | tr [a-z] [A-Z] | grep -E '^(10DE|12D2)' | head -n1)"
    fi

    if ! el_check_variables "_DEVICE" 1>/dev/null 2>&1 ; then
        if ((is_mode_force)) ; then
            if [[ -z "$driver_version" ]] ; then
                el_warning "You have forced the install of nvidia but you didn't say which version, let's use the 'current' one as default then..."
                driver_version="current"
            fi
        else
            el_error "You have no Nvidia graphic cards, use -f if you want to force the install"
        fi
    fi


    # }}}

    # try to search for ID's {{{
    #
    # first on your system installed id's
    for _NVIDIA_IDS in /usr/lib/nvidia/current/nvidia.ids $(ls /usr/lib/nvidia/legacy-*/nvidia.ids 2>/dev/null | sort -V -r)
    do
        if [ -e "${_NVIDIA_IDS}" ]
        then
            if grep -qs "${_DEVICE}" ${_NVIDIA_IDS}
            then
                _NVIDIA_VERSION="$(basename $(dirname ${_NVIDIA_IDS}))"
                _NVIDIA_MODULE="$(echo nvidia-${_NVIDIA_VERSION} | sed -e 's|-current$||')"

                break
            fi
        fi
    done

    # if nothing found, search in already-downloaded packages (if we are in live mode we should have them already there)
    if [[ -z "$_NVIDIA_VERSION" ]] ; then
        # installed ones
        if ls /var/cache/apt/archives/xserver-xorg-video-nvidia*deb 1>/dev/null 2>&1 ; then
            # unpack downloaded ones for scan
            cd /var/cache/apt/archives/
            el_debug "Not ID's found on installed packages, unpacking not-installed ones..."
        else
            if ((is_mode_live)) ; then
                el_explain 2 "You are in mode_live, skipping the pre-download of packages for this mode..."
            else
                # download from urls for scan
                el_debug "Not ID's found on installed packages, downloading them..."
                mkdir -p /var/tmp/nvidia-tmp
                cd /var/tmp/nvidia-tmp

                for packagename in $( apt-cache search xserver-xorg-video-nvidia | grep -v "nouveau" | awk '{print $1}' | sort -V -r | tr '\n' ' ' )
                do
                    url_repository="$( apt-cache madison ${packagename} | tr ' ' '\n' | grep http | head -1 )"
                    while read -ru 3 line
                    do
                        #url_package_dir="${url_repository%/}/${line%/*}/"
                        el_debug "downloading: ${line##*/}"
                        wget -q "${url_repository%/}/${line}"
                    done 3<<< "$( apt-cache show "${packagename}" 2>/dev/null | grep "Filename:" | sed -e 's|^Filename: ||g' | sort -u )"
                done
            fi
        fi
        # for any of the places where we are (cd), let's scan the opened files:
        for file in xserver-xorg-video-nvidia*deb
        do
            # Unpack packages to get the ID's !
            dpkg -x "$file" ./tmp-nvidia/
        done

        # get the version
        for _NVIDIA_IDS in ./tmp-nvidia/usr/lib/nvidia/current/nvidia.ids $(ls ./tmp-nvidia/usr/lib/nvidia/legacy-*/nvidia.ids 2>/dev/null | sort -V -r)
        do
            if [ -e "${_NVIDIA_IDS}" ]
            then
                if grep -qs "${_DEVICE}" ${_NVIDIA_IDS}
                then
                    _NVIDIA_VERSION="$(basename $(dirname ${_NVIDIA_IDS}))"
                    _NVIDIA_MODULE="$(echo nvidia-${_NVIDIA_VERSION} | sed -e 's|-current$||')"

                    break
                fi
            fi
        done

        cd "$prev_dir"
        rm -rf /var/cache/apt/archives/nvidia-tmp 2>/dev/nul
        rm -rf /var/tmp/nvidia-tmp 2>/dev/null
    fi

    # }}}
    # show result found {{{
    if [[ -n "$_NVIDIA_VERSION" ]] ; then
        el_explain 2 "Version of Nvidia for your machines is: __${_NVIDIA_VERSION}__"
        el_explain 2 "Module to load for your nvidia card is: __${_NVIDIA_MODULE}__"
    else
        # if we have nothing found we should tell the user what to do
        if ((is_mode_check)) ; then
            el_explain 0 "Seems like we cannot detect the package of nvidia that you need for your graphic card, things that you can do:"
            el_explain 0 " * Update your packages list (__apt-get update__) and try again"


            el_explain 0 " * Maybe your version of nvidia is not yet included in Elive, but it should be backported soon"
            el_explain 0 "Run the command __nvidia-detect__ to see what it says"
        else
            # if we cannot detect we cannot continue!
            exit 1
        fi
    fi

    # if we only  want to check, we don't need to do anything more here, just exit
    if ((is_mode_check)) ; then
        echo -e "The Nvidia driver for your machine is: $_NVIDIA_VERSION"
        exit
    fi

    # examples of results:
    #_NVIDIA_VERSION=current
    #_NVIDIA_MODULE=nvidia
    #_NVIDIA_VERSION=legacy-304xx
    #_NVIDIA_MODULE=nvidia-legacy-304xx


    # - show result found }}}
    # TODO: version 71xx don't have ID's, check at least if stills compiles

    cd "$prev_dir"
}
#===  FUNCTION  ================================================================
#          NAME:  interactive_ask_privative
#   DESCRIPTION:  ask to the user if wants to install the privative driver or not
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
interactive_ask_privative(){
    # pre {{{
    local ret
    el_debug

    local message_title
    message_title="$( printf "$( eval_gettext "Nvidia Graphic Card" )" "" )"
    local message_message
    message_message="$( printf "$( eval_gettext "Do you want to install the privative drivers of nvidia? We suggest to use them to have a better experience, it offers 3D acceleration and other features like a smoother desktop, they are also most of the times more stable than the free driver." )" "" )"


    # }}}
    # ask if want to install the privative one or the free {{{
    if echo "${_CMDLINE}" | LC_ALL=C grep -qsE "onlyfree" ; then
        ret=1
    else

        if ((is_mode_live)) ; then
            # TODO: deleteme in the future (request feedback experience) {{{
            if el_check_version_development "20" ; then
                local message_report_experience
                message_report_experience="$( printf "$( eval_gettext "You have a Nvidia card! We are just finishing the feature to install the privative drivers in both live and installed mode, could be extremely helpful for us if you simply enter later in our chat to tell us if there's anything that didn't worked with them, you can tell us suggestions too, can you connect later and just say something like Nvidia Driver Version Number worked fine? You can found the chat from the second icon of your dock or online from the website. Thank you!" )" "" )"

                if ! dialog --timeout 90 --clear --colors --backtitle "Elive Systems" \
                    --title "Yeppeeeeee! New features!" \
                    --yesno "$message_report_experience" \
                    0 0  ; then

                    clear
                    log_progress_msg "Bad boy... spank spank!"
                    sleep 3
                    log_progress_msg "Now im upset and im going to make you wait... forever forver"
                    sleep 4
                    log_progress_msg "Ok, was a joke :P continuing..."
                    sleep 2
                fi

            fi


            # }}}

            # don't ask if mode auto, assume yes
            if ((is_mode_auto)) ; then
                ret=0
            else
                dialog --timeout 90 --clear --colors --backtitle "Elive Systems" \
                    --title "$message_title" \
                    --yesno "$message_message" \
                    0 0
                ret="$?"
            fi
        else
            # we are running this command manually so we don't want to ask if we want to do what we want to do :P
            ret="0"
        fi
    fi

    case "$ret" in
        0|255) # yes
            if ((is_mode_live)) ; then
                log_progress_msg "Installing privative Nvidia drivers"
            fi
            ;;
        1) # no
            if ((is_mode_live)) ; then
                log_progress_msg "Using nouveau driver for your Nvidia card"
            fi

            # not needed to do anything, just exit
            el_debug "We don't need to do anything, continue using nouveau..."
            exit
            ;;
    esac

    # - ask if want to install the privative one or the free }}}
}
#===  FUNCTION  ================================================================
#          NAME:  interactive_ask_driver_version
#   DESCRIPTION:  ask to the user which driver to install
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
interactive_ask_driver_version(){
    # pre {{{
    local line entry _is_preselection_set _id _desc ret
    el_debug

    # }}}
    # List available versions and ask in a dialog {{{

    local message_select_driver
    message_select_driver="$( printf "$( eval_gettext "Select the version of the driver that you whish to install. Press the spacebar for select and enter to confirm." )" "" )"


    if ! ((is_mode_auto)) && ! ((is_mode_version_set)) ; then
        while read -ru 3 line
        do
            if [[ "${line}" = "xserver-xorg-video-nvidia" ]] ; then
                continue
            fi

            _id="${line#xserver-xorg-video-nvidia}"
            _id="${_id#-}"

            if [[ -z "$_id" ]] ; then
                _id="uknown"
            fi

            case $_id in
                *nvidia|current)
                    _desc="$( printf "$( eval_gettext "Last driver for the most newest cards" )" )"
                    ;;
                *legacy-304xx)
                    _desc="$( printf "$( eval_gettext "Previously last driver for recent cards" )" )"
                    ;;
                *legacy-173xx)
                    _desc="$( printf "$( eval_gettext "Old driver for older cards" )" )"
                    ;;
                *legacy-96xx)
                    _desc="$( printf "$( eval_gettext "Older driver for oldest cards" )" )"
                    ;;
                *legacy-71xx)
                    _desc="$( printf "$( eval_gettext "Oldest driver for dinousaurs" )" )"
                    ;;
                *legacy*)
                    _desc="$( printf "$( eval_gettext "Old driver" )" )"
                    ;;
                *)
                    _desc="$( printf "$( eval_gettext "Unknown version" )" )"
                    ;;
            esac

            if [[ "${_NVIDIA_VERSION}" = "$_id" ]] ; then
                if ((_is_preselection_set)) ; then
                    echo -e "'$_id' '$_desc' off"
                    _is_preselection_set=1
                else
                    echo -e "'$_id' '$_desc' on"
                fi
            else
                echo -e "'$_id' '$_desc' off"
            fi

        done 3<<< "$( { echo "current" ;  apt-cache search xserver-xorg-video-nvidia | grep -v "nouveau" | awk '{print $1}' | sort -V -r ; } )" \
            | xargs dialog --timeout 120 --radiolist "$message_select_driver" 0 0 0  2>"/tmp/.$(basename $0)-ret"

        # get result
        ret="$( cat "/tmp/.$(basename $0)-ret" | head -1 )"
        rm -f "/tmp/.$(basename $0)-ret"

        # remove extra leading blank chars
        read -r ret <<< "$ret"

        # update / force the version to use
        _NVIDIA_VERSION="$ret"

        if ((is_mode_live)) ; then
            log_progress_msg "Using the '$ret' nvidia driver version"
            sleep 1
        else
            el_debug "Nvidia version was '$_NVIDIA_VERSION' and now is '$ret'"
        fi

    fi


    # - List available versions and ask in a dialog }}}
    # select packages to install depending on which version we selected {{{
    case $_NVIDIA_VERSION in
        current)
            _NVIDIA_PACKAGES="nvidia-driver nvidia-glx nvidia-settings"
            ;;
        *)
            _NVIDIA_PACKAGES="nvidia-driver-$_NVIDIA_VERSION nvidia-glx-$_NVIDIA_VERSION nvidia-settings-$_NVIDIA_VERSION"
            ;;
    esac

    el_explain 2 "Selected list of pacakges to install:\n__$( echo "${_NVIDIA_PACKAGES}" | tr ' ' '\n' )__"


    # - select packages to install depending on which version we selected }}}



}


main(){
    # pre {{{
    if [[ -z "${1}" ]] ; then
        usage
        exit 1
    fi

    . /lib/lsb/init-functions

    _CMDLINE="$(cat /proc/cmdline)"

    el_dependencies_check "dialog,apt-cache,wget"

    # }}}

    # Usage
    while getopts ":acifm:lquv" opt; do
        case $opt in
            a)
                is_mode_auto=1
                ;;
            c)
                is_mode_check=1
                ;;
            f)
                is_mode_force=1
                ;;
            #i)
                #is_mode_interactive=1
                #unset is_mode_auto
                #;;
            v)
                export EL_DEBUG=2

                ;;
            m)
                driver_version="$OPTARG"
                is_mode_version_set=1
                ;;
            l)
                is_mode_live=1
                ;;
            q)
                export EL_DEBUG=0

                ;;
            #u)
                #check_hardware
                #uninstall_driver
                #;;
            \?)
                el_error "Invalid option: -$OPTARG"
                usage
                exit 1
                ;;
            :)
                el_error "Option -$OPTARG requires an argument."
                usage
                exit 1
                ;;
        esac
    done


    check_hardware
    interactive_ask_privative
    detect_driver_version
    interactive_ask_driver_version


}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
