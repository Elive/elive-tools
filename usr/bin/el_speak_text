#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
EL_REPORTS="1"
#el_make_environment

#-------------------------------------------------------------------------------
#   Speak something
#-------------------------------------------------------------------------------
main(){
    # pre {{{

    local text process hour is_force

    if [[ "$1" = -f ]] || [[ "$1" = --force ]] ; then
        is_force=1
        shift
    fi


    text="$@"
    if [[ -z "$text" ]] ; then
        return 0
    fi
    if ((NOVOICE)) || ((SILENT)) ; then
        #el_explain 2 "ignoring reproduction of voice because of an environment variable"
        exit
    fi

    # check if we are at night | actually disabled: we need a better way to configure this (from desktop)
    hour="$(date +%k)"

    if [[ "${hour}" -ge "21" ]] || [[ "$hour" -lt "8" ]] ; then
        if ! ((is_force)) ; then
            el_explain 2 "ignoring reproduction of voice because we may be sleeping at this hour"
            exit
        fi
    fi

    # }}}

    # this trick is required because an ugly tmp.lab file is created in the home
    mkdir -p /tmp/.$(basename $0)-$USER-$$  "$HOME/.cache/el_speak"
    cd /tmp/.$(basename $0)-$USER-$$

    # wait for someone that finishes to speak before to start speaking
    #if ps aux | grep -v grep | grep -v "$$" | grep -vE "(vi|vim|gvim|emacs|scite|geany)" | grep -q "$(basename $0) " ; then
    #echo -e "Waiting for someone that finishes to speak before to start speaking" 1>&2
    #sleep 1
    #fi

    # default
    #echo "${text}" | iconv -f utf8 -t ISO-8859-15 | text2wave -f 48000 -otype riff -scale 0.8 | play -q -t wav - tempo 1.0 pad 0 3 phaser 0.9 0.85 4 0.23 1.3 -s reverb 45 50 100 100 69 3 norm
    # futuristic
    #echo "${text}" | iconv -f utf8 -t ISO-8859-15 | text2wave -f 48000 -otype riff -scale 0.8 | play -q -t wav - tempo 1.0 pad 0 3 flanger reverb 60 50 100 100 69 3 norm
    # futuristic + less echo + more chorus in background
    #echo "${text}" | iconv -f utf8 -t ISO-8859-15 | text2wave -f 48000 -otype riff -scale 0.8 | play -q -t wav - tempo 1.0 pad 0 3 flanger reverb 40 50 100 100 75 3 norm 2  2>/dev/null

    #echo "${text}" | iconv -f utf8 -t ISO-8859-15 | text2wave -f 48000 -otype riff -scale 0.8 | play -q -t wav - tempo 1.0 pad 0 2 flanger reverb 40 50 100 100 75 3 norm 4  2>/dev/null

    # save a copy of the voice
    if ! [[ -s "$HOME/.cache/el_speak/${text}.wav" ]] ; then
        echo "${text}" | iconv -f utf8 -t ISO-8859-15 | text2wave -f 48000 -otype riff -scale 0.8 > "$HOME/.cache/el_speak/${text}.wav"
    fi
    # if we have the voice, play it, with effects
    if [[ -s "$HOME/.cache/el_speak/${text}.wav" ]] ; then
        play -q -t wav "$HOME/.cache/el_speak/${text}.wav" tempo 1.0 pad 0 2 flanger reverb 40 50 100 100 75 3 norm 4  2>/dev/null
    fi

    # cleanup space
    cd "$HOME/.cache/el_speak"
    # update: the next command not works with some characters, so the next is the alternative:
    #ls -1tr | head -n "-40" | xargs rm -f
    count=0
    while IFS= read -r -d ' ' && IFS= read -r -d '' filename; do
        (( ++count > 40 )) && printf '%s\0' "$filename"
    done < <(find . -maxdepth 1 -type f -iname '*'wav -printf '%T@ %P\0' | sort -g -z) \
        | xargs -0 rm -f --

    #echo "$text" >> /tmp/.$(basename $0)-${USER}-log.txt

    cd - 1>/dev/null
    rm -rf /tmp/.$(basename $0)-$USER-$$
}

#
#  MAIN
#
el_dependencies_check "text2wave|play|sox|iconv"

{ main "$@" & disown ; } 2>/dev/null
#main "$@"

# vim: set foldmethod=marker :

