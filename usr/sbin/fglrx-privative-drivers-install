#!/bin/bash
source /usr/lib/elive-tools/functions



#===  FUNCTION  ================================================================
#          NAME:  usage
#   DESCRIPTION:  Shows the usage help, don't exit
#===============================================================================
usage(){
    #
    # if -a : should return true in case of installed or false if install failed
    #           already installed? already running?
    # if -i : will ask the user which version to install (suggesting the best option to use)
    # if -f : only for debug purposes, but should install successfully too
    #
    echo -e "Usage: $(basename $BASH_SOURCE) [options]"
    echo -e "  -a: auto install"
    echo -e "  -d: detect only (return true or false if we have ati or not)"
    echo -e "  -l: live mode (don't pre-download packages, pre-ask if want to install, more interactive)"
    echo -e "  -f: force install (if no ati cards are found)"
    echo -e "  -q: quiet mode"
    echo -e "  -c: check only (tell which version of the drivers we need)"
    echo -e "  -m: model (version of drivers) to use"
    echo -e "      - like:  current, legacy"
    echo -e "        - legacy versions:  from HD 2000 to HD 4000"
    echo -e "        - current versions: from HD 5000 to higher"
    #echo -e "  -s: simulate mode (simulate that you have the specified model hardware"
    echo -e "  -u: uninstall drivers"
    echo -e "  -v: verbose mode"
}

#===  FUNCTION  ================================================================
#          NAME:  check_hardware
#   DESCRIPTION:  check the hardware if has or not the graphic card
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
check_hardware(){
    # pre {{{
    el_debug
    #el_security_function_loop || return

    # we don't need to check if we have the hardware if we want to uninstall the driver
    if ((is_mode_uninstall)) ; then
        return
    fi

    # }}}
    # detect if we have the hardware with ati {{{
    # pci-id with ati on first graphic card

    # check if hardware has ati
    # TODO: if has intel too, strongly suggests to use intel instead
    # TODO: if something like:  01:00.0 VGA compatible controller: Advanced Micro Devices [AMD] nee ATI RV370 5B60 [Radeon X300 (PCIE)]
    #         try to catch the PCIE instead which means "new"
    if lspci | grep -qsiE "(VGA|3D|Display)\s+.*\s+(AMD|ATI).*Radeon\s+" ; then
        el_explain 3 "ati card found in lspci"
        is_ati_card_found=1
    fi

    if echo "${_CMDLINE}" | LC_ALL=C grep -qsiE "simulate=fglrx" ; then
        is_nvidia_card_found=1
        # we also want/need to force the install because there's no real hardware here
        is_mode_force=1
    fi


    # force or exit?
    if ! ((is_ati_card_found)) ; then
        if ((is_mode_force)) ; then
            el_warning "Force mode in a machine where is not detected ati card"
            is_ati_card_found=1
        else
            el_error "No ati graphic cards found on this machine"
            exit 1
        fi
    fi

    # in mode check we dont want to install, just to check
    if ((is_mode_detect)) ; then
        exit 0
    fi

    # - detect if we have the hardware with ati }}}
}
#===  FUNCTION  ================================================================
#          NAME:  detect_driver_version
#   DESCRIPTION:  detect or ask which version of the driver to use
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
detect_driver_version(){
    # pre {{{
    local prev_dir file
    prev_dir="$(pwd)"

    el_debug

    # }}}
    # checks to determine version {{{
    # manual mode
    if el_check_variables "driver_version" 1>/dev/null 2>&1 ; then
        el_explain 2 "Selected __${driver_version}__ version of drivers to use"
        _FGLRX_VERSION="$driver_version"
        return
    fi


    if [[ -z "$driver_version" ]] ; then
        driver_version="$( lspci | grep -iE "(VGA|3D|Display)\s+.*\s+(AMD|ATI).*Radeon HD.*Series" | sed -e 's|^.*Radeon HD||g' -e 's|Series.*$||g' | awk '{print $1}' | grep -E "^[[:digit:]]*[[:digit:]]$" )"

        if [[ -n "$driver_version" ]] ; then
            if [[ "${driver_version}" -gt "4000" ]] ; then
                driver_version="current"
            else
                driver_version="legacy"
            fi
        fi
    fi

    # PCIE? use last
    if [[ -z "$driver_version" ]] ; then
        if lspci | grep -qsiE "(VGA|3D|Display)\s+.*\s+(AMD|ATI).*Radeon.*PCIE" ; then
            driver_version="current"
        fi
    fi

    # nothing? use default
    if [[ -z "$driver_version" ]] ; then
        el_warning "You have forced the install of fglrx but you didn't say which version, let's use the 'current' one as default then..."
        driver_version="current"
    fi

    # mark it
    if [[ -n "$driver_version" ]] ; then
        _FGLRX_VERSION="$driver_version"
    fi


    # }}}
    # - show result found {{{

    # if we only  want to check, we don't need to do anything more here, just exit
    if ((is_mode_check)) ; then
        echo -e "The detected ATI drivers for your machine is probably: $_FGLRX_VERSION"
        exit
    fi

    # - show result found }}}
}
#===  FUNCTION  ================================================================
#          NAME:  interactive_ask_privative
#   DESCRIPTION:  ask to the user if wants to install the privative driver or not
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
interactive_ask_privative(){
    # pre {{{
    local ret
    el_debug


    # }}}
    # ask if want to install the privative one or the free {{{
    if echo "${_CMDLINE}" | LC_ALL=C grep -qsE "onlyfree" ; then
        echo -e "Using free drivers only because 'onlyfree' is set in your boot parameters" 1>&2
        ret=1
    else

        if ((is_mode_live)) ; then
            # TODO: deleteme in the future (request feedback experience) {{{
            if el_check_version_development "20" && ! ((is_mode_auto)) ;  then
                local message_report_experience
                message_report_experience="$( printf "$( eval_gettext "We have just finished the feature to install the privative drivers (both in Live mode and installed mode), it is extremely helpful for us if you enter in our chat to tell us if there's anything that doesn't function, or any suggestion, even to tell us which option has worked is useful for us. You can run the chat from the second icon of the bar or directly from the website. Thank you!" )"  )"

                if ! dialog --timeout 80 --clear --colors --backtitle "Elive Systems :: Use Ctrl-L to redraw, TAB or Space to select, Enter to confirm" \
                    --title "Yeppeeeeee! New features!" \
                    --yesno "$message_report_experience" \
                    0 0  ; then

                    clear
                    echo
                    log_progress_msg "Bad boy... spank spank!"
                    sleep 3
                    echo
                    log_progress_msg "Now im upset and I will stuck you on this step... forever forever!"
                    sleep 5
                    echo
                    log_progress_msg "Ok, that was a joke :P continuing..."
                    sleep 3
                    echo
                fi

            fi


            # }}}

            # don't ask if mode auto, assume yes
            if ((is_mode_auto)) ; then
                ret=0
            else
                local message_title
                message_title="$( printf "$( eval_gettext "ATI Graphic Card" )" "" )"
                local message_message
                message_message="$( printf "$( eval_gettext "Do you want to install the privative drivers of ATI? We don't suggest you to do it unless you really know that they works good for you, most of the times the free drivers is much better quality for the ATI cards and the privative ones only works good in some cards, if you select to use the privative one you should verify that everything works without problems, because it can even block entirely your computer and give you other good amount of instability problems, the best is to simply try all the options and applications before to decide for one." )" "" )"

                dialog --timeout 60 --clear --colors --backtitle "Elive Systems :: Use Ctrl-L to redraw, TAB or Space to select, Enter to confirm" \
                    --title "$message_title" \
                    --yesno "$message_message" \
                    0 0
                ret="$?"
            fi
        else
            # we are running this command manually so we don't want to ask if we want to do what we want to do :P
            ret="0"
        fi
    fi

    case "$ret" in
        0|255|123) # yes, timeout, cancel
            if ((is_mode_live)) ; then
                log_progress_msg "Installing privative ATI drivers"
            fi
            ;;
        1) # no
            if ((is_mode_live)) ; then
                if echo "${_CMDLINE}" | LC_ALL=C grep -qsE "onlyfree" ; then
                    log_progress_msg "Using the free drivers..."
                else
                    # tell the user to reboot with onlyfree option
                    local message_onlyfree
                    message_onlyfree="$( printf "$( eval_gettext "To better use the free drivers please reboot and select the 'only free drivers' option. Due to compatibility reasons the radeon module is blacklisted on this boot, to have the free drivers correctly working you need to reboot and select this option or to remove the blacklist of radeon from the boot parameter options." )" "" )"

                    dialog --timeout 80 --clear --colors --backtitle "Elive Systems :: Use Ctrl-L to redraw, TAB or Space to select, Enter to confirm" \
                        --title "Free Driver Option" \
                        --msgbox "$message_onlyfree" \
                        0 0
                fi
            fi

            # not needed to do anything, just exit
            el_debug "We don't need to do anything, continue using the free drivers..."
            exit
            ;;
    esac

    # - ask if want to install the privative one or the free }}}
}
#===  FUNCTION  ================================================================
#          NAME:  interactive_ask_driver_version
#   DESCRIPTION:  ask to the user which driver to install
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
interactive_ask_driver_version(){
    # pre {{{
    local line entry _is_preselection_set _id _desc ret
    el_debug

    # }}}
    # List available versions and ask in a dialog {{{


    if ! ((is_mode_auto)) && ! ((is_mode_version_set)) ; then
        local message_select_driver
        message_select_driver="$( printf "$( eval_gettext "Use the spacebar for select the drivers that you want to install and press enter to confirm." )" "" )"
        if [[ -n "$_FGLRX_VERSION" ]] ; then
            local message_select_driver_suggested
            message_select_driver_suggested="$( printf "$( eval_gettext "The version '%s' is problably the one that you need." )" "$_FGLRX_VERSION" )"
        fi

        dialog --timeout 80 --clear --colors --backtitle "Elive Systems :: Use Ctrl-L to redraw, TAB or Space to select, Enter to confirm" --radiolist "$message_select_driver""\n\n$message_select_driver_suggested" 0 0 0 \
            "free driver" "$( eval_gettext "Suggested Free option" )" on \
            "current" "$( eval_gettext "For new cards, since the Radeon series 5000" )" off \
            "legacy" "$( eval_gettext "For older cards, up to the Radeon 4000 series" )" off \
            2>"/tmp/.$(basename $0)-ret"


        # user canceled? uninstall and exit
        if echo "$?" | grep -qsE "^(1|123|255|125)$" ; then
            uninstall_driver
            exit
        fi

        # get result
        ret="$( cat "/tmp/.$(basename $0)-ret" | head -1 )"
        rm -f "/tmp/.$(basename $0)-ret"

        # remove extra leading blank chars
        read -r ret <<< "$ret"

        # if users's cancel, we have no results at all
        if [[ -z "$ret" ]] ; then
            uninstall_driver
            exit
        fi

        log_progress_msg "Using the '$ret' ATI drivers version"
        # add a pause in case we selected a different than the expected one
        if [[ "${ret}" != "$_FGLRX_VERSION" ]] ; then
            sleep 2
            log_progress_msg "Note: the selected version ($ret) is not the same as the suggested one ($_FGLRX_VERSION)"
            sleep 4
        fi

        # update / force the version to use
        if [[ -n "$ret" ]] ; then
            _FGLRX_VERSION="$ret"
        fi

    fi


    # - List available versions and ask in a dialog }}}
    # select packages to install depending on which version we selected {{{
    case $_FGLRX_VERSION in
        current)
            _FGLRX_PACKAGES="fglrx-atieventsd fglrx-control fglrx-driver fglrx-modules-dkms libfglrx-amdxvba1 libgl1-fglrx-glx xvba-va-driver"
            ;;
        legacy)
            _FGLRX_PACKAGES="fglrx-legacy-atieventsd fglrx-legacy-control fglrx-legacy-driver fglrx-legacy-modules-dkms libfglrx-legacy-amdxvba1 libgl1-fglrx-legacy-glx"
            ;;
        *)
            # free one? don't do anything, exit
            exit
            ;;
    esac

    el_explain 2 "Selected list of packages to install:\n__$( echo "${_FGLRX_PACKAGES}" | tr ' ' '\n' )__"


    # - select packages to install depending on which version we selected }}}
}

#===  FUNCTION  ================================================================
#          NAME:  install_driver
#   DESCRIPTION:  prepare system and install the driver to use fglrx
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
install_driver(){
    # pre {{{
    el_debug

    if ! el_check_variables "_FGLRX_VERSION" ; then
        el_error "We don't know which version of fglrx to use"
        exit 1
    fi

    if ! el_check_variables "_FGLRX_PACKAGES" ; then
        el_error "We don't know which packages of fglrx to install"
        exit 1
    fi

    mkdir -p /etc/X11/xorg.conf.d


    # }}}

    # conf {{{
    # create conf first
    : > /etc/X11/xorg.conf.d/20-fglrx.conf

    echo 'Section "Device"' >> /etc/X11/xorg.conf.d/20-fglrx.conf
    echo '        Identifier     "Default screen"' >> /etc/X11/xorg.conf.d/20-fglrx.conf
    echo '        Driver         "fglrx"' >> /etc/X11/xorg.conf.d/20-fglrx.conf
    echo '        # append options here' >> /etc/X11/xorg.conf.d/20-fglrx.conf # do not remove
    echo 'EndSection' >> /etc/X11/xorg.conf.d/20-fglrx.conf

    # - conf }}}
    # Optimus inform to user {{{
    # OPTIMUS devices: if we are in laptop, and have more than one graphic card and both are not ati ones...
    if [[ "$(lspci | grep -E "(VGA|3D|Display)" | wc -l )" -gt "1" ]] && ! [[ "$(lspci | grep -E "(VGA|3D|Display)" | grep -iE "(VGA|3D|Display)\s+.*\s+(AMD|ATI).*Radeon\s+" | wc -l )" -gt "1" ]] ; then

        if laptop-detect ; then
            local message_multiple_cards
            message_multiple_cards="$( printf "$( eval_gettext "An extra graphic card has been detected in your system, maybe your laptop uses a special ATI shared drivers, where the internal card is used for save battery and switches to the ATI when needs more performance. You can use in Elive the ATI if you install FGLRX or it will use the Intel if you don't, so we are going to use now the FGLRX. If you have any problem by running your graphical system we suggest you to enter in the BIOS and disable one of them. Search in google to know how to configure your BIOS." )" "" )"
        else
            local message_multiple_cards
            message_multiple_cards="$( printf "$( eval_gettext "An extra graphic card has been detected in your system, we will proceed by using FGLRX but if you have any problem running the graphical system we suggest you to remove one of the graphic cards, if the other one is included in the motherboard you should be able to disable from the BIOS. Search in google to know how to configure your BIOS." )" "" )"
        fi

        dialog --timeout 80 --clear --colors --backtitle "Elive Systems :: Use Ctrl-L to redraw, TAB or Space to select, Enter to confirm" \
            --title "Multiple Graphic Cards found" \
            --msgbox "$message_multiple_cards" \
            0 0
    fi
    # - Optimus inform to user }}}

    # unload modules {{{
    # note: we should have already enough memory because we should have already requested to add a swap in case that we don't have enough space
    if lsmod | grep -qsE "(radeon|radeonhd)" ; then
        if ((is_mode_force)) ; then
            rmmod -f radeon
            rmmod -f radeonhd
        else
            rmmod radeon
            rmmod radeonhd

            if lsmod | grep -qsE "(radeon|radeonhd)" ; then
                echo -e "\nE: radeon|radeonhd module is loaded and we cannot unload it"
                echo -e "You should reboot and add the boot parameter 'modprobe.blacklist=radeon,radeonhd' to tell the kernel to not load it, or you can use the -f option (but it can make your screen unreadable, which is ok if you are running it from a ssh)"
            fi
        fi
    fi

    # just in case another one is used
    rmmod radeon 2>/dev/null
    rmmod radeonhd 2>/dev/null

    # - unload modules }}}
    # apt-get install {{{

    echo -e "\n\n\n\n\nInstalling... Please be patient...\n\n"
    sleep 2

    if ! DEBIAN_FRONTEND="noninteractive" apt-get install -y $_FGLRX_PACKAGES ; then
        el_aptget_update

        if ! DEBIAN_FRONTEND="noninteractive" apt-get install -y $_FGLRX_PACKAGES ; then
            el_aptget_update force

            if ! DEBIAN_FRONTEND="noninteractive" apt-get install -y $_FGLRX_PACKAGES ; then
                while read -ru 3 package
                do
                    if ! DEBIAN_FRONTEND="noninteractive" apt-get install -y $package ; then
                        echo -e "\nE: Installing fglrx packages failed, please report the previous error messages to Elive" 1>&2
                        sleep 10
                    fi
                done 3<<< "$( echo "$_FGLRX_PACKAGES")"
            fi
        fi
    fi


    # add the packages to the installed system later too
    if echo "${_CMDLINE}" | LC_ALL=C grep -qsE "boot=live" ; then
        # first remove any possible previous entry for fglrx
        sed -i '/fglrx/d' /tmp/.packages-to-install 2>/dev/null
        sed -i '/fglrx/d' /tmp/.packages-to-hold    2>/dev/null

        for package in $_FGLRX_PACKAGES
        do
            echo "$package" >> /tmp/.packages-to-install
            # just like the kernel, keep them holded, we don't want surprises, if a system works it works
            echo "$package" >> /tmp/.packages-to-hold
        done
    fi


    # - apt-get install }}}
    # load module {{{
    # reload devices just in case
    service fglrx-atieventsd restart 1>/dev/null 2>&1

    # load driver
    if ! modprobe fglrx ; then
        local message_unable_to_load

        # default message for not working drivers
        if ! lsmod | grep -qs fglrx ; then
            el_error "Unable to load FGLRX module"
            local message_unable_to_load
            message_unable_to_load="$( printf "$( eval_gettext "We are unable to load the FGLRX module, maybe the compilation has failed, we suggest to reboot and try with a different kernel version, specially if is an old version of the fglrx drivers it will require an older version of the kernel." )" "" )"
        fi


        if modprobe fglrx 2>&1 | grep -qsE "(No such device|No supported display adapters)" ; then
            message_unable_to_load="$( printf "$( eval_gettext "Error: The compiled drivers don't looks like to accept your model of graphic card, you could try to compile the other versions too and if no works, just try to use the Free drivers." )" "" )"

        fi

        # module simply was not compiled
        if ! find "/lib/modules/$(uname -r)" -type f -iname '*'fglrx'*' | grep -qs "fglrx.ko" ; then
            message_unable_to_load="$( printf "$( eval_gettext "Error: The driver has not compiled successfully, this normally happens when you have a too much recent kernel, or too old, try to reboot and select to use a different kernel version from the boot selector list. We suggest to use the Free drivers if they works for you." )" "" )"
        fi


        # show the message if we have any
        if [[ -n "$message_unable_to_load" ]] ; then
            dialog --timeout 80 --clear --colors --backtitle "Elive Systems :: Use Ctrl-L to redraw, TAB or Space to select, Enter to confirm" \
                --title "Unable to load module" \
                --msgbox "$message_unable_to_load" \
                0 0
        fi



        # cleanups
        if ! ((is_mode_force)) || ((is_mode_live)) ; then
            uninstall_driver
            el_error "Switched to the default drivers option"
            sleep 4
            exit 1
        fi
    fi

    # reload devices just in case
    service fglrx-atieventsd restart 1>/dev/null 2>&1

    # - load module }}}
    # inform {{{
    local message_remember
    message_remember="$( printf "$( eval_gettext "Remember, if you have issues trying to run the graphical system, or if you experience unstability issues of any kind, it can be due to this drivers, using the free drivers should solve the problem, or in the inverse way maybe you need the privative version, only your own experience will tell you." )" "" )"

        dialog --timeout 80 --clear --colors --backtitle "Elive Systems :: Use Ctrl-L to redraw, TAB or Space to select, Enter to confirm" \
            --title "Ready to be run" \
            --msgbox "$message_remember" \
            0 0

    el_explain 2 "Install complete"
    # - inform }}}
}

#===  FUNCTION  ================================================================
#          NAME:  uninstall_driver
#   DESCRIPTION:  uninstalls any possible fglrx drivers and make the system work back on radeon
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
uninstall_driver(){
    # pre {{{
    local line
    el_debug

    unset _FGLRX_PACKAGES

    # }}}

    # unload module {{{
    # unload module first
    if lsmod | grep -qs radeon ; then
        rmmod radeon
        rmmod radeonhd

        if lsmod | grep -qs radeon ; then
            if ((is_mode_force)) ; then
                rmmod -f radeon
                rmmod -f radeonhd
            else
                el_explain 0 "E: unable to unload the __radeon|radeonhd module__, if you are running the graphical system you should exit from it first, and if is not the case and you want to force to proceed use the -f option"
                exit 1
            fi
        fi
    fi


    # - unload module }}}
    # confs {{{
    # remove any possible xorg conf (before uninstall packages)
    rm -f /etc/X11/xorg.conf.d/20-fglrx.conf 2>/dev/null


    # - confs }}}
    # packages {{{
    # remove all fglrx packages
    while read -ru 3 line
    do
        [[ -z "$line" ]] && continue

        # if matches
        if echo "$line" | grep -qsE "(fglrx|lib.*fglrx|glx.*fglrx|xserver.*fglrx|xvba-va-driver)" ; then
            # which doesn't maches
            if ! echo "$line" | grep -qsE "(fglrx-detect|glx-diversions|fglrx-installer-cleanup)" ; then
                el_debug "Adding $line to the list of uninstall packages"
                _FGLRX_PACKAGES="$_FGLRX_PACKAGES $line"
            fi
        fi

    done 3<<< "$( { echo "xvba-va-driver" ; dpkg -l | grep fglrx | awk '{print $2}' ; } )"

    # remove extra leading blank chars
    read -r _FGLRX_PACKAGES <<< "$_FGLRX_PACKAGES"

    if [[ -n "$_FGLRX_PACKAGES" ]] ; then
        if ((is_mode_auto)) ; then
            el_debug "apt-get remove --purge -y $_FGLRX_PACKAGES"
            DEBIAN_FRONTEND="noninteractive" apt-get remove --purge -y $_FGLRX_PACKAGES
        else
            el_debug "apt-get remove --purge $_FGLRX_PACKAGES"
            DEBIAN_FRONTEND="noninteractive" apt-get remove --purge $_FGLRX_PACKAGES
        fi
    else
        el_explain 0 "FGLRX packages already removed"
    fi


    # - packages }}}
    # end {{{
    # show final result
    if dpkg -l | awk '{print $2}' | grep fglrx | grep -vE "(fglrx-detect|glx-diversions|fglrx-installer-cleanup)" | grep -qs fglrx ; then
        echo -e ""
        el_error "We still having some fglrx packages not uninstalled:"
        dpkg -l | grep fglrx | awk '{print $2}' | grep fglrx  1>&2
    else
        el_explain 0 "Driver FGLRX uninstalled __successfully__"
    fi

    # - end }}}
}


main(){
    # pre {{{
    if [[ -z "${1}" ]] ; then
        usage
        exit 1
    fi

    . /lib/lsb/init-functions

    _CMDLINE="$(cat /proc/cmdline)"

    el_dependencies_check "dialog,apt-cache,wget"

    # }}}

    # Usage
    while getopts ":acdifm:lquv" opt; do
        case $opt in
            a)
                is_mode_auto=1
                ;;
            c)
                is_mode_check=1
                ;;
            d)
                is_mode_detect=1
                ;;
            f)
                is_mode_force=1
                ;;
            #i)
                #is_mode_interactive=1
                #unset is_mode_auto
                #;;
            v)
                export EL_DEBUG=2

                ;;
            m)
                driver_version="$OPTARG"
                is_mode_version_set=1
                ;;
            l)
                is_mode_live=1
                ;;
            q)
                export EL_DEBUG=0

                ;;
            u)
                is_mode_uninstall=1
                ;;
            \?)
                el_error "Invalid option: -$OPTARG"
                usage
                exit 1
                ;;
            :)
                el_error "Option -$OPTARG requires an argument."
                usage
                exit 1
                ;;
        esac
    done



    check_hardware

    if ((is_mode_uninstall)) ; then
        uninstall_driver
        # nothing more to do so exit
        exit
    fi

    if ((is_mode_version_set)) ; then
        # uninstall possible drivers first
        uninstall_driver
    fi

    interactive_ask_privative
    detect_driver_version
    interactive_ask_driver_version
    install_driver


}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
