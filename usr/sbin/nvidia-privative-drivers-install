#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
REPORTS="1"

# include sbin in our PATH since its needed sometimes, and there's nothing wrong by using it!
if [[ "$PATH" != *"/usr/sbin"* ]] ; then
    # needed for: laptop-detect
    export PATH="${PATH}:/usr/local/sbin:/usr/sbin:/sbin"
fi


# TODO: since we install our own drivers, can we remove the package libgl1-mesa-dri ? (because it wastes 100 MB from installation), will need some betatestings

#===  FUNCTION  ================================================================
#          NAME:  usage
#   DESCRIPTION:  Shows the usage help, don't exit
#===============================================================================
usage(){
    #
    # if -a : should return true in case of installed or false if install failed
    #           already installed? already running?
    # if -i : will ask the user which version to install (suggesting the best option to use)
    # if -f : only for debug purposes, but should install successfully too
    #
    echo -e "Usage: $(basename $BASH_SOURCE) [options]"
    echo -e "  -a: auto install"
    echo -e "  -d: detect only (return true or false if we have nvidia or not)"
    echo -e "  -l: live mode (pre-ask if want to install, more interactive)"
    echo -e "  -f: force install (if no nvidia cards are found)"
    echo -e "  -q: quiet mode"
    echo -e "  -h: help usage"
    echo -e "  -c: check only (tell which version of the drivers we need)"
    echo -e "  -t: test driver only (if the driver is correctly installed and working)"
    echo -e "  -m: model (version of drivers) to use"
    echo -e "      - like:  current, tesla-418, legacy-390xx legacy-340xx, legacy-304xx, legacy-173xx, legacy-96xx"
    #echo -e "  -s: simulate mode (simulate that you have the specified model hardware" # not needed, we have enough hardware with nvidia to test on, and real tests are better
    echo -e "  -u: uninstall drivers"
    echo -e "  -v: verbose mode"
}

#===  FUNCTION  ================================================================
#          NAME:  check_driver
#   DESCRIPTION:  check if is already installed
#    PARAMETERS:  -
#       RETURNS:  true | false
#===============================================================================
check_driver(){
    # we should have enough with only this file, if is not installed it should have been removed!
    if ((is_xorg_template_wanted)) ; then
        if ! [[ -s "/etc/X11/xorg.conf.d/20-nvidia.conf" ]] ; then
            return 1
        fi
    fi
    # but wee need also to make sure that is 'correctly' installed
    if ! load_driver ; then
        return 1
    fi
}
#===  FUNCTION  ================================================================
#          NAME:  load_driver
#   DESCRIPTION:  loads the nvidia module
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
load_driver(){
    # pre {{{
    el_debug
    local i nvidia_modules

    # }}}

    # load driver
    if which nvidia-modprobe 1>/dev/null 2>&1 ; then
        nvidia-modprobe
    fi

    if ! lsmod | grep -qs "^nvidia" ; then
        nvidia_modules="$( find "/lib/modules/$(uname -r)/updates" -type f -iname nvidia'*'ko | psort --  -p "nvidia-legacy-${_NVIDIA_VERSION}.ko" -p "${_NVIDIA_VERSION}.ko" | grep -vE "(uvm|modeset|drm).ko" )"

        if [[ "$( echo "$nvidia_modules" | wc -l )" -ge 1 ]] ; then
            for i in $nvidia_modules
            do
                _NVIDIA_MODULE="$(basename "$i" )"
                _NVIDIA_MODULE="${_NVIDIA_MODULE%.ko}"
                el_info "running: modprobe $_NVIDIA_MODULE"

                if modprobe "$_NVIDIA_MODULE" ; then
                    break
                fi
            done
        fi
    fi

    if [[ -z "$_NVIDIA_MODULE" ]] ; then
        _NVIDIA_MODULE="$( lsmod | grep "^nvidia" | awk '{print $1}' | tail -1 )"
    fi

    # check
    if [[ "$( echo "$nvidia_modules" | wc -l )" -gt 1 ]] ; then
        el_warning "more than one nvidia module found: \n$nvidia_modules"
    fi

    # simulate that it worked
    if ((is_mode_simulate)) ; then
        return 0
    fi

    if lsmod | grep -qs "^nvidia" ; then
        return 0
    else
        #el_error "unable to load nvidia module: \ndmesg:\n$(dmesg | tail -n 6)\nmodules found:\n$nvidia_modules"
        #sleep 4
        return 1
    fi
}
#===  FUNCTION  ================================================================
#          NAME:  check_hardware
#   DESCRIPTION:  check the hardware if has or not the graphic card
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
check_hardware(){
    # pre {{{
    el_debug
    #el_security_function_loop || return

    # we don't need to check if we have the hardware if we want to uninstall the driver
    if ((is_mode_uninstall)) ; then
        return
    fi

    # }}}
    # detect if we have the hardware with nvidia {{{
    # pci-id with nvidia on first graphic card
    #_DEVICE="$( lspci -mn | awk '/03(00|80|02)/ { print $3$4 }' | sed -e 's|"||g' | tr [a-z] [A-Z] | grep -E '^(10DE|12D2)' | head -n1)"
    _DEVICE="$( lspci -mn | awk '/ "03/ { print $3$4 }' | sed -e 's|"||g' | tr [a-z] [A-Z] | grep -E '^(10DE|12D2)' | head -n1)"

    if echo "${_DEVICE}" | grep -qs -E '^(10DE|12D2)' ; then
        el_debug "nvidia card found on pci-id"
        is_nvidia_card_found=1
    fi

    if ((is_mode_simulate)) ; then
        is_nvidia_card_found=1
        # we also want/need to force the install because there's no real hardware here
        is_mode_force=1
    fi

    # check if hardware has nvidia
    # Seems like a more reliable way than using VGA for the detect is: lspci -nn | grep '\[03'
    if lspci | grep -qsiE "\W+(VGA|3D|2D|Display)\W+.*\W+nvidia\W+" ; then
        el_debug "nvidia card found in lspci"
        is_nvidia_card_found=1
    fi

    # force or exit?
    if ! ((is_nvidia_card_found)) ; then
        if ((is_mode_force)) ; then
            el_info "Force mode in a machine where is not detected nvidia card"
            is_nvidia_card_found=1
        else
            el_info "No nvidia graphic cards found on this machine"
            exit 1
        fi
    fi

    # in mode check we dont want to install, just to check
    if ((is_mode_detect)) ; then
        el_info "Nvidia card detected"
        exit 0
    fi

    # - detect if we have the hardware with nvidia }}}
}
#===  FUNCTION  ================================================================
#          NAME:  detect_driver_version
#   DESCRIPTION:  detect or ask which version of the driver to use
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
detect_driver_version(){
    # pre {{{
    local prev_dir file
    prev_dir="$(pwd)"

    el_debug

    if el_check_variables "driver_version" 1>/dev/null 2>&1 ; then
        el_debug "Selected ${driver_version} version of drivers to use"
        _NVIDIA_VERSION="$driver_version"
        #_NVIDIA_MODULE="nvidia" # should be always this one in all the versions, or maybe not?
        return
    fi

    if ! el_check_variables "_DEVICE" 1>/dev/null 2>&1 ; then
        # pci-id with nvidia on first graphic card
        #_DEVICE="$( lspci -mn | awk '/03(00|80|02)/ { print $3$4 }' | sed -e 's|"||g' | tr [a-z] [A-Z] | grep -E '^(10DE|12D2)' | head -n1)"
        _DEVICE="$( lspci -mn | awk '/ "03/ { print $3$4 }' | sed -e 's|"||g' | tr [a-z] [A-Z] | grep -E '^(10DE|12D2)' | head -n1)"
    fi

    if ! el_check_variables "_DEVICE" 1>/dev/null 2>&1 ; then
        if ((is_mode_force)) ; then
            if [[ -z "$driver_version" ]] ; then
                NOREPORTS=1 el_warning "Going to install the nvidia drivers but you didn't say which version, assuming 'current' then..."
                driver_version="current"
            fi
        else
            el_error "You have no Nvidia graphic cards, use -f if you want to force the install, lspci -mn:\n$(lspci -mn)\n$( lspci | grep -E "\W+(VGA|3D|2D|Display)\W+" )"
        fi
    fi

    # mark it
    if [[ -n "$driver_version" ]] ; then
        _NVIDIA_VERSION="$driver_version"
    fi

    # }}}

    el_info "Reading Packages..."

    # try to search for ID's {{{
    #
    # first on your system installed id's
    for _NVIDIA_IDS in /usr/lib/nvidia/current/nvidia.ids $(ls /usr/lib/nvidia/legacy*/nvidia.ids 2>/dev/null | sort -V -r) $(ls /usr/lib/nvidia/tesla*/nvidia.ids 2>/dev/null | sort -V -r)

    do
        if [ -e "${_NVIDIA_IDS}" ]
        then
            if grep -qs "${_DEVICE}" ${_NVIDIA_IDS}
            then
                _NVIDIA_VERSION="$(basename $(dirname ${_NVIDIA_IDS}))"
                _NVIDIA_MODULE="$(echo nvidia-${_NVIDIA_VERSION} | sed -e 's|-current$||')"

                break
            fi
        fi
    done

    # if nothing found, search in already-downloaded packages (if we are in live mode we should have them already there)
    if [[ -z "$_NVIDIA_VERSION" ]] ; then
        # installed ones
        if ls /var/cache/apt/archives/xserver-xorg-video-nvidia*deb 1>/dev/null 2>&1 ; then
            # unpack downloaded ones for scan
            cd /var/cache/apt/archives/
            el_debug "Not ID's found on installed packages, unpacking not-installed ones..."
        else
            if ((is_mode_live)) ; then
                el_debug "You are in mode_live, skipping the pre-download of packages for this mode..."
            else
                # download from urls for scan
                el_info "Not ID's found on installed packages, downloading them..."
                if el_verify_internet fast ; then
                    mkdir -p /var/tmp/nvidia-tmp
                    cd /var/tmp/nvidia-tmp

                    for packagename in $( LC_ALL=C apt-cache search xserver-xorg-video-nvidia | grep -v "nouveau" | awk '{print $1}' | sort -V -r | tr '\n' ' ' )
                    do
                        url_repository="$( LC_ALL=C apt-cache madison ${packagename} | tr ' ' '\n' | grep http | head -1 )"
                        while read -ru 3 line
                        do
                            #url_package_dir="${url_repository%/}/${line%/*}/"
                            if [[ -x "$(which wget)" ]] ; then
                                el_debug "downloading: ${line##*/}"
                                wget -q "${url_repository%/}/${line}"
                            fi
                        done 3<<< "$( LC_ALL=C apt-cache show "${packagename}" 2>/dev/null | grep "Filename:" | sed -e 's|^Filename: ||g' | sort -u )"
                    done
                else
                    NOREPORTS=1 el_error "no connection to internet found"
                fi
            fi
        fi
        # for any of the places where we are (cd), let's scan the opened files:
        for file in xserver-xorg-video-nvidia*deb
        do
            # Unpack packages to get the ID's !
            dpkg -x "$file" ./tmp-nvidia/
            # optimize space, remove unneeded files:
            find tmp-nvidia -type f -iname '*_nvidia\.so*' -delete
            find tmp-nvidia -type f -iname '*nvidia_drv\.so*' -delete
            find tmp-nvidia -type f -iname '*libglx\.so*' -delete
            find tmp-nvidia -type f -iname '*\.so' -delete
            rm -rf tmp-nvidia/usr/share
        done

        # get the version
        for _NVIDIA_IDS in ./tmp-nvidia/usr/lib/nvidia/current/nvidia.ids $(ls ./tmp-nvidia/usr/lib/nvidia/legacy*/nvidia.ids 2>/dev/null | sort -V -r) $(ls ./tmp-nvidia/usr/lib/nvidia/tesla*/nvidia.ids 2>/dev/null | sort -V -r)

        do
            if [ -e "${_NVIDIA_IDS}" ]
            then
                if grep -qs "${_DEVICE}" ${_NVIDIA_IDS}
                then
                    _NVIDIA_VERSION="$(basename $(dirname ${_NVIDIA_IDS}))"
                    _NVIDIA_MODULE="$(echo nvidia-${_NVIDIA_VERSION} | sed -e 's|-current$||')"

                    break
                fi
            fi
        done
        rm -rf nvidia-tmp 2>/dev/null

        cd "$prev_dir"
        rm -rf /var/cache/apt/archives/nvidia-tmp 2>/dev/nul
        rm -rf /var/tmp/nvidia-tmp 2>/dev/null
    fi

    # }}}
    # show result found {{{
    if [[ -n "$_NVIDIA_VERSION" ]] ; then
        el_info "Version of Nvidia for your machines is: ${_NVIDIA_VERSION}"
        el_info "Module to load for your nvidia card is: ${_NVIDIA_MODULE}"
    else
        # if we have nothing found we should tell the user what to do
        if ((is_mode_check)) ; then
            el_info "Seems like we cannot detect the package of nvidia that you need for your graphic card, things that you can do:"
            el_info " * Update your packages list (apt-get update) and try again"


            el_info " * Maybe your version of nvidia is not yet included in Elive, but it should be backported soon"
            el_info "Run the command nvidia-detect to see what it says"
        else
            if ((is_mode_auto)) ; then
                el_error "Unable to autodetect the version that you need, exiting"
                # if we cannot detect we cannot continue!
                exit 1
            fi
        fi
    fi

    # if we only  want to check, we don't need to do anything more here, just exit
    if [[ -n "$_NVIDIA_VERSION" ]] ; then
        if ((is_mode_check)) ; then
            echo -e "The Nvidia drivers for your machine is: $_NVIDIA_VERSION"
            exit
        else
            # suggest the version to use
            if ! ((is_mode_auto)) ; then
                local message_version_suggest
                message_version_suggest="$( printf "$( eval_gettext "The probably version of Nvidia driver that you need is '%s'. If it doesn't works, try with a different version of the drivers." )" "$_NVIDIA_VERSION" )"

                dialog --timeout 80 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                    --title "Suggested Version" \
                    --msgbox "$message_version_suggest" \
                    0 0
            fi
        fi

        # preselect to not ask later
        if ! ((is_mode_simulate)) ; then
            nvidia_version_live_preselected="$_NVIDIA_VERSION"
        fi

    else
        NOREPORTS=1 el_warning "Unable to detect the version of nvidia you need, assuming 'current'"
        sleep 1

        if ! ((is_mode_auto)) ; then
            local message_version_suggest
            message_version_suggest="$( printf "$( eval_gettext "The version of the driver that you need for your Nvidia card has not been detected. This can happen when your card is not supported by the available drivers. In any case, we suggest that you find the right version through trial and error." )" )"

            dialog --timeout 80 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                --title "Unable to detect driver version needed" \
                --msgbox "$message_version_suggest" \
                0 0
        fi
    fi

    if [[ -z "$_NVIDIA_VERSION" ]] ; then
        NOREPORTS=1 el_warning "Unable to detect the version of nvidia you need, assuming 'current'"
        _NVIDIA_VERSION="current"
    fi

    # examples of results:
    #_NVIDIA_VERSION=current
    #_NVIDIA_MODULE=nvidia
    #_NVIDIA_VERSION=legacy-304xx
    #_NVIDIA_MODULE=nvidia-legacy-304xx


    cd "$prev_dir"

    # - show result found }}}
}
#===  FUNCTION  ================================================================
#          NAME:  interactive_ask_privative
#   DESCRIPTION:  ask to the user if wants to install the privative driver or not
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
interactive_ask_privative(){
    # pre {{{
    local ret
    el_debug


    # }}}
    # more than one type of card found {{{
    if [[ "$(lspci | grep -E "\W+(VGA|3D|2D|Display)\W+" | wc -l )" -gt "1" ]] && ! [[ "$(lspci | grep -E "\W+(VGA|3D|2D|Display)\W+" | grep -iE "\W+(VGA|3D|2D|Display)\W+.*\W+nvidia\W+" | wc -l )" -gt "1" ]] && ! ((is_mode_auto)) ; then
        local message_multiple_cards
        message_multiple_cards="$( printf "$( eval_gettext "We have found more than one graphic card in your computer, if you select to install the proprietary drivers we will proceed by using your Nvidia graphic card." )" "" )"


        dialog --timeout 80 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
            --title "Multiple Graphic Cards found" \
            --msgbox "$message_multiple_cards" \
            0 0
    fi
    # - more than one card }}}
    # ask if want to install the privative one or the free {{{
    if echo "${_CMDLINE}" | LC_ALL=C grep -qsE "onlyfree" ; then
        echo -e "Using free-drivers only because 'onlyfree' is set in your boot parameters" 1>&2
        ret=1
    else

        if ((is_mode_live)) ; then

            # warn if low memory that the process can fail!
            memory="$( cat /proc/meminfo | grep -i Memtotal | tail -1 | awk '{print $2}' )"
            if [[ "${memory}" -lt "640000" ]] && ! ((is_mode_auto)) ; then

                local message_low_memory
                message_low_memory="$( printf "$( eval_gettext "Your computer has low RAM memory, the installation of some big packages in live mode can fail because of this, if is the case you can try to install first Elive in your hard disk and then try again to install these packages so you will not run out of memory. After to have installed Elive you can boot with the boot parameter 'init 1' to avoid the start of the graphical system, and run this command like '%s -a' to start again the process of installation." )" "$(basename $0)" )"

                dialog --timeout 80 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                    --title "Low Memory Computer" \
                    --msgbox "$message_low_memory" \
                    0 0
            fi

            # don't ask if mode auto, assume yes
            if ((is_mode_auto)) || ((is_mode_already_run)) ; then
                ret=0
            else
                local message_title
                message_title="$( printf "$( eval_gettext "Nvidia Graphic Card" )" "" )"
                local message_message
                message_message="$( printf "$( eval_gettext "Do you want to install the proprietary graphical drivers of Nvidia? Some computers need them, while other ones works better with the open driver. You should try both modes or each proprietary version to know which one is more suitable for your computer." )" )"
                local message_extra
                message_extra="$( printf "$( eval_gettext "Select 'no' if you want to use the opensource driver instead." )" "" )"


                dialog --timeout 60 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                    --title "$message_title" \
                    --yesno "$message_message\n\n${message_extra}" \
                    0 0
                                    ret="$?"
            fi
        else
            # we are running this command manually so we don't want to ask if we want to do what we want to do :P
            ret="0"
        fi
    fi

    if ! ((is_mode_auto)) ; then
        case "$ret" in
            0|255|123) # yes, timeout, cancel
                if ((is_mode_live)) ; then
                    log_progress_msg "Installing proprietary Nvidia drivers"

                    # checks if we can install it {{{
                    if ! echo "${_CMDLINE}" | LC_ALL=C grep -qsE "blacklist=nouveau" && lsmod | grep -qs '^nouveau' ; then
                        local message_reboot_and_select_privative_1
                        local message_reboot_and_select_privative_2
                        message_reboot_and_select_privative_1="$( printf "$( eval_gettext "To install the proprietary drivers you must reboot and select the proprietary option from the boot menu." )" "" )"
                        message_reboot_and_select_privative_2="$( printf "$( eval_gettext "Or you can boot in any option but you need to press the Tab key and append the boot parameter:" )\nmodprobe.blacklist=nouveau" "" )"

                        dialog --timeout 80 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                            --title "$( eval_gettext "Reboot needed using different option" )" \
                            --msgbox "${message_reboot_and_select_privative_1}\n\n${message_reboot_and_select_privative_2}" \
                            0 0

                        if ((is_mode_live)) ; then
                            dialog --timeout 180 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, TAB to select, Enter to confirm" \
                                --title "Reboot now?" \
                                --yesno "$( eval_gettext "Do you want to reboot now to select the proprietary option? If you select no, we will continue using the open driver." )" \
                                0 0
                            ret="$?"

                            case "$ret" in
                                0|255|123) # yes, timeout, cancel
                                    ( sleep 1 ; reboot & )
                                    exit
                                    ;;
                                1) # no
                                    true
                                    ;;
                            esac
                        fi

                    fi
                    # }}}
                    # remember that this is not stable {{{
                    local message_remember
                    message_remember="$( printf "$( eval_gettext "If these drivers fail or block your computer, try with the other versions and also check the other boot options, or use the free drivers. Using a different version of Elive may work better too. You can find better help in our forums." )" "" )"

                    dialog --timeout 60 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                        --title "If the install fails..." \
                        --msgbox "$message_remember" \
                        0 0

                    # - remember that this is not stable }}}
                fi
                ;;
            1) # no
                if ((is_mode_live)) ; then

                    if echo "${_CMDLINE}" | LC_ALL=C grep -qsE "blacklist=nouveau" ; then
                        # tell the user to reboot with onlyfree option
                        local message_onlyfree
                        if ((is_wheezy)) ; then
                            message_onlyfree="$( printf "$( eval_gettext "Reboot and select the 'only free-drivers' boot option. Due to compatibility reasons the nouveau module is blacklisted on this boot, so you need to reboot on this mode or remove that parameter from the boot options." )" "" )"
                        else
                            message_onlyfree="$( printf "$( eval_gettext "Reboot and do not select the proprietary drivers option, or just remove the parameter '%s' from the boot options pressing the Tab key. Due to compatibility reasons this module is blacklisted on this boot, so you need to remove that parameter from the boot options in order to use it." )" "modprobe.blacklist=nouveau" )"
                        fi

                        dialog --timeout 80 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                            --title "Free-Driver Option" \
                            --msgbox "$message_onlyfree" \
                            0 0
                    else
                        log_progress_msg "Using the free-driver..."
                    fi
                fi

                # not needed to do anything, just exit
                el_debug "We don't need to do anything, continue using nouveau..."
                exit
                ;;
        esac
    fi

    # - ask if want to install the privative one or the free }}}
}
#===  FUNCTION  ================================================================
#          NAME:  interactive_ask_driver_version
#   DESCRIPTION:  ask to the user which driver to install
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
interactive_ask_driver_version(){
    # pre {{{
    local line entry _is_preselection_set _id _desc ret
    el_debug

    # }}}
    # List available versions and ask in a dialog {{{

    local message_select_driver
    message_select_driver="$( printf "$( eval_gettext "Select the version of the driver your graphical card needs." )" "" )"


    if ! ((is_mode_auto)) && ! ((is_mode_version_set)) ; then

        if [[ -n "$nvidia_version_live_preselected" ]] ; then
           ret="$nvidia_version_live_preselected"
           unset nvidia_version_live_preselected

        else
            while read -ru 3 line
            do
                if [[ "${line}" = "xserver-xorg-video-nvidia" ]] ; then
                    continue
                fi

                _id="${line#xserver-xorg-video-nvidia}"
                _id="${_id#-}"

                if [[ -z "$_id" ]] ; then
                    _id="unknown"
                fi

                case $_id in
                    *tesla-418*|tesla)
                        _desc="$( printf "$( eval_gettext "Tesla Nvidia drivers (very new)" )" )"
                        ;;
                    *nvidia|current)
                        _desc="$( printf "$( eval_gettext "Last drivers for most newest cards" )" )"
                        # show the specific version, its always good to know "what" exactly is considered the last version to know if its really supported on your hardware or not
                        _desc="$_desc ($( LC_ALL=C apt-cache show xserver-xorg-video-nvidia | grep "^Version: " | awk '{print $2}' | sort -V | tail -1 | sed -e 's|-.*$||g' ))"
                        ;;
                    *legacy-390xx)
                        _desc="$( printf "$( eval_gettext "Previous drivers for recent cards" )" )"
                        ;;
                    *legacy-340xx)
                        _desc="$( printf "$( eval_gettext "Previous drivers for recent cards (older)" )" )"
                        ;;
                    *legacy-304xx)
                        _desc="$( printf "$( eval_gettext "Previous drivers for recent cards (older older)" )" )"
                        ;;
                    *legacy-173xx)
                        _desc="$( printf "$( eval_gettext "Drivers for old cards" )" )"
                        ;;
                    *legacy-96xx)
                        _desc="$( printf "$( eval_gettext "Drivers for oldest cards" )" )"
                        ;;
                    *legacy-71xx)
                        _desc="$( printf "$( eval_gettext "Drivers for dinosaur devices" )" )"
                        ;;
                    *legacy*)
                        _desc="$( printf "$( eval_gettext "Old drivers" )" )"
                        ;;
                    *)
                        _desc="$( printf "$( eval_gettext "Unknown version" )" )"
                        ;;
                esac

                if [[ "${_NVIDIA_VERSION}" = "$_id" ]] ; then
                    if ((_is_preselection_set)) ; then
                        echo -e "'$_id' '$_desc'"
                        _is_preselection_set=1
                    else
                        echo -e "'$_id' '$_desc'"
                    fi
                else
                    echo -e "'$_id' '$_desc'"
                fi

            done 3<<< "$( { echo "current" ;  LC_ALL=C apt-cache search xserver-xorg-video-nvidia | grep -v "nouveau" | awk '{print $1}' | sort -V -r ; } )" \
                | xargs dialog --timeout 240 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" --menu "$message_select_driver (${_NVIDIA_VERSION} ?)" 0 0 0  2>"/tmp/.$(basename $0)-ret"

            # user canceled? uninstall and exit
            if echo "$?" | grep -qsE "^(1|123|255|125)$" ; then
                #uninstall_driver
                try_again
                exit
            fi

            # get result
            ret="$( cat "/tmp/.$(basename $0)-ret" | head -1 )"
            rm -f "/tmp/.$(basename $0)-ret"

            # remove extra leading blank chars
            read -r ret <<< "$ret"

            # if users's cancel, we have no results at all
            if [[ -z "$ret" ]] ; then
                #uninstall_driver
                try_again
                exit
            fi
        fi

        log_progress_msg "Using the '$ret' nvidia drivers version"

        # add a pause in case we selected a different than the expected one
        if [[ "${ret}" != "$_NVIDIA_VERSION" ]] ; then
            sleep 3
        fi

        # update / force the version to use
        if [[ -n "$ret" ]] ; then
            _NVIDIA_VERSION="$ret"
        fi
    fi


    # - List available versions and ask in a dialog }}}
    # select packages to install depending on which version we selected {{{
    case $_NVIDIA_VERSION in
        current)
            if apt-cache show "nvidia-driver" 1>/dev/null 2>&1 ; then
                _NVIDIA_PACKAGES="nvidia-driver $_NVIDIA_PACKAGES"
            else
                if apt-cache show "nvidia-driver-libs" 1>/dev/null 2>&1 ; then
                    _NVIDIA_PACKAGES="nvidia-driver-libs $_NVIDIA_PACKAGES"
                fi
            fi
            if apt-cache show "nvidia-settings" 1>/dev/null 2>&1 ; then
                _NVIDIA_PACKAGES="nvidia-settings $_NVIDIA_PACKAGES"
            fi

            # i386 no longer supports this version, it fallsback to the version 390
            if apt-cache show nvidia-driver | grep -qs "^Depends: .*nvidia-legacy-" ; then
                clear ; echo
                NOREPORTS=1 el_error "Version 'current' no longer supported for this architecture"
                sleep 4

                message_warning_no_longer_supported="$( printf "$( eval_gettext "This version of Nvidia drivers is no longer supported by this architecture. If you need this version of the driver, we recommend using the 64bit version of Elive instead. The installation will proceed using another version instead:" )" "" ) $(apt-cache show nvidia-driver | grep "Depends: " | sed -e 's|^Depends: ||g' | sort -u )"

                dialog --timeout 280 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                    --title "WARNING" \
                    --msgbox "$message_warning_no_longer_supported" \
                    0 0
            fi
            ;;
        legacy-71xx)

            # NOTE: The 71xx legacy drivers don't support Xorg Xserver newer than 1.4 which was
            # shipped with Debian 5.0 (lenny).

            # the name of the packages are different for this one
            _NVIDIA_PACKAGES="nvidia-glx-legacy-71xx"

            # tell the user to use an older kernel
            #if dpkg --compare-versions "$(uname -r)" ge "3.16" ; then
            #local message_too_much_new_kernel
            ##message_too_much_new_kernel="$( printf "$( eva
            ##l_gettext "Your selected kernel is very new for this version of nvidia, we will try in any of the cases to compile the module for this kernel but if it fails to run your graphical system just use an older version of the kernel, like the one given by default debian. We tested that it compiles with the version 3.2" )" "" )"

            #dialog --timeout 80 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                #--title "Too much new kernel" \
                #--msgbox "$message_too_much_new_kernel" \
                #0 0
            #fi


            ;;
        *)
            if LC_ALL=C apt-cache search "nvidia-settings-$_NVIDIA_VERSION" 2>/dev/null | awk '{print $1}' | grep -qs "nvidia-settings-$_NVIDIA_VERSION" ; then
                _NVIDIA_PACKAGES="nvidia-$_NVIDIA_VERSION-driver nvidia-settings-$_NVIDIA_VERSION"
            else
                _NVIDIA_PACKAGES="nvidia-$_NVIDIA_VERSION-driver"
            fi
            ;;
    esac

    # add the modprobe package
    if ! ((is_wheezy)) ; then
        _NVIDIA_PACKAGES="$_NVIDIA_PACKAGES nvidia-modprobe"
    fi

    el_debug "Selected list of packages to install:\n$( echo "${_NVIDIA_PACKAGES}" | tr ' ' '\n' )"


    # - select packages to install depending on which version we selected }}}
}

#===  FUNCTION  ================================================================
#          NAME:  install_driver
#   DESCRIPTION:  prepare system and install the driver to use nvidia
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
install_driver(){
    # pre {{{
    el_debug

    if ! el_check_variables "_NVIDIA_VERSION" ; then
        el_error "We don't know which version of nvidia to use"
        exit 1
    fi

    if ! el_check_variables "_NVIDIA_PACKAGES" ; then
        el_error "We don't know which packages of nvidia to install"
        exit 1
    fi

    if ((is_xorg_template_wanted)) ; then
        mkdir -p /etc/X11/xorg.conf.d
    fi


    # }}}

    # conf {{{
    # create conf first
    if ((is_xorg_template_wanted)) ; then
        : > /etc/X11/xorg.conf.d/20-nvidia.conf

        echo 'Section "Device"' >> /etc/X11/xorg.conf.d/20-nvidia.conf
        echo '        Identifier     "Default screen"' >> /etc/X11/xorg.conf.d/20-nvidia.conf
        echo '        Driver         "nvidia"' >> /etc/X11/xorg.conf.d/20-nvidia.conf
        echo '        Option         "NoLogo"     "true"' >> /etc/X11/xorg.conf.d/20-nvidia.conf
        echo '        # append options here' >> /etc/X11/xorg.conf.d/20-nvidia.conf # do not remove
        echo 'EndSection' >> /etc/X11/xorg.conf.d/20-nvidia.conf

        # - conf }}}
        # force brightness entry conf {{{
        if laptop-detect ; then

            local message_brightness_force
            message_brightness_force="$( printf "$( eval_gettext "The brightness of your screen works correctly? If you see any problem with the brightness select 'no' the next time. Select YES if you don't know." )" "" )"

            if ((is_mode_auto)) ; then
                ret=0
            else
                dialog --timeout 60 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, TAB to select, Enter to confirm" \
                    --title "Brightness of the Screen" \
                    --yesno "$message_brightness_force" \
                    0 0
                ret="$?"
            fi

            case "$ret" in
                0|255|123) # yes, timeout, cancel
                    true
                    ;;
                1) # no
                    true
                    if [[ -e "/etc/X11/xorg.conf.d/20-nvidia.conf" ]] ; then
                        sed -i 's|^.*append options here.*$|        Option "RegistryDwords" "EnableBrightnessControl=1"\n&|' /etc/X11/xorg.conf.d/20-nvidia.conf
                    fi
                    ;;
            esac
        fi

        # - force brightness entry conf }}}
        # force dpi size to 96 {{{

        local message_dpi_force
        message_dpi_force="$( printf "$( eval_gettext "Select this option if the fonts and sizes on your screen looks wrong. Sometimes the autodetection fails resulting in bad sized elements. This option will set 96 DPI which is a common standard and in any of the cases should work good for most cases. But you should try first without this option set." )" "" )"

        if ((is_mode_auto)) ; then
            ret=0
        else
            dialog --timeout 60 --clear --colors --defaultno --backtitle "Elive Systems: Use Ctrl-L to redraw, TAB to select, Enter to confirm" \
                --title "Force DPI defaults?" \
                --yesno "$message_dpi_force" \
                0 0
            ret="$?"
        fi

        case "$ret" in
            0|255|123) # yes, timeout, cancel
                if [[ -e "/etc/X11/xorg.conf.d/20-nvidia.conf" ]] ; then
                    sed -i 's|^.*append options here.*$|        Option "UseEdidDpi"  "False"\n        Option "DPI"     "96 x 96"\n&|' /etc/X11/xorg.conf.d/20-nvidia.conf
                fi
                true
                ;;
            1) # no
                true
                ;;
        esac
    fi

    # - }}}
    # Optimus inform to user {{{
    # OPTIMUS devices: if we are in laptop, and have more than one graphic card and both are not nvidia ones...
    if [[ "$( lspci | grep -E "\W+(VGA|3D|2D|Display)\W+" | wc -l )" -gt "1" ]] && ! [[ "$( lspci | grep -E "\W+(VGA|3D|2D|Display)\W+" | grep -iE "\W+(VGA|3D|2D|Display)\W+.*\W+nvidia\W+" | wc -l )" -gt "1" ]] && ! ((is_mode_auto)) ; then

        if laptop-detect ; then
            local message_multiple_cards
            message_multiple_cards="$( printf "$( eval_gettext "An extra graphic card has been detected in your system, maybe your laptop uses the special Nvidia Optimus drivers, where the internal card is used for save battery and switches to the Nvidia when needs more performance. You can use in Elive the Nvidia if you install Nvidia or it will use the Intel if you don't, so we are going to use now the Nvidia which is more performant. If you have any problem by running your graphical system we suggest you to enter in the BIOS and disable one of them. Search in Google to know how to configure your BIOS." )" "" )"
        else
            local message_multiple_cards
            message_multiple_cards="$( printf "$( eval_gettext "An extra graphic card has been detected in your system, we will proceed by using Nvidia but if you have any problem running the graphical system we suggest you to remove one of the graphic cards, if the other one is included in the motherboard you should be able to disable from the BIOS. Search in Google to know how to configure your BIOS." )" "" )"
        fi

        dialog --timeout 80 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
            --title "Multiple Graphic Cards found" \
            --msgbox "$message_multiple_cards" \
            0 0
    fi
    # - Optimus inform to user }}}

    # unload modules {{{
    # note: we should have already enough memory because we should have already requested to add a swap in case that we don't have enough space
    if lsmod | grep -qsE "^nouveau\s+" ; then
        if ((is_mode_force)) ; then
            rmmod -f nouveau
        else
            rmmod nouveau
            if lsmod | grep -qsE "^nouveau\s+" ; then
                echo -e "\nE: nouveau module is loaded and we cannot unload it"
                echo -e "You should reboot and add the boot parameter 'modprobe.blacklist=nouveau' to tell the kernel to not load it, or you can use the -f option (but it can make your screen unreadable, which is ok if you are running it from a ssh)"

                if ! ((is_mode_auto)) ; then
                    dialog --timeout 80 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                        --title "Unable to remove module" \
                        --msgbox "Error: nouveau module is loaded and we cannot unload it.\n\nYou should reboot and add the boot parameter 'modprobe.blacklist=nouveau' to tell the kernel to not load it, in Live mode it should be already included in the default boot option, if you are just experimenting you can try to use the -f option (but it can make your screen unreadable, which is ok if you are running it from a ssh, don't expect this to work since its forced)." \
                        0 0

                    if ((is_mode_live)) ; then
                        dialog --timeout 180 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, TAB to select, Enter to confirm" \
                            --title "Reboot now?" \
                            --yesno "$( eval_gettext "Do you want to reboot now?" )" \
                            0 0
                        ret="$?"

                        case "$ret" in
                            0|255|123) # yes, timeout, cancel
                                ( sleep 1 ; reboot & )
                                exit
                                ;;
                            1) # no
                                true
                                ;;
                        esac
                    fi
                fi
            fi
        fi
    fi

    # just in case another one is used
    rmmod nvidia 2>/dev/null
    rmmod nvidia-legacy-${_NVIDIA_VERSION} 2>/dev/null
    rmmod nvidia-tesla-${_NVIDIA_VERSION} 2>/dev/null
    rmmod ${_NVIDIA_MODULE} 2>/dev/null

    # - unload modules }}}
    # apt-get install {{{

    echo -e "\n\n\n\n\nInstalling... Please be patient...\n\n"
    sleep 2

    if ! TERM=screen-256color DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical DEBCONF_NONINTERACTIVE_SEEN=true DEBCONF_NOWARNINGS=true apt-get install -y $_NVIDIA_PACKAGES ; then
        el_aptget_update force

        if ! TERM=screen-256color DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical DEBCONF_NONINTERACTIVE_SEEN=true DEBCONF_NOWARNINGS=true apt-get install -y $_NVIDIA_PACKAGES ; then
            true

            #while read -ru 3 package
            #do
                #if ! TERM=screen-256color DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical DEBCONF_NONINTERACTIVE_SEEN=true DEBCONF_NOWARNINGS=true apt-get install -y $package ; then
                    ## open a shell
                    #if cat /etc/debian_version | grep -qsE "^(7|wheezy)" ; then
                        #echo -e "\n\n\nE: Installing nvidia packages failed, try yourself and suggest a fix to Elive\n" 1>&2
                        #sleep 5
                    #else
                        #if [[ "$_NVIDIA_VERSION" = "current" ]] ; then
                            #echo -e "\nE: Installing nvidia packages failed, please try to install them yourself" 1>&2
                            #echo -e "\nE: Boot Elive with the nox11autologin parameter to not start the graphical system" 1>&2
                            #echo -e "\nE: If you see that Elive has a missing configuration or package for the 'current'" 1>&2
                            #echo -e "\nE: version, please report what is needed to include to have the tool working for all" 1>&2
                            #sleep 5
                        #else
                            #echo -e "\nE: Installing nvidia packages failed, try it yourself and suggest the fix to Elive" 1>&2
                            #sleep 5
                        #fi
                    #fi

                    ## open an interactive shell
                    #if ! ((is_mode_auto)) || ((is_mode_live)) ; then
                        #if el_confirm "$( eval_gettext "The installation failed. You can now open a terminal in order to inspect the status of the packages or try to load the module manually and eventually run the graphical system. We need to know what steps are missing from the drivers installer. So after to experiment you can report any change needed for the tool in our forums so we can fix it and have it working for everybody. Open the terminal now?" )" ; then
                            #find "/lib/modules/$(uname -r)/updates -type f -iname '*'nvidia'*'
                            #el_explain 0 "try to 'modprobe nvidia' or the correct module name, check the status of the packages, run 'dmesg' to check for errors or messages, use 'apse nvidia $_NVIDIA_VERSION' to search for a possible missing package, and finally run the graphical system with 'startx'"
                            #el_explain 0 "Type '__exit__' for continue..."
                            #$SHELL -l

                        #fi
                    #fi
                #fi
            #done 3<<< "$( echo "$_NVIDIA_PACKAGES")"
        fi
    fi

    # verify if the installation succeeded
    if ! find "/lib/modules/$(uname -r)/updates" -type f -name '*'nvidia'*'ko | grep -qs "update.*/nvidia" ; then

        clear ; echo
        NOREPORTS=1 el_error "Driver compilation seems to have failed:\n$(find /lib/modules/ -type f -iname '*'nvidia'*'ko )"
        sleep 4

        local message_warning_install_failed
        message_warning_install_failed="$( printf "$( eval_gettext "The compilation of the driver seems to have failed. We suggest to reboot and try with a different kernel version on which it may compile, since its a common problem with the versions. Or check our forums for more help." )" "" )"

        if ! ((is_mode_auto)) ; then
            dialog --timeout 280 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                --title "WARNING" \
                --msgbox "$message_warning_install_failed" \
                0 0
        fi



        if ! ((is_mode_auto)) || ((is_mode_live)) ; then
            # if we are not in chroot:
            if [ "$(stat -c %d/%i /)" != "$(stat -Lc %d/%i /proc/1/root 2>/dev/null)" ]; then
                echo -e "\n\n"

                if el_confirm "$( eval_gettext "The installation failed. You can now open a terminal in order to inspect the status of the packages or try to load the module manually and eventually run the graphical system. We need to know what steps are missing from the drivers installer. So after to experiment you can report any change needed for the tool in our forums so we can fix it and have it working for everybody. Open the terminal now?" )" ; then
                    find "/lib/modules/$(uname -r)/updates" -type f -iname '*'nvidia'*'
                    el_explain 0 "try to 'modprobe nvidia' or the correct module name, check the status of the packages, run 'dmesg' to check for errors or messages, use 'apse nvidia $_NVIDIA_VERSION' to search for a possible missing package, and finally run the graphical system with 'startx'"
                    el_explain 0 "Type '__exit__' for continue..."
                    $SHELL -l

                fi
            fi
        fi
    fi

    # add the packages to the installed system later too
    if echo "${_CMDLINE}" | LC_ALL=C grep -qsE "boot=live" ; then
        # first remove any possible previous entry for nvidia
        sed -i '/nvidia/d' /tmp/.packages-to-install 2>/dev/null
        sed -i '/nvidia/d' /tmp/.packages-to-hold    2>/dev/null

        for package in $_NVIDIA_PACKAGES
        do
            echo "$package" >> /tmp/.packages-to-install
            # just like the kernel, keep them holded, we don't want surprises, if a system works it works
            echo "$package" >> /tmp/.packages-to-hold
        done
    fi

    # - apt-get install }}}
    # load module {{{
    # reload devices just in case
    if ((is_mode_simulate)) ; then
        if find "/lib/modules/$(uname -r)/updates" -type f -name '*'nvidia'*'ko | grep -qs "update.*/nvidia" ; then
            message_unable_to_load="NVIDIA correctly COMPILED\n\n(in simulation mode)\n\nYou can shutdown the computer since this verification worked\n\n$(find "/lib/modules/$(uname -r)/updates" -type f -iname nvidia'*' | sed -e 's|^.*updates/||g' | tr '\n' ' ' )"
        else
            message_unable_to_load="NVIDIA failed to COMPILE? \n$( find "/lib/modules/$(uname -r)/updates" -type f -name '*'nvidia'*' )"
        fi
            # show the message if we have any
        if [[ -n "$message_unable_to_load" ]] && ! ((is_mode_auto)) ; then
            dialog --timeout 280 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                --title "Simulation mode" \
                --msgbox "$message_unable_to_load" \
                0 0
        fi
    else
        service nvidia-kernel restart 1>/dev/null 2>&1

        load_driver

        if ! lsmod | grep -qs "^nvidia" && ! ((is_mode_simulate)) ; then

            if ! ((is_mode_auto)) ; then
                local message_unable_to_load

                # default message for not working drivers
                if ! lsmod | grep -qs "^nvidia" ; then
                    NOREPORTS=1 el_error "Unable to load NVIDIA module"

                    message_unable_to_load="$( printf "$( eval_gettext "Elive was unable to load the NVIDIA module. Reasons may be the compilation has failed, the device is busy, or the device was not found. We suggest a reboot and select a different kernel version. If the video card is very old you may have better luck with an older version of Elive or the kernel. Check our forums to find more help." )" "" )"
                fi


                if modprobe $_NVIDIA_MODULE 2>&1 | grep -aqsE "(No supported display adapters|No such device)" || dmesg 2>&1 | colors-remove | grep -aqsi "No NVIDIA graphics adapter found" ; then
                    message_unable_to_load="$( printf "$( eval_gettext "Error: Your model of graphic card doesn't looks like to be compatible with this version of the drivers, try to use a different version, or try to use the Free-drivers instead." )" "" )"

                fi

                # module simply was not compiled
                if ! find "/lib/modules/$(uname -r)/updates" -type f -iname '*'nvidia'*' | grep -qs "nvidia" ; then
                    message_unable_to_load="$( printf "$( eval_gettext "Error: The driver has not compiled successfully, this normally happens when you have a too much recent kernel, or too old, try to reboot and select to use a different kernel version from the boot selector list. We suggest to use the Free-drivers if they works for you." )" "" )"
                fi


                # show the message if we have any
                if [[ -n "$message_unable_to_load" ]] && ! ((is_mode_auto)) ; then
                    dialog --timeout 280 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
                        --title "Unable to load module" \
                        --msgbox "$message_unable_to_load" \
                        0 0
                fi
            fi


            # cleanups
            if ! ((is_mode_force)) || ((is_mode_live)) ; then
                uninstall_driver
                try_again
                #NOREPORTS=1 el_warning "Switched to the default drivers option"
                #sleep 4
                #exit 0
            fi
        fi
    fi



    # reload devices just in case
    service nvidia-kernel restart 1>/dev/null 2>&1

    # regenerate initramfs if we are not in live (and persistence)
    if ! grep -qs "boot=live" /proc/cmdline && ! grep -qs "persistence" /proc/cmdline ; then
        LC_ALL="$EL_LC_EN" update-initramfs -k all -u -t 2>&1 | grep -vE '(^mkdir:|mdadm:|Generating /|live-boot)'
        rm -f /boot/*old-dkms 2>/dev/null
    fi

    el_info "Install complete"

    if echo "${_CMDLINE}" | LC_ALL=C grep -qsE "boot=live" && ! ((is_mode_auto)) ; then
        local message_suggestion
        message_suggestion="$( printf "$( eval_gettext "Suggestion: Sometimes the screen looks distorted after having installed the drivers in live mode. If this happens, try to switch to the console mode and then back to the graphical system. You should not have this issue when Elive is installed on your computer." )" "" )"
        dialog --timeout 280 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
            --title "Suggestion for Live Mode:" \
            --msgbox "${message_suggestion} \n\nExample to switch to Console and then to Graphical system:\nCtrl + Alt + F1, then, Ctrl + Alt + F7 (or F8)" \
            0 0
    fi

    # - load module }}}
}

#===  FUNCTION  ================================================================
#          NAME:  try_again
#   DESCRIPTION:  ask which next step to do if failed
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
try_again(){
    # pre {{{
    if ((is_mode_auto)) ; then
        return
    fi

    el_debug

    local message_option_1
    message_option_1="$( printf "$( eval_gettext "Try to install a different version" )" "" )"

    local message_option_2
    message_option_2="$( printf "$( eval_gettext "Use the open drivers:" )" "" ) nouveau"

    local message_option_3
    message_option_3="$( printf "$( eval_gettext "Exit from this tool and continue (unknown state)" )" "" )"

    local message_option_4
    message_option_4="$( printf "$( eval_gettext "Reboot your computer to select another kernel or options" )" "" )"

    # }}}

    { echo "'other' '$message_option_1'" ; echo "'open' '$message_option_2'" ; echo "'exit' '$message_option_3'" ; echo "'reboot' '$message_option_4'" ; } \
        | xargs dialog --timeout 380 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" --menu "Select an option" 0 0 0  2>"/tmp/.$(basename $0)-ret"


    # user canceled? uninstall and exit
    if echo "$?" | grep -qsE "^(1|123|255|125)$" ; then
        ret="exit"
    else
        # get result
        ret="$( cat "/tmp/.$(basename $0)-ret" | head -1 )"
    fi
    rm -f "/tmp/.$(basename $0)-ret"

    # remove extra leading blank chars
    read -r ret <<< "$ret"

    case "$ret" in
        open)
            uninstall_driver
            exit
            ;;
        other)
            export is_mode_already_run=1
            $0 $args
            exit
            ;;
        reboot)
            ( sleep 1 ; reboot & )
            exit
            ;;
        exit)
            exit
            ;;
    esac


}
#===  FUNCTION  ================================================================
#          NAME:  uninstall_driver
#   DESCRIPTION:  uninstalls any possible nvidia drivers and make the system work back on nouveau
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
uninstall_driver(){
    # pre {{{
    local line
    el_debug

    unset _NVIDIA_PACKAGES

    # }}}

    # unload module {{{
    # unload module first
    if lsmod | grep -qs "^nvidia" ; then
        rmmod nvidia 2>/dev/null
        rmmod nvidia-legacy-${_NVIDIA_VERSION} 2>/dev/null
        rmmod nvidia-tesla-${_NVIDIA_VERSION} 2>/dev/null
        rmmod ${_NVIDIA_MODULE} 2>/dev/null

        if lsmod | grep -qs "^nvidia" ; then
            if ((is_mode_force)) ; then
                rmmod -f nvidia 2>/dev/null
                rmmod -f nvidia-legacy-${_NVIDIA_VERSION} 2>/dev/null
                rmmod -f nvidia-tesla-${_NVIDIA_VERSION} 2>/dev/null
                rmmod -f ${_NVIDIA_MODULE} 2>/dev/null

            else
                el_info "E: unable to unload the nvidia module, if you are running the graphical system you should exit from it first, and if is not the case and you want to force to proceed use the -f option"
                exit 1
            fi
        fi
    fi


    # - unload module }}}
    # confs {{{
    # remove any possible xorg conf (before uninstall packages)
    rm -f /etc/X11/xorg.conf.d/20-nvidia.conf 2>/dev/null || true


    # - confs }}}
    # packages {{{
    # remove all nvidia packages
    while read -ru 3 line
    do
        [[ -z "$line" ]] && continue

        # if matches
        if echo "$line" | grep -qsE "(nvidia|lib.*nvidia|glx.*nvidia|xserver.*nvidia)" ; then
            # which doesn't maches
            if ! echo "$line" | grep -qsE "(nvidia-detect|glx-diversions|nvidia-installer-cleanup)" ; then
                el_debug "Adding $line to the list of uninstall packages"
                _NVIDIA_PACKAGES="$_NVIDIA_PACKAGES $line"
            fi
        fi

    done 3<<< "$( COLUMNS=1000 dpkg -l | grep nvidia | awk '{print $2}' )"

    # remove extra leading blank chars
    read -r _NVIDIA_PACKAGES <<< "$_NVIDIA_PACKAGES"

    if [[ -n "$_NVIDIA_PACKAGES" ]] ; then
        log_progress_msg "Removing Nvidia proprietary drivers, this machine doesn't has it"

        #if ((is_mode_auto)) ; then
            el_debug "apt-get remove --purge -y $_NVIDIA_PACKAGES"
            TERM=screen-256color DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical DEBCONF_NONINTERACTIVE_SEEN=true DEBCONF_NOWARNINGS=true apt-get remove --purge -y $_NVIDIA_PACKAGES
            # uninstall also extra packages that we may have installed, otherwise it can fail installing new ones:
            TERM=screen-256color DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical DEBCONF_NONINTERACTIVE_SEEN=true DEBCONF_NOWARNINGS=true apt-get autoremove -y --purge
        #else
            #el_debug "apt-get remove --purge $_NVIDIA_PACKAGES"
            #TERM=screen-256color DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical DEBCONF_NONINTERACTIVE_SEEN=true DEBCONF_NOWARNINGS=true apt-get remove --purge $_NVIDIA_PACKAGES
        #fi
    else
        el_info "Nvidia packages already removed"
    fi


    # just in case, reinstall the nouveau driver
    if ! COLUMNS=1000 dpkg -l | awk '{print $2}' | grep -qs "^ii.*xserver-xorg-video-nouveau" ; then
        TERM=screen-256color DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical DEBCONF_NONINTERACTIVE_SEEN=true DEBCONF_NOWARNINGS=true apt-get install -y xserver-xorg-video-nouveau
    fi

    # - packages }}}
    # end {{{
    # show final result
    if COLUMNS=1000 dpkg -l | awk '{print $2}' | grep nvidia | grep -vE "(nvidia-detect|glx-diversions|nvidia-installer-cleanup)" | grep -qs nvidia ; then
        echo -e ""
        el_error "We still having some nvidia packages not uninstalled: $( COLUMNS=1000 dpkg -l | grep nvidia | awk '{print $2}' | grep nvidia  1>&2 )"
    else
        el_debug "Driver NVIDIA uninstalled successfully"
    fi


    # deprecated, not needed because next menu asks the same question
    # reboot needed for nouveau
    #if echo "${_CMDLINE}" | LC_ALL=C grep -qsE "blacklist=nouveau" ; then
        #local message_title
        #message_title="$( printf "$( eval_gettext "Nvidia Graphic Card" )" "" )"
        #local message_message_reboot_open
        #message_message_reboot_open="$( printf "$( eval_gettext "To use the open driver you must reboot without the option of the proprietary drivers because nouveau is disabled. Reboot now to select the other option? Or you can continue to select a different version." )" )"

        #dialog --timeout 180 --clear --colors --backtitle "Elive Systems: Use Ctrl-L to redraw, Enter to confirm" \
            #--title "$message_title" \
            #--yesno "$message_message_reboot_open" \
            #0 0
            #ret="$?"

            #case "$ret" in
                #0|255|123) # yes, timeout, cancel
                    #( sleep 1 ; reboot & )
                    #exit
                    #;;
                #1) # no
                    #true
                    #;;
            #esac
    #fi

    # - end }}}
}


main(){
    # pre {{{
    #if [[ -z "${1}" ]] ; then
    #usage
    #exit 1
    #fi

    . /lib/lsb/init-functions

    _CMDLINE="$(cat /proc/cmdline)"

    el_dependencies_check "dialog|apt-cache"

    if cat /etc/debian_version | grep -qsE "^(7|wheezy)" ; then
        is_wheezy=1
        is_xorg_template_wanted=1
    fi

    args="$@"

    # }}}

    # Usage
    while getopts ":acdifm:lquvht" opt; do
        case $opt in
            a)
                is_mode_auto=1
                ;;
            c)
                is_mode_check=1
                ;;
            d)
                is_mode_detect=1
                ;;
            f)
                is_mode_force=1
                ;;
            #i)
                #is_mode_interactive=1
                #unset is_mode_auto
                #;;
            v)
                export EL_DEBUG=2

                ;;
            m)
                driver_version="$OPTARG"
                is_mode_version_set=1
                ;;
            l)
                is_mode_live=1
                ;;
            q)
                export EL_DEBUG=0

                ;;
            u)
                is_mode_uninstall=1
                ;;
            t)
                is_mode_test_installed=1
                ;;
            h)
                usage
                exit
                ;;
            \?)
                el_error "Invalid option: -$OPTARG"
                usage
                exit 1
                ;;
            :)
                el_error "Option -$OPTARG requires an argument."
                usage
                exit 1
                ;;
        esac
    done

    if LC_ALL=C grep -qs "simulate=nvidia" /proc/cmdline ; then
        is_mode_force=1
        is_mode_simulate=1
    fi


    check_hardware

    if ((is_mode_uninstall)) ; then
        uninstall_driver
        # nothing more to do so exit
        exit
    fi

    if ((is_mode_version_set)) ; then
        # uninstall possible drivers first
        uninstall_driver
    fi

    # just check if installed and working
    if ((is_mode_test_installed)) ; then
        if check_driver ; then
            exit 0
        else
            exit 1
        fi
    fi

    # do not ask to install driver if is already and correctly installed (like in persistence mode)
    if check_driver ; then
        if ! ((is_mode_force)) ; then
            el_debug "driver already installed, use -f to force installation"
            exit
        fi
    fi

    interactive_ask_privative
    detect_driver_version
    interactive_ask_driver_version
    install_driver


}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
