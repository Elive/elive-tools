#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
REPORTS="1"
#el_make_environment
#. gettext.sh
#TEXTDOMAIN=""
#export TEXTDOMAIN


update_scaling(){
    # if was not configured yet
    if ! grep -qs "^Xft.dpi: [[:digit:]]" "$HOME/.Xdefaults" ; then
        # Set scaling factor into Xdefaults
        sed -i -e '/Xft.dpi:/d' "$HOME/.Xdefaults"
        echo "Xft.dpi: ${dpi%x*}" >> "$HOME/.Xdefaults"
        is_restart_needed=1
    fi

    # cursor size, should be not needed because is already dynamic by dpi
    #sed -i -e '/Xcursor.size:/d' "$HOME/.Xdefaults"
    #echo "Xcursor.size: 48" >> "$HOME/.Xdefaults"

    # DEFAULT cursor theme forced:
    if ! grep -qs "^Xcursor.theme: Breeze_Snow" "$HOME/.Xdefaults" ; then
        if [[ -d "/usr/share/icons/Breeze_Snow/cursors" ]] ; then
            sed -i -e '/Xcursor.theme:/d' "$HOME/.Xdefaults"
            echo "Xcursor.theme: Breeze_Snow" >> "$HOME/.Xdefaults"
            is_restart_needed=1
        fi
    fi

    # if we don't have any cursor theme set:
    if ! grep -qs "^Xcursor.theme: " "$HOME/.Xdefaults" ; then
        if [[ -d "/usr/share/icons/whiteglass/cursors" ]] ; then
            sed -i -e '/Xcursor.theme:/d' "$HOME/.Xdefaults"
            echo "Xcursor.theme: whiteglass" >> "$HOME/.Xdefaults"
            is_restart_needed=1
        fi
    fi

    # set default scale factor value for specific apps and confs
    scale_factor="$( echo "scale=4 ; ${dpi%x*} / 96" | LC_ALL=C bc -l )"
    if ! echo "$scale_factor" | grep -qs "[[:digit:]]" ; then
        unset scale_factor
    fi

    if [[ -n "$scale_factor" ]] ; then
        # set gsettings (saved in ~/.config/dconf/user )
        # update: not works with dots (?)
        #gsettings set org.gnome.desktop.interface scaling-factor "${scale_factor}"

        # set elementary and all E to use the same scaling:
        elementary_config -q -s "${scale_factor}"
        # refresh:
        elementary_config -q

        # set urxvt to a specific size
        # FIXME: this is overwritten after aparently
        rxvt_font_size="$( echo "9 * ${scale_factor}" | bc -l | sed -e 's|\..*$||g' )"
        sed -i -e "s|pixelsize=.*$|pixelsize=${rxvt_font_size}|g" "$HOME/.Xdefaults"

        # cairo-dock size, 34 value is the default size we used to have
        cairo_dock_icon_size="$( echo "34 * ${scale_factor}" | bc -l | sed -e 's|\..*$||g' )"
        sed -i -e "s|^launcher size=.*$|launcher size=${cairo_dock_icon_size};${cairo_dock_icon_size};|g" "$HOME/.config/cairo-dock/current_theme/cairo-dock.conf"
        cairo_dock_zoom_space="$( echo "175 * ${scale_factor}" | bc -l | sed -e 's|\..*$||g' )"
        sed -i -e "s|^sinusoid width=.*$|sinusoid width=${cairo_dock_zoom_space}|g" "$HOME/.config/cairo-dock/current_theme/cairo-dock.conf"

        # thunar sizes:
        thunar_separator_position="$( echo "180 * ${scale_factor}" | bc -l | sed -e 's|\..*$||g' )"
        thunar_window_width="$( echo "640 * ${scale_factor}" | bc -l | sed -e 's|\..*$||g' )"
        thunar_window_height="$( echo "490 * ${scale_factor}" | bc -l | sed -e 's|\..*$||g' )"
        sed -i -e "/last-separator-position/s/value=\".*\"/value=\"${thunar_separator_position}\"/g" "$HOME/.config/xfce4/xfconf/xfce-perchannel-xml/thunar.xml"
        sed -i -e "/last-window-width/s/value=\".*\"/value=\"${thunar_window_width}\"/g" "$HOME/.config/xfce4/xfconf/xfce-perchannel-xml/thunar.xml"
        sed -i -e "/last-window-height/s/value=\".*\"/value=\"${thunar_window_height}\"/g" "$HOME/.config/xfce4/xfconf/xfce-perchannel-xml/thunar.xml"
    fi


    # load settings
    xrdb -merge "$HOME/.Xdefaults"

    # reload desktop
    if ((is_restart_needed)) ; then
        if [[ -n "$EROOT" ]] ; then
            eesh save_config
            eesh restart
        fi
    fi

    # if we are debugging give it a little pause to see what is going on
    #if grep -qs "debug" /proc/cmdline ; then
        #echo -e "debug: sleep 2" 1>&2
    #fi
}

main(){
    # args {{{
    if [[ -n "$1" ]] ; then
        for arg in "$@"
        do
            case "$arg" in
                -a|--auto)
                    is_auto=1
                    shift
                    ;;
                -q|--quiet)
                    is_guide_mode=0
                    shift
                    ;;
            esac
        done
    fi

    # }}}

    if ((is_auto)) ; then
        # fetch machine dpi
        dpi="$( el_dpi_get "lowered" )"
        # premature exit
        if [[ "${dpi}" != *"x"* ]] ; then
            el_error "unable to get machine DPI: $( el_dpi_get 'lowered' 2>&1)"
            return 0
        fi
    else
        dpi_lowered="$( el_dpi_get "lowered" )"
        # get confs
        el_config_get
        # defaults
        if [[ -z "$conf_selected_dpi" ]] ; then
            conf_selected_dpi="$dpi_lowered"
        fi

        result="$(
        yad --width=600 --height=200 --center \
            --image-on-top --image=input-touchpad \
            --title="$( eval_gettext "Desktop Size" )" \
            --text="$( eval_gettext "Select the DPI of your screen. This value will resize your desktop as on its percentage.\n\nPoint 'A' is the default value of most common screens, select it to optimize your pixels and dimension. Point 'B' is the suggested value for your screen. Point 'C' is the real DPI value of your screen, we suggest a lower value than this one to be able to visualize a more amount of elements in your desktop." )" \
            --scale --value="$conf_selected_dpi" --min-value=50 --max-value=400 --step=1 --inc-buttons --mark="A:96" --mark="C:$( el_dpi_get )"  --mark="B:${dpi_lowered}" \
            $NULL || echo cancel )"
            #--scale --value="$conf_selected_dpi" --min-value=50 --max-value=400 --step=1 --inc-buttons --vertical --mark="Default:96" --mark="Your Screen:$( el_dpi_get )"  --mark="Suggested:${dpi_lowered}" \

        if [[ -n "$result" ]] && [[ "$result" != "cancel" ]] ; then
            #dpi="$( echo "${result}" | awk -v FS="|" '{print $1}' )"
            dpi="${result}x${result}"

            # save confs
            conf_selected_dpi="$result"
            el_config_save "conf_selected_dpi"
        fi
    fi

    # update sizes
    if [[ "${dpi}" = *"x"* ]] ; then
        update_scaling
    fi
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
