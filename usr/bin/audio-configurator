#!/bin/bash
source /usr/lib/elive-tools/functions

. gettext.sh
export TEXTDOMAIN="elive-tools"

select_card_multiple(){
    local _list_cards
    # list cards, per priority
    _list_cards="$( cat /proc/asound/cards | psort -- -p "EWX" -p "PCH" -p "USB" -p "DAC" -p "Intel" -p "SB16" -p "CS4236"  | while read -r line ; do [[ "$line" != *"]:"* ]] && continue ;  echo "$line" | sed -e 's|\]:.*$||g' -e 's|^.*\[||g' ; echo "${line##*- }"   ; done )"

    selection="$( echo "$_list_cards" | $guitool --list --width=400 --height=240 --column="Identifier" --column="$( eval_gettext "Description" )" --text="$( eval_gettext "Select the desired audio card that you want to use as default" )" || echo cancel )"
    # remove extra leading blank chars
    read -r selection <<< "$selection"

    if [[ "${selection}" = "cancel" ]] ; then
        return 1
    fi
}

main(){
    # pre {{{
    local list_cards number_cards selection guitool line is_auto_mode is_quiet_mode

    if ! el_dependencies_check zenity ; then
        if ! el_dependencies_install zenity ; then
            exit 1
        fi
    fi

    # }}}

    # NOTE: this is a temporal tool, a lot of improvements will be made about this, so don't try to improve this one

    guitool=zenity

    list_cards="$(cat /proc/asound/cards | grep "^.*[[:digit:]].*\[.*\]:" | sed -e 's|\]:.*$||g' -e 's|^.*\[||g')"

    # if our first argument is the card name to use, change the list of cards to use this one
    if [[ "$1" = "--auto" ]] ; then
        is_auto_mode=1
        shift
    fi
    if [[ "$1" = "--quiet" ]] ; then
        is_quiet_mode=1
        shift
    fi
    # if first argument is the name of the card that we want to use itself
    if [[ -n "$1" ]] && [[ "$1" != -* ]] ; then
        if echo "$list_cards" | grep -qs -- "$1" ; then
            list_cards="$1"
        fi
    fi

    if [[ -z "$list_cards" ]] ; then
        rm -f "${HOME}/.asoundrc"

        # reconfigure alsa.conf default file to correctly work, only if is not a number value
        if [[ "$UID" = 0 ]] ; then
            sed -i "s|^defaults.ctl.card.*$|defaults.ctl.card 0|g" /usr/share/alsa/alsa.conf
            sed -i "s|^defaults.pcm.card.*$|defaults.pcm.card 0|g" /usr/share/alsa/alsa.conf
        fi

        $guitool --warning --text="$( eval_gettext "No audio cards were detected in your system, we suggest you to try with a newer kernel version to see if can have newer drivers for it." )"

        exit
    fi

    number_cards="$( echo -e "$list_cards" | wc -l )"

    if [[ "$number_cards" -lt "2" ]] ; then
        selection="$list_cards"
        # remove extra leading blank chars
        read -r selection <<< "$selection"

        # reconfigure alsa.conf default file to correctly work
        #if [[ "$UID" = 0 ]] ; then
            # Important: NEVER set these values to a digit, seems like glibc segfaults because of this
            #sed -i 's|^defaults.ctl.card.*$|defaults.ctl.card 0|g' /usr/share/alsa/alsa.conf
            #sed -i 's|^defaults.pcm.card.*$|defaults.pcm.card 0|g' /usr/share/alsa/alsa.conf
        #fi
    else
        if ! ((is_auto_mode)) ; then
            if select_card_multiple ; then
                is_multiple_cards=1
            else
                if [[ -s "$HOME/.asoundrc" ]] ; then
                    exit 1
                else
                    unset is_multiple_cards
                    is_auto_mode=1
                fi
            fi
        fi

        if ((is_auto_mode)) ; then
            el_dependencies_check "psort"
            selection="$(echo "$list_cards" | tr ' ' '\n' | psort -- -p "^ThinkPadEC" -p "^NVidia" -p "midi" -p "MIDI" -p "^VX-5000" -p "^VX5000" -p "^Webcam" -p "^Dummy" -p "^HDMI" -p "system" | tac | head -1 )"
            # remove extra leading blank chars
            read -r selection <<< "$selection"
        fi

        # reconfigure alsa.conf default file to correctly work, only if is not a number value
        if [[ "$UID" = 0 ]] && ! echo "$selection" | grep -qs "^[[:digit:]]*$" ; then
            sed -i "s|^defaults.ctl.card.*$|defaults.ctl.card ${selection}|g" /usr/share/alsa/alsa.conf
            sed -i "s|^defaults.pcm.card.*$|defaults.pcm.card ${selection}|g" /usr/share/alsa/alsa.conf
        fi
    fi

    # cleanup, new conf
    rm -f "${HOME}/.asoundrc"

    echo "defaults.ctl.card ${selection}" >> "${HOME}/.asoundrc"
    echo "defaults.pcm.card ${selection}" >> "${HOME}/.asoundrc"


    # set microphone default
    if ! ((is_auto_mode)) ; then
        if ((is_multiple_cards)) ; then
            if ! $guitool --question --text="$( eval_gettext "Use the same audio card for your microphone?" )" ; then
                select_card_multiple

                cat >> "${HOME}/.asoundrc" << EOF

pcm.mic
{
    type hw
    card ${selection}
}

pcm.!default
{
    type asym
    playback.pcm
    {
        type plug
        slave.pcm "dmix"
    }
    capture.pcm
    {
        type plug
        slave.pcm "mic"
    }
}
EOF

            #else

                #local translated_message
                #translated_message="$( printf "$( eval_gettext "Using default card %s for your microphone" )" "$selection" )"

                #$guitool --info --text="$translated_message"
            fi

            # TODO: include a way to detect if mic is working, etc... maybe more easy to implement it on the C future mixer code
            #$guitool --info --text="$( eval_gettext "If you experience noise in your speakers, or your microphone doesn't capture anything, just play with the settings in your audio card mixer. Sometimes you need to enable the capture mode or set it to the microphone for make it working, and sometimes the microphone is repeated to your audio card giving you echo or noise, you can solve those problems trying different settings" )"

        fi

        if ! ((is_quiet_mode)) ; then
            $guitool --info --text="$( eval_gettext "Your audio card has been configured. To raise and decrease the volume use your keyboard hotkeys, if they don't works you can configure them in your Enlightenment hotkey preferences." )"
        fi

    fi
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

