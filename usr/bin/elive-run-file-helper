#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-tools"
export TEXTDOMAIN

not_supported(){
    local mime file
    mime="$1"
    file="$2"

    el_warning "mimetype '$mime' not implemented for '$(basename "$file")' "
}

run_edje(){
    local file
    file="$1"

    while read -ru 3 line
    do
        [[ "$line" = *"'e/theme/about'"* ]] && is_e_theme=1
        [[ "$line" = *"'e/modules/ibox/"* ]] && is_e_theme=1
        [[ "$line" = *"'e/desktop/background'"* ]] && is_e_wallpaper=1
        [[ "$line" = "0 groups in file"* ]] && is_e_invalid=1
    done 3<<< "$( LC_ALL="$EL_LC_EN" edje_player -G "$file")"

    # uncompatible edje file
    if ((is_e_invalid)) ; then
        zenity --error --text="$( eval_gettext "This Edje file doesn't looks to be compatible or having a known usage. Make sure that you are using a version compatible for Enlightenment 17" )"
        return
    fi

    # only wallpaper
    if ((is_e_wallpaper)) && ! ((is_e_theme)) ; then
        # show a preview
        $precmd edje_player "$file"

        if zenity --question --text="$( eval_gettext "Do you want to install this wallpaper?" )" ; then
            $precmd enlightenment_remote -desktop-bg-add-set "$file"
        fi

        return
    fi

    # full E theme
    if ((is_e_theme)) ; then
        if zenity --question --text="$( eval_gettext "Do you want to install this theme?" )" ; then
            $precmd cp -f "$file" "$HOME/.e/e17/themes/"
            # update: seems like it doesn't works?
            #enlightenment_remote -theme-set
            zenity --info --text="$( eval_gettext "You can now activate the new theme from the preferences menu. Note that they may be not always fully compatible, we suggest to use the Elive theme for compatibility, stability and features." )"

        fi

        return
    fi

    # still here? implement it
    zenity --warning --text="$( eval_gettext "Seems like you are trying to run an edje file but we don't know how to use it. report this to the Elive BTS" )"
}

run_script(){
    local file mode
    mode="$1"
    file="$2"

    local message_done
    message_done="$( printf "$( eval_gettext "All operations done, you can close the terminal" )" "" )"


    # nvidia installer?
    if echo "$file" | grep -qsi "NVIDIA.*\.run$" ; then
        if zenity --question --text="$( eval_gettext "Elive already includes a much better and cleaner installer of the nvidia drivers, do you want to run it instead of the official nvidia installer?" )" ; then
            if [[ -x "$( which urxvt )" ]] ; then
                $precmd gksu "urxvt -e bash -c '/usr/sbin/nvidia-privative-drivers-install'"
            else
                el_error "no urxvt found"
            fi

            #all done
            exit
        fi
    fi

    # warn user
    if ! zenity --question --text="$( eval_gettext "You are going to execute a script, since a script can run arbitrary code in your machine, you should always verify that they comes from a confident author or source. Continue?" )" ; then
        return
    fi

    #el_config_get "is_user_warned_root"
    #if ! ((is_user_warned_root)) ; then
        #zenity --info --text="$( eval_gettext "Important: sometimes these scripts needs administrator privileges, if is the case you need to right-click in the filemanager to enter in admin mode, then running the file from this new session." )"
        #is_user_warned_root=1
        #el_config_save "conf_is_user_warned_root"
    #fi

    if ! [[ "$UID" = 0 ]] ; then
        if zenity --question --text="$( eval_gettext "Do you need administrator privileges to run this file? This is commonly needed if you are trying to install software or a driver in your system. We suggest to first try to run the file without the administrator privileges." )" ; then
            is_root_wanted=1
        fi
    fi

    if ! test -x "$file" ; then
        if zenity --question --text="$( eval_gettext "Add executable permissions to the file?" )" ; then
            $precmd chmod +x "$file"
        else
            zenity --error --text="$( eval_gettext "If the file has no executable permissions we cannot run it. Exiting..." )"
            return 1
        fi
    fi

    if [[ "$UID" = 0 ]] ; then
        if [[ -x "$( which urxvt )" ]] ; then
            $precmd urxvt -hold -e bash -c "$file ; apt-get -f install ; echo ; echo ; echo ${message_done}"
        else
            if readlink -f /etc/altenatives/x-terminal-emulator | grep -qs "terminology" ; then
                $precmd terminology -hold -e "${file} ; apt-get -f install ; echo ; echo ; echo ${message_done}"
            fi
        fi
    else
        if [[ -s "/etc/sudoers.d/sudo_nopasswd_packagers_$USER" ]] ; then
            if [[ -x "$( which urxvt )" ]] ; then
                if ((is_root_wanted)) ; then
                    $precmd urxvt -hold -e bash -c "gksu $file ; sudo apt-get -f install ; echo ; echo ; echo ${message_done}"
                else
                    $precmd urxvt -hold -e bash -c "$file ; sudo apt-get -f install ; echo ; echo ; echo ${message_done}"
                fi
            else
                if readlink -f /etc/altenatives/x-terminal-emulator | grep -qs "terminology" ; then
                    if ((is_root_wanted)) ; then
                        $precmd terminology -hold -e "gksu ${file} ; sudo apt-get -f install ; echo ; echo ; echo ${message_done}"
                    else
                        $precmd terminology -hold -e "${file} ; sudo apt-get -f install ; echo ; echo ; echo ${message_done}"
                    fi
                fi
            fi
        else
            if [[ -x "$( which urxvt )" ]] ; then
                if ((is_root_wanted)) ; then
                    $precmd urxvt -hold -e bash -c "gksu $file ; echo ; echo ; echo ${message_done}"
                else
                    $precmd urxvt -hold -e bash -c "$file ; echo ; echo ; echo ${message_done}"
                fi
            else
                if readlink -f /etc/altenatives/x-terminal-emulator | grep -qs "terminology" ; then
                    if ((is_root_wanted)) ; then
                        $precmd terminology -hold -e "gksu ${file} ; echo ; echo ; echo ${message_done}"
                    else
                        $precmd terminology -hold -e "${file} ; echo ; echo ; echo ${message_done}"
                    fi
                fi
            fi
        fi
    fi
}


main(){
    # pre {{{
    local file

    # include simulate mode
    if [[ "$1" = "-s" ]] || [[ "$1" = "--simulate" ]] ; then
        is_simulate=1
        precmd="echo"
        shift
    fi

    # }}}

    for file in "$@"
    do
        file="$( LC_ALL="$EL_LC_EN" readlink -f "$file" )"
        dirname="$( dirname "$file" )"

        mime="$( LC_ALL="$EL_LC_EN" file -bi "$file" | sed -e 's|; charset.*$||g' )"

        # some fixes
        case "$mime" in
            "text/plain"|"application/octet-stream")
                unset mime

                # edje files are octets
                if echo "$file" | grep -qsi "\.edj" ; then
                    if edje_player -G "$file" | head -5 | grep -qs "group.*in file" ; then
                        mime="edj/edje"
                    fi
                fi

                # script files
                if [[ -z "$mime" ]] ; then
                    if head -1 "$file" | grep -qsE "^#!.*(bin/env |bin/)(bash|sh|dash|zsh)$" ; then
                        mime="text/x-shellscript"
                    fi
                fi
                if [[ -z "$mime" ]] ; then
                    if echo "$file" | grep -qsi ".*\.run" ; then
                        mime="text/x-shellscript"
                    fi
                fi
                if [[ -z "$mime" ]] ; then
                    if LC_ALL="$EL_LC_EN" file "$file" | grep -qsi "script.*text.*executable" ; then
                        mime="text/x-shellscript"
                    fi
                fi

                ;;
        esac

        # do not run empty mimes
        if ! [[ -n "$mime" ]] ; then
            zenity --info --text="$( eval_gettext "This file doesn't have a mimetype assigned, we cannot run or open something that we don't know how it should be run. This file probably belongs to other purposes." )"
            exit
        fi


        # parse and run
        case "$mime" in
            "text/x-shellscript"|"application/x-executable")
                run_script "user" "$file"
                ;;
            "text/x-ruby")
                run_script "user" "$file"
                ;;
            "text/x-perl")
                run_script "user" "$file"
                ;;
            "text/x-awk")
                #not_supported "$mime"
                run_script "user" "$file"
                ;;
            "text/x-python")
                run_script "user" "$file"
                ;;
            "text/x-makefile")
                cd "$dirname"

                if [[ -x "$( which urxvt )" ]] ; then
                    $precmd urxvt -hold -e bash -c "make && echo -e \"\n\nCOMPILED\n\""
                fi
                ;;
            "edj/edje"|"application/x-extension-edj"|"application/edje")
                run_edje "$file"
                ;;
            *)
                # already supported by default list (they just works using thunar), tested with starting by application/
                if ! echo "$mime" | grep -qsE "/(debian.*package)$" ; then
                    not_supported "$mime" "$file"
                fi
                # run a default launcher!
                if [[ -x "/usr/bin/thunar" ]] ; then
                    $precmd thunar "$file"
                fi
                ;;
        esac
    done
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
