#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
#el_make_environment
. gettext.sh
TEXTDOMAIN="elive-tools"
export TEXTDOMAIN


#export NOREPORTS=1

#===  FUNCTION  ================================================================
#          NAME:  get_meter
#   DESCRIPTION:  prints the meter that we should use for modify volumes
#    PARAMETERS:  -
#       RETURNS:  meter name in a string value
#===============================================================================
get_meter(){
    # pre {{{
    el_debug
    el_security_function_loop || return

    el_check_variables "list,conf"

    # }}}

    if [[ -z "$meter" ]] ; then
        if [[ "$list" = *"'PCM'"* ]] ; then
            meter=PCM

            # verify that this meter really works or skip to the next one
            if ! set_volume "2%-" 2>/dev/null ; then
                unset meter
            fi
            if ! set_volume "2%+" 2>/dev/null ; then
                unset meter
            fi
        fi
    fi

    ##################
    if [[ -z "$meter" ]] ; then
        if [[ "$list" = *"'Front'"* ]] ; then
            meter=Front

            # verify that this meter really works or skip to the next one
            if ! set_volume "2%-" 2>/dev/null ; then
                unset meter
            fi
            if ! set_volume "2%+" 2>/dev/null ; then
                unset meter
            fi
        fi
    fi

    ##################
    if [[ -z "$meter" ]] ; then
        if [[ "$list" = *"'Wave'"* ]] ; then
            meter=Wave

            # verify that this meter really works or skip to the next one
            if ! set_volume "2%-" 2>/dev/null ; then
                unset meter
            fi
            if ! set_volume "2%+" 2>/dev/null ; then
                unset meter
            fi
        fi
    fi

    ##################
    if [[ -z "$meter" ]] ; then
        if [[ "$list" = *"'Center'"* ]] ; then
            meter=Center

            # verify that this meter really works or skip to the next one
            if ! set_volume "2%-" 2>/dev/null ; then
                unset meter
            fi
            if ! set_volume "2%+" 2>/dev/null ; then
                unset meter
            fi
        fi
    fi

    # this doesn't exist on this time but may make things working in the future
    if [[ -z "$meter" ]] ; then
        if [[ "$list" = *"'PulseAudio'"* ]] ; then
            meter=PulseAudio

            # verify that this meter really works or skip to the next one
            if ! set_volume "2%-" 2>/dev/null ; then
                unset meter
            fi
            if ! set_volume "2%+" 2>/dev/null ; then
                unset meter
            fi
        fi
    fi
    ##################
    # Master should be everytime on Max volume or you got distortions
    if [[ -z "$meter" ]] ; then
        if [[ "$list" = *"'Master'"* ]] ; then
            meter=Master

            # verify that this meter really works or skip to the next one
            if ! set_volume "2%-" 2>/dev/null ; then
                unset meter
            fi
            if ! set_volume "2%+" 2>/dev/null ; then
                unset meter
            fi
        fi
    fi

    ##################
    # Special Cards, like ice1712/Terratec_ewx24/96
    if [[ -z "$meter" ]] ; then
        if [[ "$list" = *"'DAC'"* ]] ; then
            meter=DAC

            # verify that this meter really works or skip to the next one
            if ! set_volume "2%-" 2>/dev/null ; then
                unset meter
            fi
            if ! set_volume "2%+" 2>/dev/null ; then
                unset meter
            fi
        fi
    fi

    # checks
    if [[ -z "$meter" ]] ; then

        if ((is_already_configured)) ; then
            el_error "No meters found to configure volumes, is your audio card working?:\n$(amixer scontrols)\n|$(cat /proc/asound/cards)\n|$(cat "$HOME/.asoundrc" )|###"
            el_notify_user "$( eval_gettext "Audio card unknown" )" "$( eval_gettext "There is a problem with your audio card. To reconfigure it, run:" ) audio-configurator"
        else
            audio-configurator
            is_already_configured=1
        fi
    fi


    # DONE, show it
    echo "$meter"
}

#===  FUNCTION  ================================================================
#          NAME:  get_volume
#   DESCRIPTION:  get the actual volume status
#    PARAMETERS:  -
#       RETURNS:  volume percentage in a simple integer value
#===============================================================================
get_volume(){
    # pre {{{
    #el_debug
    #el_security_function_loop || return

    el_check_variables "meter,list"

    # }}}

    # show and return a value
    #if echo "$list" | grep -q "'$meter',1" ; then
    if [[ "$list" = *"'$meter',1"* ]] ; then
        # stereo
        LC_ALL="$EL_LC_EN" amixer sget "${meter},0" 2>/dev/null | grep -E "(Playback:|Right:|Mono:)" | psort -- -p "Playback:" -p "Right:" -p "Mono:" | tr ' ' '\n' | grep "%" | sed -e 's|\[||g' -e 's|\]||g' -e 's|%||g' | grep -E "[[:digit:]]*" | head -1
    else
        # mono
        LC_ALL="$EL_LC_EN" amixer get "${meter}" 2>/dev/null | grep -E "(Playback:|Right:|Mono:)" | psort -- -p "Playback:" -p "Right:" -p "Mono:" | tr ' ' '\n' | grep "%" | sed -e 's|\[||g' -e 's|\]||g' -e 's|%||g' | grep -E "[[:digit:]]*" | head -1
    fi

}
#===  FUNCTION  ================================================================
#          NAME:  set_volume
#   DESCRIPTION:  set the volume
#    PARAMETERS:  $1 = volume (80%, 2%+, etc)
#       RETURNS:  true or false if failed
#===============================================================================
set_volume(){
    # pre {{{
    local action
    el_debug
    el_security_function_loop || return

    action="$1"
    el_check_variables "action,list,meter"

    # }}}

    if [[ "$list" = *"'$meter',1"* ]] ; then
        # stereo
        amixer -q set ${meter},0 $action 2>/dev/null
        amixer -q set ${meter},1 $action 2>/dev/null
    else
        # mono
        amixer -q set $meter $action 2>/dev/null
    fi

}
#===  FUNCTION  ================================================================
#          NAME:  mute_modes_force
#   DESCRIPTION:  force (hack) a mute mode for un unsupported card
#    PARAMETERS:  $1 = mode: mute|unmute  (no toggle modes)
#       RETURNS:  -
#===============================================================================
mute_modes_force(){
    # pre {{{
    local mode volume_before volume_actual
    el_debug
    el_security_function_loop 8 || return

    mode="$1"
    el_check_variables "mode"


    # }}}

    # get volume from conf
    if [[ -e "$conf" ]] && [[ -s "$conf" ]] ; then
        volume_before="$( grep "^volume:" "$conf" )"
        volume_before="${volume_before#volume:}"
        # remove extra leading blank chars
        read -r volume_before <<< "$volume_before"
    fi

    # no conf? get it now
    if [[ -z "$volume_before" ]] ; then
        volume_before="$( get_volume )"
    fi

    # get actual volume
    volume_actual="$( get_volume )"
    if [[ -z "$volume_actual" ]] ; then
        el_error "unable to get actual volume"
        exit
    fi

    # set mute modes
    case "$mode" in
        muteset)
            # set volume to 0
            "$0" "0%"

            # save our last state of volume for next use
            if [[ "$volume_actual" -gt 1 ]] ; then
                sed -i '/^volume:.*$/d' "$conf" 2>/dev/null
                echo -e "volume: $volume_actual" >> "$conf"
            fi

            ;;
        unmute|unmuteset)

            # set volume to our previous state
            "$0" "${volume_before}%"

            ;;
        mute|toggle)
            el_explain 0 "volumes was originally at $volume_before and now $volume_actual"

            if [[ "$volume_actual" -lt 5 ]] ; then
                $FUNCNAME unmute
            else
                $FUNCNAME muteset
            fi

            ;;
        *)
            el_error "Unkown $mode option for $FUNCNAME"
            ;;
    esac


}
#===  FUNCTION  ================================================================
#          NAME:  mute_modes
#   DESCRIPTION:  set mute or unmute the audio card
#    PARAMETERS:  $1 = mode: mute (toggle), muteset, unmute|unmuteset
#       RETURNS:  -
#===============================================================================
mute_modes(){
    # pre {{{
    local state_before state_after mode
    el_debug
    el_security_function_loop 8 || return

    mode="$1"
    el_check_variables "mode"

    # }}}
    state_before="$( LC_ALL="$EL_LC_EN" amixer get "$meter" | grep Right | tail -1 | tr ' ' '\n' | grep -E "(on|off)" | grep "\[" | sed 's/\[//g' | sed 's/\]//g' )"
    # remove extra leading blank chars
    read -r state_before <<< "$state_before"

    case "$mode" in
        unmute|unmuteset)
            # set talk
            if [[ -n "$state_before" ]] ; then
                if amixer -q set "$meter" unmute 2>/dev/null ; then
                    el_explain 2 "mute was on"
                else
                    # failed to set, force
                    mute_modes_force unmute
                    return
                fi
            else
                # we dont know about mute values for this channel/card, force
                mute_modes_force unmute
                return
            fi
            # force detect {{{
            state_after="$( LC_ALL="$EL_LC_EN" amixer get "$meter" | grep Right | tail -1 | tr ' ' '\n' | grep -E "(on|off)" | grep "\[" | sed 's/\[//g' | sed 's/\]//g' )"
            # remove extra leading blank chars
            read -r state_after <<< "$state_after"

            # unsuccessful mute, force
            if [[ "$state_after" = "off" ]] ; then
                el_explain 2 "mute has not changed, forcing it"
                mute_modes_force unmute
                return
            fi

            # - force detect }}}

            ;;
        muteset)
            # set silent
            if [[ -n "$state_before" ]] ; then
                if amixer -q set "$meter" mute 2>/dev/null ; then
                    el_explain 2 "mute was off"
                else
                    # failed to set, force
                    mute_modes_force muteset
                    return
                fi
            else
                # we dont know about mute values for this channel/card, force
                mute_modes_force muteset
                return
            fi
            # force detect {{{
            state_after="$( LC_ALL="$EL_LC_EN" amixer get "$meter" | grep Right | tail -1 | tr ' ' '\n' | grep -E "(on|off)" | grep "\[" | sed 's/\[//g' | sed 's/\]//g' )"
            # remove extra leading blank chars
            read -r state_after <<< "$state_after"

            # unsuccessful mute, force
            if [[ "$state_after" = "on" ]] ; then
                el_explain 2 "mute has not changed, forcing it"
                mute_modes_force mute
                return
            fi

            # - force detect }}}

            ;;
        mute)
            # Toggle mute modes
            if [[ -n "$state_before" ]] ; then

                if [[ "$state_before" = "off" ]] ; then
                    if amixer -q set "$meter" unmute 2>/dev/null ; then
                        el_explain 2 "mute was on"
                    else
                        # failed to set, force
                        mute_modes_force unmute
                        return
                    fi
                fi

                if [[ "$state_before" = "on" ]] ; then
                    if amixer -q set "$meter" mute 2>/dev/null ; then
                        el_explain 2 "mute was off"
                    else
                        # failed to set, force
                        mute_modes_force muteset
                        return
                    fi
                fi
            else
                # we dont know about mute values for this channel/card, force
                mute_modes_force toggle
                return
            fi
            # force detect {{{
            state_after="$( LC_ALL="$EL_LC_EN" amixer get "$meter" | grep Right | tail -1 | tr ' ' '\n' | grep -E "(on|off)" | grep "\[" | sed 's/\[//g' | sed 's/\]//g' )"
            # remove extra leading blank chars
            read -r state_after <<< "$state_after"

            # unsuccessful mute, force
            if [[ "$state_before" = "$state_after" ]] ; then
                el_explain 2 "mute has not changed, forcing it"
                mute_modes_force toggle
                return
            fi

            # - force detect }}}

            ;;
        *)
            el_error "Unkown $mode option for $FUNCNAME"
            ;;
    esac

}
main(){
    # pre {{{
    local list action actualvalue is_failed

    if ! el_dependencies_check "amixer,aplay" ; then
        exit 1
    fi

    # }}}

    # Usage
    if [[ -z "${1}" ]] ; then
        echo -e "Usage: $(basename $BASH_SOURCE) args"
        echo -e "\nExamples:"
        echo -e "$(basename $0) defaults  # set volumes generically to optimal ones"
        echo -e "$(basename $0) 80%  # set the volume to the 80 % level"
        echo -e "$(basename $0) 10%+ # increases 10% the actual volume"
        echo -e "$(basename $0) mute    # switch on/off mute mode"
        echo -e "$(basename $0) muteset # set ON mute mode"
        echo -e "$(basename $0) unmute  # set OFF mute mode"

        echo -e "\n$(basename $0) uses special powers making any card to work with all the features even the mute one, if doesn't, report the bug to us"
        exit 1
    fi


    list="$( amixer scontrols )"
    action="$@"

    conf="$HOME/.config/setvolume"
    if ! [[ -d "$(dirname "$conf" )" ]] ; then
        mkdir -p "$( dirname "$conf" )"
    fi

    meter="$( get_meter )"
    if [[ -z "$meter" ]] ; then
        # get it a second time (in case that not worked we have run the configurator to get again the correct meter value, if still not working show the error)
        meter="$( get_meter )"
    fi
    el_explain 2 "selected meter: $meter"



    if [[ "${1}" = "defaults" ]] ; then
        # enable PCM channel first of all
        timeout 5 aplay /dev/null 2>/dev/null
        # extra volumes up
        amixer -q set Headphone 100% 2>/dev/null
        amixer -q set Speaker 100% 2>/dev/null
        amixer -q set PCM 100% 2>/dev/null
        amixer -q set Front 100% 2>/dev/null
        amixer -q set Surround 100% 2>/dev/null
        # unmute channels
        amixer -q set Master unmute 2>/dev/null
        amixer -q set PCM    unmute 2>/dev/null
        amixer -q set Front  unmute 2>/dev/null
        amixer -q set Wave   unmute 2>/dev/null
        amixer -q set DAC    unmute 2>/dev/null


        # Mic configurations
        amixer -q set Capture unmute 2>/dev/null
        amixer -q set Capture 90% 2>/dev/null
        amixer -q set Mic unmute 2>/dev/null
        amixer -q set Mic 70% 2>/dev/null
        # capture mode
        amixer -q sset Mic cap 2>/dev/null
        amixer -q sset Capture cap 2>/dev/null
        # mute playback of mic, very annoying
        amixer -q sset Mic Playback mute 2>/dev/null

        # Fix for skype when we dont have a "Mic" control
        if ! LC_ALL="$EL_LC_EN" amixer scontrols | sed -e 's|^.mixer control||g' | grep -vi boost | grep -q "Mic" ; then
            if [[ -d "$HOME/.Skype" ]] && grep -q "<AGC>.</AGC>" "$HOME/.Skype/shared.xml" ; then
                killall skype 2>/dev/null || killall -9 skype 2>/dev/null
                sync
                sed -i "s|<AGC>.</AGC>|<AGC>0</AGC>|g" "$HOME/.Skype/shared.xml"

                el_explain 0 "added a fix for your skype: to not modify your volumes, your audio-card model needs this"
            else
                if [[ "$TERM" != linux ]] ; then
                    el_info "If you use Skype you need to configure in the audio preferences to NOT modify your audio values"
                fi
            fi
        else

            if [[ -d "$HOME/.Skype" ]] && grep -q "<AGC>.</AGC>" "$HOME/.Skype/shared.xml" ; then
                killall skype 2>/dev/null || killall -9 skype 2>/dev/null
                sync
                sed -i "s|<AGC>.</AGC>|<AGC>1</AGC>|g" "$HOME/.Skype/shared.xml"

                el_explain 0 "added a fix for your skype: to allow it modify your volumes, because your audio-card model needs this"
            else
                el_info "If you use Skype you need to configure in the audio preferences to NOT modify your audio values"
            fi
        fi

        # Master should be always set to 100 % in order to avoid distortions
        el_explain 2 "Master set to 100%"
        amixer -q set Master,0 100%  2>/dev/null
        amixer -q set Master,1 100%  2>/dev/null
        amixer -q set Master 100%  2>/dev/null

        # then set a default generic volume
        unset meter
        main 90% 1>/dev/null
        exit
    fi


    # fixes percent space
    action="${action/ %/%}"

    # e17 keybindings seems to segfault when using - char, so use words instead
    action="${action/ up/+}"
    action="${action/ down/-}"


    # MUTE modes
    # silent
    if [[ "$action" = "muteset" ]] ; then
        mute_modes "muteset"
        exit
    fi
    # speak
    if [[ "$action" = "unmute" ]] ; then
        mute_modes "unmute"
        exit
    fi
    # toggle
    if [[ "$action" = "mute" ]] ; then
        mute_modes "mute"
        exit
    fi

    ##################

    # normal actions, like setting the volume
    #if echo "$list" | grep -q "'$meter',1" ; then
    if [[ "$list" = *"'$meter',1"* ]] ; then
        # stereo
        if ! amixer -q set ${meter},0 $action 2>/dev/null ; then
            #get_meter
            set_volume "$action"
        fi

        if ! amixer -q set ${meter},1 $action 2>/dev/null ; then
            #get_meter
            set_volume "$action"
        fi

    else
        # mono
        if ! amixer -q set $meter $action 2>/dev/null ; then
            #get_meter
            set_volume "$action"
        fi
    fi
    ##################

    # this is old and deprecated
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
