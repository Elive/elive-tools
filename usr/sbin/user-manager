#!/bin/bash
source /usr/lib/elive-tools/functions

. gettext.sh
export TEXTDOMAIN="elive-tools"

set -e

. /etc/adduser.conf

# FIXME: since the installer requires also the same thing, make a "functions" file for create new users, source it from the installer and call the functions to create a new user, simple fast and easy
#       - TODO: another option is to write it in ELM / RUBY and good, with the option to create it or to generate a script (to run then inside the chroot), note that the installer GUI will look different then

# TODO: adduser and debconf-utils can be removed as dependency by improving this script

# passwd dep
#USERADD=useradd
USERDEL=userdel
# adduser dep
ADDUSER=adduser
DELUSER=deluser

if [ -z "$DHOME" ]; then
    DHOME=/home
fi
if [ -z "$USERS_GID" ]; then
    USERS_GID=100
fi

trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM


guitool="/usr/bin/zenity --window-icon=/usr/share/icons/gnome/256x256/apps/logo-elive.png"
temp_error="/tmp/$(basename $0)-${USER}-$$"

el_dependencies_check "${guitool},chpasswd,debconf-get-selections,grep,groupadd,elive-skel,chown,su,${USERADD},${ADDUSER},useradd,${USERDEL}"

###########################################################################
exit_error(){
    if [[ -s "$temp_error" ]] ; then
        $guitool --error --text="Error, $( cat "${temp_error}" )"
    else
        $guitool --error
    fi

    exit
}
###########################################################################
exit_ok(){
    rm -f "${temp_error}" 2>/dev/null
}

###########################################################################
pass_verify(){
    if [[ "$userpass" != "$repeatpass" ]] ; then
        $guitool --error --text="$( eval_gettext "The passwords are not the same, try again" )"
        pass_step
    fi
}

###########################################################################
pass_step(){

    local translated_message
    translated_message="$( printf "$( eval_gettext "Insert a new password for user %s" )" "$username" )"

    userpass="$( $guitool --entry --hide-text --text="$translated_message" || echo cancel )"

    [[ "$userpass" = "cancel" ]] && exit 1

    repeatpass="$( $guitool --entry --hide-text --text="$( eval_gettext "Insert it again for confirmation" )" || echo cancel )"
    [[ "$repeatpass" = "cancel" ]] && exit 1

    #userpass="$( echo "$userpass" | sed "s|'|'\\\''|g" )"
    #repeatpass="$( echo "$repeatpass" | sed "s|'|'\\\''|g" )"

    pass_verify
}

###########################################################################
groups_add(){
    local group

    # TODO: add this to the installer too
    for group in $( debconf-get-selections | grep "^user-setup" | grep "passwd/user-default-groups" | sed 's|^.*passwd/user-default-groups[[:blank:]]*string||g' )
    do
        # remove extra leading blank chars
        read -r group <<< "$group"

        "$ADDUSER" "$username" "${group}" || true
    done

}

###########################################################################
groups_del(){
    local group

    for group in $( debconf-get-selections | grep "^user-setup" | grep "passwd/user-default-groups" | sed 's|^.*passwd/user-default-groups[[:blank:]]*string||g' )
    do
        # remove extra leading blank chars
        read -r group <<< "$group"

        $DELUSER "$username" "${group}" || true
    done
}

sudoers_add(){
    local username
    username="$1"

    # add sudoers configuration
    if ! grep -qsE "^${username}\s+" /etc/sudoers ; then
        echo -e "$username ALL=(ALL) ALL" >> /etc/sudoers
    fi

    # add to group
    "$ADDUSER" "$username" "sudo" || true

    # default timeout value
    if ! grep -qs "Defaults:ALL timestamp_timeout=10" "/etc/sudoers.d/timeout_inmediate" ; then
        echo "Defaults:ALL timestamp_timeout=10" > "/etc/sudoers.d/timeout_inmediate"
        chmod 0440 "/etc/sudoers.d/timeout_inmediate"
    fi

    # fix permissions
    chmod 0440 /etc/sudoers
}

sudoers_del(){
    local username
    username="$1"

    if grep -qsE "^${username}\s+" /etc/sudoers ; then
        sed -i "/^${username}/d" /etc/sudoers
    fi
    #sed -i '/^$/d' /etc/sudoers
    chmod 0440 /etc/sudoers
}

###########################################################################
user_add(){
    username="$( $guitool --entry --text="$( eval_gettext "Enter the name of the new user" )" || echo cancel )"
    [[ "$username" = "cancel" ]] && exit 1

    #if [[ "$username" = "eliveuser" ]] ; then
        #$guitool --error --text="$( eval_gettext "Username -eliveuser- is not accepted, use a different name" )"
        #exit 1
    #fi

    pass_step

    # this comes from /etc/adduser.conf
    if [[ "$USERGROUPS" = "yes" ]] ; then
        USERGROUP="$username"
        # do not create it or adduser will fail
        #groupadd $USERGROUP 2>"${temp_error}" || exit 1
    else
        USERGROUP="$USERS_GID"
    fi

    # create user
    #$USERADD -d "$DHOME/$username" -m -k /etc/skel -c "Elive User" -g "$USERGROUP" -s /bin/bash "$username" 2>"${temp_error}" || exit 1
    #$USERADD -m $username 2>/tmp/.errormessage || exit 1
    #$ADDUSER --force-badname --disabled-password --gecos 'Elive User' --shell /bin/zsh "$username" 2>/tmp/.errormessage || exit 1
    #$ADDUSER --force-badname --disabled-password --gecos 'Elive User' --shell /bin/zsh "$username" 2>/tmp/.errormessage || exit 1
    # update: adduser doesn't accepts names like Владимир
    useradd -c "Elive User" -m -s "/bin/zsh" "$username"
    # create / fix the files too
    elive-skel newuser "$username"

    # set password
    if chpasswd -h 2>&1 | grep -iq md5 ; then
        chpassopt="-m"
    else
        chpassopt=""
    fi

    #echo "$username:$userpass" | chpasswd $chpassopt
    bash -c 'printf "%s:%s\\n" "$1" "$2" | chpasswd -m' -- "$username" "$userpass"

    #elive-skel user $username $USERGROUP 2>"${temp_error}" || exit 1

    groups_add

    #chown -R "$username:$USERGROUP" "$DHOME/$username"

    # sudo configuration
    if $guitool --question --text="$( eval_gettext "Do you want to activate sudo privileges for this user?" )" ; then
        sudoers_add "$username"
    fi

    # fingerprint support
    if grep -qsi "fingerprint" /proc/bus/input/devices || lsusb | grep -qsi "Upek" ; then
        $guitool --info --text="$( eval_gettext "Your computer supports fingerprint reader, you can follow the howto of Elive to activate it." )" || true
    fi
    # deprecated, we use e17-wizard startup now
    #su -c "/usr/share/user-manager/hooks/newuser-static.sh" "$username"
    #su -c "/usr/share/user-manager/hooks/newuser-dynamic.sh" "$username"

    # add a lightdm icon reference for the username for its login
    mkdir -p /var/lib/AccountsService/users
    echo -e "[User]\nIcon=/usr/share/icons/gnome/256x256/apps/logo-elive.png" > "/var/lib/AccountsService/users/$username"


    local translated_message
    translated_message="$( printf "$( eval_gettext "You have added successfully the %s user, you can use it now" )" "$username" )"

    $guitool --info --text="$translated_message" || true
}

###########################################################################
user_del(){
    local uid user userlist line pid

    while read -ru 3 line
    do
        uid="$( echo "$line" | awk -v FS=":" '{print $3}' )"
        user="$( echo "$line" | awk -v FS=":" '{print $1}' )"

        if [[ "${uid}" -ge "$FIRST_UID" ]] && [[ "${uid}" -le "$LAST_UID" ]] ; then
            if [[ -d "$DHOME/$user" ]] ; then
                userlist+=("$user")
            fi
        fi
    done 3<<< "$( cat "/etc/passwd" )"


    username="$( echo "${userlist[@]}" | tr ' ' '\n' | $guitool --list --column="$( eval_gettext "User" )" --text="$( eval_gettext "Select the user that you want to delete" )" || echo cancel )"

    [[ "$username" = "cancel" ]] && exit 1


    local translated_message
    translated_message="$( printf "$( eval_gettext "Are you sure to want to delete the user %s ?" )" "$username" )"

    $guitool --question --text="$translated_message" || exit 1

    groups_del


    local translated_message
    translated_message="$( printf "$( eval_gettext "Do you like to remove all %s files of the %s user?" )" "$DHOME/$username" "$username" )"

    # before to delete an user, all the processes needs to be closed or it will fail
    for i in 1 2 3 4 5
    do
        while read -ru 3 pid
        do
            kill "$pid" 2>/dev/null || kill -9 "$pid" 2>/dev/null || true
        done 3<<< "$( LC_ALL="$EL_LC_EN" ps aux | grep -E "^${username}\s+" | awk '{print $2}' )"
    done

    if $guitool --question --text="$translated_message" ; then
        $USERDEL -r "$username" 2>"${temp_error}" || exit 1
    else
        $USERDEL "$username" 2>"${temp_error}" || exit 1
    fi

    sudoers_del "$username"

    local translated_message
    translated_message="$( printf "$( eval_gettext "You have removed successfully the %s user" )" "$username" )"

    $guitool --info --text="$translated_message" || true

}

###########################################################################
pass_change(){
    local uid user userlist line

    while read -ru 3 line
    do
        uid="$( echo "$line" | awk -v FS=":" '{print $3}' )"
        user="$( echo "$line" | awk -v FS=":" '{print $1}' )"

        if [[ "${uid}" -ge "$FIRST_UID" ]] && [[ "${uid}" -le "$LAST_UID" ]] ; then
            if [[ -d "$DHOME/$user" ]] ; then
                userlist+=("$user")
            fi
        fi
    done 3<<< "$( cat "/etc/passwd" )"


    username="$( echo "root ${userlist[@]}" | tr ' ' '\n' | $guitool --list --column="$( eval_gettext "User" )" --text="$( eval_gettext "Select the user in which to change its password" )" || echo cancel )"
    [[ "$username" = "cancel" ]] && exit 1

    pass_step
    if chpasswd -h 2>&1 | grep -iq md5 ; then
        chpassopt="-m"
    else
        chpassopt=""
    fi

    #echo "$username:$userpass" | chpasswd $chpassopt
    bash -c 'printf "%s:%s\\n" "$1" "$2" | chpasswd -m' -- "$username" "$userpass"

    $guitool --info --text="$( eval_gettext "New password changed" )" || true

    exit
}

###########################################################################
autologin_conf(){
    local uid user userlist line

    while read -ru 3 line
    do
        uid="$( echo "$line" | awk -v FS=":" '{print $3}' )"
        user="$( echo "$line" | awk -v FS=":" '{print $1}' )"

        if [[ "${uid}" -ge "$FIRST_UID" ]] && [[ "${uid}" -le "$LAST_UID" ]] ; then
            if [[ -d "$DHOME/$user" ]] ; then
                userlist+=("$user")
            fi
        fi
    done 3<<< "$( cat "/etc/passwd" )"


    username="$( echo "${userlist[@]}" | tr ' ' '\n' | $guitool --list --column="$( eval_gettext "User" )" --text="$( eval_gettext "Select the user that you want to automatically login with." )" || echo cancel )"

    if [[ "$username" = "cancel" ]] ; then
        sed -i -e 's|^\(autologin-user=.*\)|#\1|g' "/etc/lightdm/lightdm.conf"
        $guitool --info --text="$( eval_gettext "Autologin disabled" )" || true
    else
        # enable autologin for user
        sed -i -e "s|^\(#\)*autologin-user=.*$|autologin-user=$autologin_username|g" "/etc/lightdm/lightdm.conf"

        local message_autologin_set
        message_autologin_set="$( printf "$( eval_gettext "Autologin set to %s" )" "$username" )"

        $guitool --info --text="$message_autologin_set" || true
    fi

    exit 0
}

###########################################################################
main(){
    local selection

    selection="$( $guitool --width=400 --height=280 --list --text="$( eval_gettext "Select an option" )" --column='' --column="$( eval_gettext "Option" )" '1' "$( eval_gettext "Add a new user" )" '2' "$( eval_gettext "Delete an user" )" '3' "$( eval_gettext "Change the password of an user" )" '4' "$( eval_gettext "Automated login configuration" )" || echo cancel )"

    case "$selection" in
        cancel)
            exit 1
            ;;
        1)
            user_add
            ;;
        2)
            user_del
            ;;
        3)
            pass_change
            ;;
        4)
            autologin_conf
            ;;
    esac

    #[[ "$selection" = "cancel" ]] && exit 1
    #[[ "$selection" = "1" ]] && { user_add ; exit 0 ; }
    #[[ "$selection" = "2" ]] && { user_del ; exit 0 ; }
    #[[ "$selection" = "3" ]] && { pass_change ; exit 0 ; }
    #[[ "$selection" = "4" ]] && { autologin_conf ; exit 0 ; }

    rm -f "${temp_error}"
}


############ main

main



############################


