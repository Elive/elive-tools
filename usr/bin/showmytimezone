#!/bin/bash
source /usr/lib/elive-tools/functions

#===  FUNCTION  ================================================================
#          NAME:  convert_timezone
#   DESCRIPTION:  converts to a standard name if needed
#		  this code comes from tzdata package
#    PARAMETERS:  timezone
#       RETURNS:  timezone on his correct value to use
#===============================================================================
convert_timezone()
{
    case "$1" in
        (right/*|posix/*)
            convert_timezone "${1#*/}"
            ;;
        ("Africa/Asmera")
            echo "Africa/Asmara"
            ;;
        ("America/Argentina/ComodRivadavia"|"America/Catamarca")
            echo "America/Argentina/Catamarca"
            ;;
        ("America/Buenos_Aires")
            echo "America/Argentina/Buenos_Aires"
            ;;
        ("America/Cordoba"|"America/Rosario")
            echo "America/Argentina/Cordoba"
            ;;
        ("America/Jujuy")
            echo "America/Argentina/Jujuy"
            ;;
        ("America/Mendoza")
            echo "America/Argentina/Mendoza"
            ;;
        ("Antarctica/South_Pole")
            echo "Antarctica/McMurdo"
            ;;
        "Asia/Ashkhabad")
            echo "Asia/Ashgabat"
            ;;
        ("Asia/Calcutta")
            echo "Asia/Kolkata"
            ;;
        "Asia/Chungking")
            echo "Asia/Chongqing"
            ;;
        "Asia/Dacca")
            echo "Asia/Dhaka"
            ;;
        ("Asia/Katmandu")
            echo "Asia/Kathmandu"
            ;;
        "Asia/Macao")
            echo "Asia/Macau"
            ;;
        ("Asia/Saigon")
            echo "Asia/Ho_Chi_Minh"
            ;;
        "Asia/Thimbu")
            echo "Asia/Thimphu"
            ;;
        "Asia/Ulan_Bator")
            echo "Asia/Ulaanbaatar"
            ;;
        "Atlantic/Faeroe")
            echo "Atlantic/Faroe"
            ;;
        "Australia/ACT" | "Australia/NSW")
            echo "Australia/Sydney"
            ;;
        "Australia/LHI")
            echo "Australia/Lord_Howe"
            ;;
        "Australia/North")
            echo "Australia/Darwin"
            ;;
        "Australia/Queensland")
            echo "Australia/Brisbane"
            ;;
        "Australia/South")
            echo "Australia/Adelaide"
            ;;
        "Australia/Tasmania")
            echo "Australia/Hobart"
            ;;
        "Australia/Victoria")
            echo "Australia/Melbourne"
            ;;
        "Australia/West")
            echo "Australia/Perth"
            ;;
        "Brazil/Acre")
            echo "America/Rio_Branco"
            ;;
        "Brazil/DeNoronha")
            echo "America/Noronha"
            ;;
        "Brazil/East")
            echo "America/Sao_Paulo"
            ;;
        "Brazil/West")
            echo "America/Manaus"
            ;;
        "Canada/Atlantic")
            echo "America/Halifax"
            ;;
        "Canada/Central")
            echo "America/Winnipeg"
            ;;
        "Canada/East-Saskatchewan")
            echo "America/Regina"
            ;;
        "Canada/Eastern")
            echo "America/Toronto"
            ;;
        "Canada/Mountain")
            echo "America/Edmonton"
            ;;
        "Canada/Newfoundland")
            echo "America/St_Johns"
            ;;
        "Canada/Pacific")
            echo "America/Vancouver"
            ;;
        "Canada/Saskatchewan")
            echo "America/Regina"
            ;;
        "Canada/Yukon")
            echo "America/Whitehorse"
            ;;
        "CET")
            echo "Europe/Paris"
            ;;
        "Chile/Continental")
            echo "America/Santiago"
            ;;
        "Chile/EasterIsland")
            echo "Pacific/Easter"
            ;;
        "CST6CDT")
            echo "SystemV/CST6CDT"
            ;;
        "Cuba")
            echo "America/Havana"
            ;;
        "EET")
            echo "Europe/Helsinki"
            ;;
        "Egypt")
            echo "Africa/Cairo"
            ;;
        "Eire")
            echo "Europe/Dublin"
            ;;
        "EST")
            echo "SystemV/EST5"
            ;;
        "EST5EDT")
            echo "SystemV/EST5EDT"
            ;;
        "GB")
            echo "Europe/London"
            ;;
        "GB-Eire")
            echo "Europe/London"
            ;;
        "GMT")
            echo "Etc/GMT"
            ;;
        "GMT0")
            echo "Etc/GMT0"
            ;;
        "GMT-0")
            echo "Etc/GMT-0"
            ;;
        "GMT+0")
            echo "Etc/GMT+0"
            ;;
        "Greenwich")
            echo "Etc/Greenwich"
            ;;
        "Hongkong")
            echo "Asia/Hong_Kong"
            ;;
        "HST")
            echo "Pacific/Honolulu"
            ;;
        "Iceland")
            echo "Atlantic/Reykjavik"
            ;;
        "Iran")
            echo "Asia/Tehran"
            ;;
        "Israel")
            echo "Asia/Tel_Aviv"
            ;;
        "Jamaica")
            echo "America/Jamaica"
            ;;
        "Japan")
            echo "Asia/Tokyo"
            ;;
        "Kwajalein")
            echo "Pacific/Kwajalein"
            ;;
        "Libya")
            echo "Africa/Tripoli"
            ;;
        "MET")
            echo "Europe/Paris"
            ;;
        "Mexico/BajaNorte")
            echo "America/Tijuana"
            ;;
        "Mexico/BajaSur")
            echo "America/Mazatlan"
            ;;
        "Mexico/General")
            echo "America/Mexico_City"
            ;;
        "Mideast/Riyadh87")
            echo "Asia/Riyadh87"
            ;;
        "Mideast/Riyadh88")
            echo "Asia/Riyadh88"
            ;;
        "Mideast/Riyadh89")
            echo "Asia/Riyadh89"
            ;;
        "MST")
            echo "SystemV/MST7"
            ;;
        "MST7MDT")
            echo "SystemV/MST7MDT"
            ;;
        "Navajo")
            echo "America/Denver"
            ;;
        "NZ")
            echo "Pacific/Auckland"
            ;;
        "NZ-CHAT")
            echo "Pacific/Chatham"
            ;;
        "Poland")
            echo "Europe/Warsaw"
            ;;
        "Portugal")
            echo "Europe/Lisbon"
            ;;
        "PRC")
            echo "Asia/Shanghai"
            ;;
        "PST8PDT")
            echo "SystemV/PST8PDT"
            ;;
        "ROC")
            echo "Asia/Taipei"
            ;;
        "ROK")
            echo "Asia/Seoul"
            ;;
        "Singapore")
            echo "Asia/Singapore"
            ;;
        "Turkey")
            echo "Europe/Istanbul"
            ;;
        "UCT")
            echo "Etc/UCT"
            ;;
        "Universal")
            echo "Etc/UTC"
            ;;
        "US/Alaska")
            echo "America/Anchorage"
            ;;
        "US/Aleutian")
            echo "America/Adak"
            ;;
        "US/Arizona")
            echo "America/Phoenix"
            ;;
        "US/Central")
            echo "America/Chicago"
            ;;
        "US/East-Indiana")
            echo "America/Indianapolis"
            ;;
        "US/Eastern")
            echo "America/New_York"
            ;;
        "US/Hawaii")
            echo "Pacific/Honolulu"
            ;;
        "US/Indiana-Starke")
            echo "America/Indianapolis"
            ;;
        "US/Michigan")
            echo "America/Detroit"
            ;;
        "US/Mountain")
            echo "America/Denver"
            ;;
        "US/Pacific")
            echo "America/Los_Angeles"
            ;;
        "US/Samoa")
            echo "Pacific/Pago_Pago"
            ;;
        "UTC")
            echo "Etc/UTC"
            ;;
        "WET")
            echo "Europe/Lisbon"
            ;;
        "W-SU")
            echo "Europe/Moscow"
            ;;
        "Zulu")
            echo "Etc/UTC"
            ;;
        *)
            echo "$1"
            ;;
    esac

}

main(){
    # pre {{{
    local result location latitude longitude time_delay time_hwclock time_date

    if ! el_dependencies_check curl ; then
        if ! el_dependencies_install curl ; then
            exit 1
        fi
    fi

    if ! el_verify_internet ; then
        el_error "no internet connection found"
        exit 1
    fi

    # }}}

    location="$( showmylocation )"

    if ! echo "$location" | grep -q "Latitude" ; then
        el_warning "Cannot get latitude info from internet right now"
    fi

    latitude="$( echo "$location" | grep "<Latitude>.*[[:digit:]]" | sed -e 's|^.*<Latitude>||g' -e 's|</Latitude.*$||g' )"
    # remove extra leading blank chars
    read -r latitude <<< "$latitude"

    longitude="$( echo "$location" | grep "<Longitude>.*[[:digit:]]" | sed -e 's|^.*<Longitude>||g' -e 's|</Longitude.*$||g' )"
    # remove extra leading blank chars
    read -r longitude <<< "$longitude"

    if [[ -z "$latitude" ]] || [[ -z "$longitude" ]] ; then
        el_warning "Cannot get latitude or longitude info from internet right now"
    fi

    # get our timezone
    result="$( curl -k -s -A "Mozilla" "https://maps.googleapis.com/maps/api/timezone/json?location=${latitude},${longitude}&timestamp=$(date +%s)&sensor=false" )"
    if ! echo "$result" | grep -q "status.*OK" ; then
        el_warning "Unkown timezone location, using a smart method..."
    fi


    # validate and parse
    timezone="$( echo "$result" | grep -i "timezoneid" | sed -e 's|^.*timeZoneId" : "||g' -e 's|^.*: "||g' -e 's|",.*$||g' -e 's|"||g' | grep -E "[[:alpha:]]" )"

    if [[ -n "$timezone" ]] ; then
        # translate to a useful value
        timezone="$( convert_timezone $timezone )"
    else
        # get the value from the clock
        # search for the configured delay
        if [[ "$UID" = 0 ]] ; then
            time_hwclock="$( hwclock -u | tr ' ' '\n' | grep "[[:digit:]]*:[[:digit:]]*:[[:digit:]]" | sed -e 's|:.*$||g' -e 's|^0||g' )"
            time_date="$( date +%k )"
            # remove extra leading blank chars
            read -r time_date <<< "$time_date"

            if [[ "${time_hwclock}" = "${time_date}" ]] ; then
                timezone="Etc/UTC"
            else
                #time_delay="$(( ${time_date} - ${time_hwclock} ))"
                time_delay="$(( ${time_hwclock} - ${time_date} ))"
                if echo "$time_delay" | grep -q "^[[:digit:]]" ; then
                    # add positive value if we have not
                    time_delay="+${time_delay}"
                fi
                timezone="Etc/GMT${time_delay}"
            fi
        else
            el_warning "The result will be improved if you run it by root instead of user"
            timezone="Etc/UTC"
        fi
    fi


    # return the final value
    echo "$timezone"

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
