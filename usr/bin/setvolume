#!/bin/bash
source /usr/lib/elive-tools/functions
main(){
    # pre {{{
    local list action meter actualvalue

    el_dependencies_check amixer

    # }}}

    # Usage
    if [[ -z "${1}" ]] ; then
        echo -e "Usage: $(basename $BASH_SOURCE) args"
        echo -e "Examples:"
        echo -e "$(basename $0) defaults  # set volumes generically to optimal ones"
        echo -e "$(basename $0) 80%  # set the volume to the 80 % level"
        echo -e "$(basename $0) 10%+ # increases 10% the actual volume"
        echo -e "$(basename $0) mute # switch on/off mute mode"
        echo -e "$(basename $0) unmute # switch off mute mode"
        exit 1
    fi


    list="$( amixer scontrols )"
    action="$@"

    if [[ "${1}" = "defaults" ]] ; then
        # extra volumes up
        amixer -q set Headphone 100% 2>/dev/null
        amixer -q set Speaker 100% 2>/dev/null
        # unmute channels
        amixer -q set Master unmute 2>/dev/null
        amixer -q set PCM    unmute 2>/dev/null
        amixer -q set Front  unmute 2>/dev/null
        amixer -q set Wave   unmute 2>/dev/null
        amixer -q set DAC    unmute 2>/dev/null

        # Master should be always set to 100 % in order to avoid distortions
        el_explain 2 "Master set to 100%"
        amixer -q set Master,0 100  2>/dev/null
        amixer -q set Master,1 100  2>/dev/null

        # Mic configurations
        amixer -q set Capture unmute 2>/dev/null
        amixer -q set Capture 90% 2>/dev/null
        amixer -q set Mic unmute 2>/dev/null
        amixer -q set Mic 70% 2>/dev/null
        # capture mode
        amixer -q sset Mic cap 2>/dev/null
        amixer -q sset Capture cap 2>/dev/null
        # mute playback of mic, very annoying
        amixer -q sset Mic Playback mute 2>/dev/null

        # Fix for skype when we dont have a "Mic" control
        if ! amixer scontrols | sed -e 's|^.mixer control||g' | grep -vi boost | grep -q "Mic" ; then
            if [[ -d $HOME/.Skype ]] && grep -q "<AGC>.</AGC>" $HOME/.Skype/shared.xml ; then
                killall skype 2>/dev/null
                sed -i "s|<AGC>.</AGC>|<AGC>0</AGC>|g" $HOME/.Skype/shared.xml

                el_explain 2 "added a fix for your skype: to not modify your volumes"
            else
                el_warning "If you use Skype you need to configure in the audio preferences to NOT modify your audio values"
            fi
        fi

        # then set a default generic volume
        main 85% 1>/dev/null
        exit
    fi


    # fixes percent space
    action="${action/ %/%}"

    action="${action/ up/+}"
    action="${action/ down/-}" # FIXME: e17 mouse bindings does a segfault when the action is to enter a command like "setvolumes 2%+" ? if yes, report it to E17

    ##################
    # First = see if first option is available, if not, try with the next one
    if [[ -z $meter ]] ; then
        if echo "$list" | grep -q "'PCM'" ; then
            meter=PCM
        fi
    fi

    ##################
    if [[ -z $meter ]] ; then
        if echo "$list" | grep -q "'Front'" ; then
            meter=Front
        fi
    fi

    ##################
    if [[ -z $meter ]] ; then
        if echo "$list" | grep -q "'Wave'" ; then
            meter=Wave
        fi
    fi

    ##################
    if [[ -z $meter ]] ; then
        if echo "$list" | grep -q "'Center'" ; then
            meter=Center
        fi
    fi

    ##################
    # Master should be everytime on Max volume or you got distortions
    if [[ -z $meter ]] ; then
        if echo "$list" | grep -q "'Master'" ; then
            meter=Master
        fi
    fi

    ##################
    # Special Cards, like ice1712/Terratec_ewx24/96
    if [[ -z $meter ]] ; then
        if echo "$list" | grep -q "'DAC'" ; then
            meter=DAC
        fi
    fi

    ##################

    el_explain 2 "selected meter to modify: $meter"

    if [[ "$action" = "mute" ]] ; then
        actualvalue="$( amixer get $meter | grep Right | tail -1 | tr ' ' '\n' | grep -E "(on|off)" | grep "\[" | sed 's/\[//g' | sed 's/\]//g' )"
        actualvalue="$( echo $actualvalue )"

        if [[ "$actualvalue" = "on" ]] ; then
            el_explain 2 "mute was on"
            amixer -q set $meter mute 2>/dev/null
        fi

        if [[ "$actualvalue" = "off" ]] ; then
            el_explain 2 "mute was off"
            amixer -q set $meter unmute 2>/dev/null
        fi
        exit
    fi

    if [[ "$action" = "unmute" ]] ; then
        amixer -q set $meter unmute 2>/dev/null
        exit
    fi
    ##################

    if echo "$list" | grep -q "'$meter',1" ; then
        amixer -q set ${meter},0 $action 2>/dev/null
        amixer -q set ${meter},1 $action 2>/dev/null
    else
        amixer -q set $meter $action 2>/dev/null
    fi
    ##################

    el_explain 2 "Volumes are now at $( amixer get $meter | grep -E  "(Left|Right).*%]" | tr ' ' '\n' | grep % | tr '\n' ' ' )"
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
