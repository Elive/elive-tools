#!/bin/bash
source /usr/lib/elive-tools/functions

main(){
    # pre {{{
    local url debian_version elive_version is_wheezy browsers arg

    debian_version="$( cat "/etc/debian_version" )"

    # wheezy
    if [[ "$debian_version" = 7.* ]] ; then
        is_wheezy=1
    fi

    # }}}
    # smart arguments parser
    for arg in "$@"
    do
        case "$arg" in
            http*|file://*|www.*)
                el_array_member_add "$arg" "${urls[@]}" ; urls=("${_out[@]}")
                el_debug "added url '${arg}' "
                shift
                ;;
            chrome|google-chrome|chromium|firefox|iceweasel|links2|lynx|w3m|netsurf|surf)
                el_array_member_add "${arg}" "${browsers[@]}" ; browsers=("${_out[@]}")
                el_debug "added browser preference '${arg}' "
                shift
                ;;
            --app=*)
                is_mode_app=1
                el_array_member_add "${arg#--app=}" "${urls[@]}" ; urls=("${_out[@]}")
                el_debug "added url '${arg#--app=}' in APP mode"
                shift
                ;;
            --incognito|--private-window)
                is_mode_incognito=1
                el_debug "mode incognito"
                shift
                ;;
            --temp-profile)
                el_debug "mode temporal profile"
                is_mode_temp_profile=1
                shift
                ;;
            --*)
                el_warning "ignoring unrecognized option $arg"
                shift
                ;;
            *)
                el_array_member_add "$arg" "${urls[@]}" ; urls=("${_out[@]}")
                el_debug "added url '${arg}' (assumed)"
                shift
                ;;
        esac
    done

    # add possible ones based in preference
    el_array_member_add "chrome" "${browsers[@]}" ; browsers=("${_out[@]}")
    el_array_member_add "firefox" "${browsers[@]}" ; browsers=("${_out[@]}")
    el_array_member_add "iceweasel" "${browsers[@]}" ; browsers=("${_out[@]}")
    el_array_member_add "chromium" "${browsers[@]}" ; browsers=("${_out[@]}")
    el_array_member_add "surf" "${browsers[@]}" ; browsers=("${_out[@]}")
    el_array_member_add "netsurf" "${browsers[@]}" ; browsers=("${_out[@]}")
    el_array_member_add "links2" "${browsers[@]}" ; browsers=("${_out[@]}")
    el_array_member_add "/etc/alternatives/x-www-browser" "${browsers[@]}" ; browsers=("${_out[@]}")

    # manage special cases {{{
    case "$url" in
        *ted.com*)
            # chromium not works on this version, only chrome and iceweasel
            if ((is_wheezy)) ; then
                el_array_member_unset "chromium" "${browsers[@]}" ; browsers=("${_out[@]}")
            fi
            ;;
    esac

    # }}}

    for browser in "${browsers[@]}"
    do
        case "$browser" in
            chrome|google-chrome|chromium)
                # fix
                if [[ "$browser" = "chrome" ]] ; then
                    if [[ -x "$( which "$browser" )" ]] ; then
                        browser="$( which "${browser}" )"
                    else
                        if [[ -x "$( which "google-$browser" )" ]] ; then
                            browser="$( which "google-${browser}" )"
                        fi
                    fi
                fi
                if [[ -x "$( which "$browser" )" ]] ; then
                    browser="$( which "${browser}" )"
                    el_debug "prefered browser: $browser"

                    # only chromium has temporal profile
                    if ((is_mode_temp_profile)) && [[ "$browser" = "chromium" ]] ; then
                        el_array_member_add "--temp-profile" "${browser_options[@]}" ; browser_options=("${_out[@]}")
                    fi
                    if ((is_mode_incognito)) ; then
                        el_array_member_add "--incognito" "${browser_options[@]}" ; browser_options=("${_out[@]}")
                    fi
                    break
                fi
                ;;
            iceweasel|firefox)
                if [[ -x "$( which "$browser" )" ]] ; then
                    browser="$( which "${browser}" )"
                    el_debug "prefered browser: $browser"

                    if ((is_mode_incognito)) ; then
                        el_array_member_add "--private-window" "${browser_options[@]}" ; browser_options=("${_out[@]}")
                    fi
                    break
                fi
                ;;
            surf|netsurf)
                if [[ -x "$( which "$browser" )" ]] ; then
                    browser="$( which "${browser}" )"
                    el_debug "prefered browser: $browser"
                    break
                fi
                ;;
            links2*)
                if [[ -x "$( which "$browser" )" ]] ; then
                    if [[ -n "$DISPLAY" ]] ; then
                        browser="$( which "${browser}" ) -g"
                    else
                        browser="$( which "${browser}" )"
                    fi
                    el_debug "prefered browser: $browser"
                    break
                fi
                ;;
            lynx|w3m)
                if [[ -x "$( which "$browser" )" ]] ; then
                    browser="urxvt -e bash -c '$( which "${browser}" )'"
                    el_debug "prefered browser: $browser"
                    break
                fi
                ;;
        esac
    done

    # nothing used? open with a default one
    if ! [[ -n "$browser" ]] ; then
        browser="$( readlink -f "/etc/alternatives/x-www-browser" )"
    fi
    if ! [[ -n "$browser" ]] ; then
        el_error "no web browsers available found"
    fi

    # run the webs
    for url in "${urls[@]}"
    do
        if ((is_mode_app)) ; then
            ${browser} ${browser_options} --app="${url}" &
        else
            ${browser} ${browser_options} "${url}" &
        fi

        # don't bottleneck opening tabs
        LC_ALL=C sleep 2
    done

    # wait that all the browsers are finished? useful for wait the process, but:
    # note: it would be useful to wait the process that has finished, but if we are opening to a tab (like in chrome), the process is just run in BG, not waiting for it, so this is not so reliable...
    wait
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
