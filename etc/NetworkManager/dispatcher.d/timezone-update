#!/bin/bash
source /usr/lib/elive-tools/functions

. /lib/lsb/init-functions


# This tool is called as:   command eth1 up

update_conf_etc(){
    if [ -n "${timezone}" ] ; then
        _AREA="$(echo "${timezone}" | cut -f1 -d '/')"
        _ZONE="$(echo "${timezone}" | cut -f2 -d '/')"
    else
        _AREA="Etc"
        _ZONE="UTC"
    fi

    el_explain 0 "Configuring machine timezone to __${timezone}, $_AREA, $_ZONE __"
    log_progress_msg "Configuring machine timezone to __${timezone}, $_AREA, $_ZONE __"

    rm -f /etc/localtime
    ln -s "/usr/share/zoneinfo/${_AREA}/${_ZONE}" /etc/localtime
    echo "$_AREA/$_ZONE" > /etc/timezone

    # call tzdata and update things
    # debconf set configurations
    cat > "/tmp/debconf.$(basename $0)" << EOF
tzdata tzdata/Areas select ${_AREA}
tzdata tzdata/Zones/${_AREA} select ${_ZONE}
EOF
    debconf-set-selections < "/tmp/debconf.$(basename $0)"
    rm -f "/tmp/debconf.$(basename $0)"

    needs_update_time=1

}


update_ntp_time_from_server(){
    # update the time from a server
    service ntp stop 2>/dev/null 1>&2

    #if ! ntpdate 0.pool.ntp.org 2>/dev/null 1>/dev/null ; then
        if ! ntpdate pool.ntp.org 2>/dev/null 1>/dev/null ; then
            if ! ntpdate europe.pool.ntp.org 2>/dev/null 1>/dev/null ; then
                if ! ntpdate north-america.pool.ntp.org 2>/dev/null 1>/dev/null ; then
                    if ! ntpdate 1.pool.ntp.org ; then
                        el_warning "can't set time from ntp servers"
                    fi
                fi
            fi
        fi
    #fi

    # we don't need it at all, because we just managed to get the time, so don't waste resources
    #service ntp restart 2>/dev/null 1>&2

    # which mode of bios we have? utc or localtime?
    mode_bios="$(head -3 /etc/adjtime  | tail -1)"

    # finally, save the time to hwclock if needed
    case $mode_bios in
        LOCAL)
            el_explain 0 "Saving time using __localtime__"

            hwclock -w --localtime
            ;;
        UTC|*)
            el_explain 0 "Saving time using __utc__"

            hwclock -w --utc
            ;;
    esac


    # say something
    el_explain 0 "Changed Timezone to __${timezone}__, time is now __$(date)__"
    log_progress_msg "Changed Timezone to __${timezone}__, time is now __$(date)__"
}


has_windows(){
    if ! ((has_os_prober_run)) ; then

        if os-prober 2>/dev/null | grep -qsE "Windows" ;  then
            has_windows=1
            has_os_prober_run=1
        fi
    fi

    if ((has_windows)) ; then
        return 0
    else
        return 1
    fi
}

main(){
    # pre {{{

    # add a lock
    LOCKFILE="/tmp/.${USER}-$(basename $0).lock"
    [[ -r $LOCKFILE ]] && PROCESS=$(cat $LOCKFILE) || PROCESS=" "

    if (ps -p $PROCESS) >/dev/null 2>&1
    then
        echo "$(basename $0) process is already running"
        exit 1
    else
        rm -f $LOCKFILE
        echo $$ > $LOCKFILE
    fi

    if LC_ALL=C grep -qs "boot=live" /proc/cmdline ; then
        is_live=1
    fi

    iface="$1"
    shift
    state="$1"
    shift
    conf="/etc/elive-tools/geolocation/timezones.conf"

    # set some variables for compatibility expectation if we run it from commandline
    if [[ -z "$state" ]] ; then
        state="up"
    fi

    el_dependencies_check "ip,arp,showmytimezone,ping"
    #el_check_variables "iface,state"

    if [[ ! -e "$conf" ]] ; then
        if [[ "${conf}" = */* ]] ; then
            mkdir -p "${conf%/*}"
        fi
        touch "$conf"
    fi

    case "$1" in
        -f|--force)
            is_force=1
            needs_update_time=1
            # this is an ugly hack, iface is the first paramter but if we call the tool from cli it is "-f" instead
            #unset iface
            ;;
        -c|--clean)
            mode_clean=1
            unset iface
            ;;
        wlan*|ath*|ra*)
            is_wifi=1
            ;;
    esac


    case "$state" in
        down)
            # nothing useful to do when we disconnect
            exit
            ;;
        up|*)
            true
            ;;
    esac


    if ((mode_clean)) ; then
        rm -f "${conf}"
        el_explain 0 "Conf file cleaned"
        exit
    fi

    _CMDLINE="$(cat /proc/cmdline)"

    # }}}

    # let's connect to internet first, and try to do at least one ping somewhere! or arp -a will not work
    el_verify_internet 2>/dev/null 1>/dev/null
    if ! timeout 10 ping -c 1 google.com 1>/dev/null 2>/dev/null ; then
        el_dependencies_check "dig"
        timeout 10 dig NS google.com 1>/dev/null 2>/dev/null
    fi
    sleep 1

    # mark a stamp, amount of users that was able to successfully connect to internet
    if ((is_live)) && ! el_flag check stamp-connected ; then
        { curl --connect-timeout 30 --max-time 40 -A "elive-tools::$(el_elive_version_get)" http://www.elivecd.org/stats/1.1/055-live-connected-success.html 2>/dev/null 1>&2 & disown ; } 2>/dev/null
        el_flag add stamp-connected
    fi

    # get our connected MAC
    connected_gateway="$(ip route | grep default | awk '{ print $3 }' | tail -1 )"
    #connected_mac="$(arp -a | grep "(${connected_gateway}) at" | sed -e "s|^.*${connected_gateway} at||g" | tr ' ' '\n' | grep -E ":.*:.*:.*:" | tail -1 )"
    # note: arp -a is slow, use arp -n instead
    connected_mac="$(arp -n | grep -E "(${connected_gateway})\s+" | sed -e "s|^.*${connected_gateway}||g" | tr ' ' '\n' | grep -E ":.*:.*:.*:" | tail -1 )"

    # make sure that we have a mac
    if [[ -z "$connected_mac" ]] ; then
        el_error "MAC '${connected_mac}' of where we are connected not found"
        exit
    fi

    # get the last location
    if ! ((is_force)) && ! ((is_live)) ; then
        timezone_last="$( awk -v FS=":::" '{if ($1 == "last") print $2}' "${conf}" | tail -1 )"

        # if we already know the location of this mac, don't change the timezone (routers don't move their location, cable or wifi)
        timezone_last_current_mac="$( awk -v FS=":::" -v LAST_MAC="$connected_mac" '{if ($1 == LAST_MAC) print $2}' "${conf}" | tail -1 )"

        # the next one is if we don't want to re-use conf, so: force (this should be the default)
        if [[ -n "$timezone_last" ]] && [[ "${timezone_last}" = "$timezone_last_current_mac" ]] ; then
        #if [[ "${timezone_last}" = "$timezone_last_current_mac" ]] ; then

            # we don't want to update the known timezone in the conf
            skip_update_conf_last=1

            # check if we have windows first
            if has_windows ; then
                # we need forcely to update our time (but not the conf)
                needs_update_time=1

            else
                timezone="$timezone_last"

                #if ((is_force)) ; then

                    #update_conf_etc
                    #update_ntp_time_from_server
                #else
                    el_explain 0 "Your timezone is already known as __${timezone_last}__ and you have not a shared windows so we don't need to update your conf"
                    update_ntp_time_from_server
                #fi

                exit 0
            fi
        fi
    fi

    # get the bios mode
    # not in live, so we can use the usb in different computers
    if ! ((is_force)) && ! ((is_live)) ; then
        mode_bios="$( awk -v FS=":::" '{if ($1 == "bios mode") print $2}' "${conf}" | tail -1 )"
    fi

    # get the location of our actual connection
    if ! ((is_force)) ; then
        connected_timezone="$( grep -a "^${connected_mac}:::" "${conf}" | awk -v FS=":::" '{print $2}' | tail -1 )"
    fi

    # get the ssid identifier
    connected_ssid="$( iwconfig 2>&1 | grep "^${iface}[[:blank:]]*" | tr ' ' '\n' | grep ESSID | sed -e 's|ESSID:"||g' -e 's|".*$||g' | head -1 )"

    # get the actual timezone
    if [[ -n "$connected_timezone" ]] ; then
        timezone="${connected_timezone}"
    else
        timezone="$(showmytimezone)"

        if [[ "${timezone}" = "Etc/UTC" ]] || [[ "${timezone}" = "Etc/GMT"* ]] ; then
            if [[ -n "${timezone_last}" ]] ; then
                el_warning "we have not detected the timezone correctly, switching to last"
                timezone="${timezone_last}"
            else
                el_error "timezone not detected correctly"
                exit
            fi
        fi
    fi

    # check
    if [[ -z "$timezone" ]] ; then
        el_error "We have not found a timezone '${timezone}', exiting..."
        exit
    fi


    # first time, need to determine if use utc or not
    if [[ -z "$mode_bios" ]] ; then
        # if we have a windows, the time should be set to localtime for compatibility
        el_explain 0 "Detecting if your hardware clock is in UTC or LOCALTIME..."

        if has_windows ; then
            el_explain 0 "Windows is found, so clock must be set in localtime"

            mode_bios="LOCAL"
        fi

        if [[ -z "$mode_bios" ]] ; then
            el_explain 0 "first time, determine if we use UTC or localtime"


            if LC_ALL=C hwclock -r -D | grep -q "^Assuming hardware clock is kept in UTC" ; then
                el_explain 0 "Seems like your bios uses __UTC__ mode"
                mode_bios="UTC"
            else
                el_explain 0 "Seems like your bios uses __localtime__ mode"
                mode_bios="LOCAL"
            fi
        fi


        # save the mode to use
        if [[ -n "$mode_bios" ]] ; then
            sed -i "/^bios mode:::/d" "$conf"
            echo "bios mode:::$mode_bios" >> "${conf}"

            ed -s /etc/adjtime << EOF
3d
a
$mode_bios
.
w
EOF

        fi

    fi


    # compare our last location with our actual one
    # note: deprecated code, we still want to update some confs in any cases
    #if [[ "${timezone}" = "${timezone_last}" ]] ; then
        #if ((is_force)) || ((is_live)) ; then
            ## if we force or we are in live mode (always update times in live mode! because we reboot and the timezones files in /etc are gone)
            #true
        #else
            ## nothing more to do, everything is fine
            #exit 0
        #fi
    #fi

    #
    # We changed our location
    #

    # update times
    if [[ -z "$timezone_last" ]] ; then
        el_explain 0 "Updating last timezone to __${timezone}__"
        log_progress_msg "Updating last timezone to __${timezone}__"
        echo "last:::${timezone}" >> "${conf}"
    fi


    # always update it if we are in live
    if ((is_live)) ; then
        update_conf_etc
    else
        # update configurations in etc if we need to
        if [[ -n "$timezone" ]] && ! [[ "${timezone}" = "${timezone_last}" ]] ; then
            update_conf_etc
        fi
    fi


    if ((needs_update_time)) || ((is_live)) ; then
        update_ntp_time_from_server
    fi

    # update to our last location
    if ((is_force)) ; then
        sed -i "/^${connected_mac}:::/d" "$conf"
    fi
    if ! grep -aq "^${connected_mac}:::" "${conf}" ; then
        # but remember it only if we have an interface
        # TODO mobile connections should be never saved, since they moves!
        if [[ -n "$iface" ]] ; then
            if [[ -n "$connected_ssid" ]] ; then
                echo "${connected_mac}:::${timezone}:::${iface}:::${connected_ssid}" >> "${conf}"
            else
                echo "${connected_mac}:::${timezone}:::${iface}" >> "${conf}"
            fi
        else
            el_warning "ignoring adding entry in conf, so we don't have iface (called from cli?)"
        fi
    fi


    if [[ -n "$timezone" ]] && ! [[ "${timezone}" = "${timezone_last}" ]] ; then
        el_explain 0 "Updating last timezone to __${timezone}__ because is different than the last one"
        sed -i '/^last:::.*$/d' "${conf}"
        echo "last:::${timezone}" >> "${conf}"
    fi

}

#
#  MAIN
#
log_daemon_msg "Starting $(basename $0)"

main "$@"

log_end_msg 0
# vim: set foldmethod=marker :

