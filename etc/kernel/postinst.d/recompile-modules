#!/bin/bash
set +e
set +E

#
# Some modules like r8168 doest recompile at new kernel installs, so this hook does a kind of dpkg-reconfigure for all the dkms modules, just in case
#

# don't run anything on live mode
if grep -qs "boot=live" /proc/cmdline ; then
    exit 0
fi

# We're passed the version of the kernel being installed
inst_kern=$1

uname_s=$(uname -s)

_get_kernel_dir() {
    KVER=$1
    case ${uname_s} in
       Linux)          DIR="/lib/modules/$KVER/build" ;;
       GNU/kFreeBSD)   DIR="/usr/src/kfreebsd-headers-$KVER/sys" ;;
    esac
    echo $DIR
}

_check_kernel_dir() {
    DIR=$(_get_kernel_dir $1)
    case ${uname_s} in
       Linux)          test -e $DIR/include ;;
       GNU/kFreeBSD)   test -e $DIR/kern && test -e $DIR/conf/kmod.mk ;;
       *)              return 1 ;;
    esac
    return $?
}

case "${uname_s}" in
    Linux)
        header_pkg="linux-headers-$inst_kern"
        kernel="Linux"
    ;;
    GNU/kFreeBSD)
        header_pkg="kfreebsd-headers-$inst_kern"
        kernel="kFreeBSD"
    ;;
esac

#if [ -x /usr/lib/dkms/dkms_autoinstaller ]; then
    #exec /usr/lib/dkms/dkms_autoinstaller start $inst_kern > /dev/null
#fi

if ! _check_kernel_dir $inst_kern ; then
    echo "dkms: WARNING: $kernel headers are missing, which may explain the above failures." >&2
    echo "      please install the $header_pkg package to fix this." >&2
    exit 0
fi


# If we reached this point, we can continue

# reconfigure (recompile) each -dkms package
while read -ru 3 package
do
    # we cannot do it on this way because dpkg is locked:
    ##dpkg-reconfigure -fnoninteractive -pcritical "$package"

    if [[ -x "/var/lib/dpkg/info/${package}.postinst" ]] ; then
        echo -e "Rebuilding modules for $package"
        "/var/lib/dpkg/info/${package}.postinst" configure || true
    fi
done 3<<< "$( dpkg -l | grep -E "^ii\s*.*[[:print:]]-dkms\s*" | awk '{print $2}' )"

# recompile each of these ones too
while read -ru 3 dir
do
    _namedir="${dir##*/}"
	_name="${namedir%-*}"
	_version="${namedir#*-}"

	# skip unwanted ones
	if ! echo "$_namedir" | grep -qs "(vbox|nvidia|ati|radeon|fglrx|vmware)" ; then
		continue
	fi

	# build !
	echo -e "Running DKMS as: dkms install '$_name/$_version' -k '$inst_kern' "
	dkms install "$_name/$_version" -k "$inst_kern"

done 3<<< "$( find /usr/src -mindepth 1 -maxdepth 1 -type d )"

