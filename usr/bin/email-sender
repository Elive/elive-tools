#!/bin/bash
source /usr/lib/elive-tools/functions
el_make_environment

. gettext.sh
TEXTDOMAIN="elive-tools"
export TEXTDOMAIN

tempfile_tmp="/tmp/.${USER}-$(basename $0)_tmp_$$"
tempfile_body="/tmp/.${USER}-$(basename $0)_body_$$"
el_add_on_exit rm -f "$tempfile_tmp" "$tempfile_body"

#===  FUNCTION  ================================================================
#          NAME:  do_email_send
#   DESCRIPTION:  send of email
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
do_email_send(){
    # pre {{{

    if ! el_dependencies_check "mutt" ; then
        el_dependencies_install "mutt"
    fi

    # check if we have a valid setup and otherwise set it up first
    if [[ -z "$email_account" ]] || [[ -z "$email_password" ]] || ! [[ -s "$conf_mutt" ]] ; then
        do_configure
        do_validate_sending
    fi


    if ! el_check_variables "conf_mutt,conf" ; then
        do_configure
    fi

    if ! el_check_variables "to" ; then
        el_error "missing arguments"
        exit 1
    fi

    if el_check_files "$message" 1>/dev/null 2>/dev/null ; then
        is_message_file=1
    fi

    # }}}

    if ((is_message_file)) ; then
        if file "$message" | grep -qsi "HTML Document" ; then
            is_html=1
        fi
    fi

    # forced plain mode?
    if ((is_plain_mode)) ; then
        unset is_html
    fi

    #
    # Default values
    #
    username="$(awk -v FS=":" -v user="$USER" '{if ($1 == user) print $5 }' /etc/passwd | sed -e 's|,.*$||g' | tail -1 )"
    if [[ -z "$username" ]] || echo "$username" | grep -qsiE "Elive.User" ; then
        username="$USER"
    fi
    # upcase it
    username="$(echo "$username" | sed 's/[^ _-]*/\u&/g' )"

    if [[ -z "$subject" ]] ; then
        local message_subject
        message_subject="$( printf "$( eval_gettext "A message from %s in %s's computer" )" "$username" "$(hostname | sed 's/[^ _-]*/\u&/g' )" )"

        subject="$message_subject"
    fi

    if [[ -z "$title" ]] ; then
        title="$subject"
    fi

    if [[ -z "$template" ]] ; then
        template="default"
    fi

    # default message if no messages
    if ! el_check_variables "message" 1>/dev/null 2>/dev/null ; then
        if [[ -n "${attachments[@]}" ]] ; then
            local message_message_default
            message_message_default="$( printf "$( eval_gettext "Please check the attached files." )" )"

            message="$message_message_default"
        else
            el_error "missing arguments: message"
            exit 1
        fi
    fi


    #
    # Prepare body message:
    #
    if ((is_plain_mode)) ; then
        # dump to file and dont do any html conversion
        if ((is_message_file)) ; then
            cp -f "$message" "$tempfile_body"
        else
            echo "$message" > "$tempfile_body"
        fi
    else
        # we don't want to be strictly plain, so let's do the conversion
        if ! ((is_stdin)) ; then
            # if is stdin we have already it
            if ((is_message_file)) ; then
                cp -f "$message" "$tempfile_tmp"
            else
                echo "$message" > "$tempfile_tmp"
            fi
        fi

        # set template
        if [[ -f "/usr/share/email-sender/templates/$template/header.html" ]] ; then
            template_header="/usr/share/email-sender/templates/$template/header.html"
            template_footer="/usr/share/email-sender/templates/$template/footer.html"
        else
            el_error "template don't exist in /usr/share/email-sender/templates"
        fi


        # if we are not html (file command) we should convert it to html first
        if ((is_html)) ; then
            cp -f "$tempfile_tmp" "$tempfile_body"
        else
            # translate some simple text to html
            cat "$tempfile_tmp" | awk '{if ($0 ~ /^\s+/)  print "<pre>"$0"</pre>"; else  print $0"<br/>" }' > "$tempfile_body"
            is_html=1
        fi
    fi


    #
    # Send !
    #

    if ((is_html)) ; then

        # create body
        cp -f "$tempfile_body" "$tempfile_tmp"
        cat "$template_header" "$tempfile_tmp" "$template_footer" | sed \
            -e "s|XXXyearXXX|$(date +%Y)|g" \
            -e "s|XXXusernameXXX|$username|g" \
            -e "s|XXXyearXXX|$(date +%Y)|g" \
            -e "s|XXXhostnameXXX|$(hostname | sed 's/[^ _-]*/\u&/g' )|g" \
            -e "s|XXXyearXXX|$(date +%Y)|g" \
            -e "s|XXXtitleXXX|$title|g" \
            -e "s|XXXsubjectXXX|$subject|g" \
            > "$tempfile_body"

        # SEND !
        cat "$tempfile_body" | mutt -F "$conf_mutt" -s "$subject" "$to" -e 'set content_type="text/html"' "${attachments[@]/#/-a}" --
        if [[ "$?" != 0 ]] ; then
            is_message_showed_welcome=1
            do_configure
            do_validate_sending
            # send again -this- email
            $FUNCNAME
        fi

    else

        # SEND !
        cat "$tempfile_body" | mutt -F "$conf_mutt" -s "$subject" "$to" "${attachments[@]/#/-a}" --
        if [[ "$?" != 0 ]] ; then
            is_message_showed_welcome=1
            do_configure
            do_validate_sending
            # send again -this- email
            $FUNCNAME
        fi
    fi

}
#===  FUNCTION  ================================================================
#          NAME:  do_validate_sending
#   DESCRIPTION:  validate if our set up email really works
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
do_validate_sending(){
    # pre {{{
    local result
    el_check_files "$conf_mutt"

    if ! el_dependencies_check "mutt" ; then
        el_dependencies_install "mutt,libsasl2-modules"
    fi

    if ! el_dependencies_check "curl" ; then
        el_dependencies_install "curl"
    fi

    # seems like we need this package in order to send emails from gmail
    if [[ ! -e "/usr/share/doc/libsasl2-modules/changelog.Debian.gz" ]] ; then
        el_dependencies_install "libsasl2-modules"
    fi

    if [[ -z "$random" ]] ; then
        random="$RANDOM$RANDOM$RANDOM"
        random="${RANDOM:0:8}"
    fi

    # }}}

    echo "This is a verification email send by your own computer, seems like it works so just delete or ignore me" | mutt -F "$conf_mutt" -s "testing elive email ($random)" "$email_account"
    #sleep 2

    for i in 1 2 3 4 5 6 7
    do
        result="$( curl -u "${email_account}:${email_password}" --silent "https://mail.google.com/mail/feed/atom" | sed -e 's|<entry>|\n\n<entry>|g' | grep "<entry>" | sed -e 's|^.*<title>||g' -e 's|</title>.*$||g' | head -3 )"

        if echo "$result" | grep -qs "testing elive email ($random)" ; then
            # succeed
            local message_success_sending
            message_success_sending="$( printf "$( eval_gettext "Email configuration is correctly working, you will found a testing email in your account, you can delete it." )" "" )"

            $guitool --info --text="$message_success_sending"

            # save our conf because we know that it works now
            echo "email_account=\"$email_account\"" >> "$conf"
            echo "email_password=\"$email_password\"" >> "$conf"
            echo "# References that needs to be updated: $HOME/.mutt/accounts/email-sender" >> "$conf"

            return 0
        else
            sleep 1
        fi
    done


    local message_cannot_send_email
    message_cannot_send_email="$( printf "$( eval_gettext "Seems like we cannot send or read emails from this account, is your username and password correctly set? You also need to have the POP and IMAP options activated in your email settings." )" "" )"
    $guitool --warning --text="$message_cannot_send_email"

    # configure pop / imap?
    local message_popimap
    message_popimap="$( printf "$( eval_gettext "Do you want to configure now the POP and IMAP options in your gmail account? You need them to be enabled." )" )"
    if $guitool --question --text="$message_popimap" ; then
        /etc/alternatives/x-www-browser "https://mail.google.com/mail/#settings/fwdandpop" &
        sleep 15
    fi


    local message_try_again
    message_try_again="$( printf "$( eval_gettext "Do you want to change the email or password that you have previously inserted?" )" )"
    local message_try_or_exit
    message_try_or_exit="$( printf "$( eval_gettext "Try again?" )" )"


    # change user and pass?
    if $guitool --question --text="$message_try_again" ; then
        unset email_account email_password
    else
        # just ask if we want to continue
        if ! $guitool --question --text="$message_try_or_exit" ; then
            exit 1
        fi
    fi




    # so try again
    do_configure
    do_validate_sending
}

#===  FUNCTION  ================================================================
#          NAME:  do_configure
#   DESCRIPTION:  configure email client
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
do_configure(){
    # pre {{{

    if ((is_configure_force)) ; then
        unset email_account email_password
    fi

    # }}}
    if [[ -z "$email_account" ]] ; then
        local message_intro
        message_intro="$( printf "$( eval_gettext "To send emails you need first to configure your email. Do you want to continue?" )" "" )"

        if ! ((is_message_showed_welcome)) ; then
            if $guitool --question --text="$message_intro" ; then
                is_message_showed_welcome=1
            else
                el_error "You didn't want to set up your email sending? ok..."
                exit 1
            fi
        fi

        local message_login
        message_login="$( printf "$( eval_gettext "Insert your Gmail account, for example: %s" )" "john.smith@gmail.com" )"

        # request username
        email_account="$( $guitool --entry --text="$message_login" || echo cancel )"


        local message_invalid
        message_invalid="$( printf "$( eval_gettext "Invalid entry, you need to use use a gmail account, for example '%s', please try again." )" "john.smith@gmail.com" )"

        # verify username inserted
        if [[ "${email_account}" = "cancel" ]] || ! echo "$email_account" | grep -qs "@gmail." || ! echo "$email_account" | grep -qs "@gmail." ; then
            $guitool --error --text="$message_invalid"

            email_account="$( $guitool --entry --text="$message_invalid" || echo cancel )"

            if [[ "${email_account}" = "cancel" ]] || ! echo "$email_account" | grep -qs "@gmail." || ! echo "$email_account" | grep -qs "@gmail." ; then
                exit 1
            fi
        fi
    fi


    # request password too
    if [[ -z "$email_password" ]] ; then
        local message_password
        message_password="$( printf "$( eval_gettext "Insert your email password" )" "" )"

        email_password="$( $guitool --entry --text="$message_password" || echo cancel )"

        if [[ "${email_password}" = "cancel" ]] ; then
            email_password="$( $guitool --entry --text="$message_password" || echo cancel )"

            if [[ "${email_password}" = "cancel" ]] ; then
                exit 1
            fi
        fi
    fi


    # cleanups
    rm -f "$conf"
    mkdir -p "$(dirname "$conf_mutt" )"
    rm -f "$conf_mutt"


    # configure client
    case $email_account in
        *@gmail*)
            echo "# stmp, sending of emails:" >> "${conf_mutt}"
            echo "set smtp_url = \"smtp://${email_account%%@*}@smtp.gmail.com:587/\"" >> "${conf_mutt}"
            echo "set smtp_pass = \"${email_password}\"" >> "${conf_mutt}"
            echo "set realname = \"${USER} from $(hostname) - Elive\"" >> "${conf_mutt}"

            ;;
        #*@yahoo*)
            # Well, we don't know how to verify if the sending works from a yahoo one so let's disable it for now
            #echo "# stmp, sending of emails:" >> "${conf_mutt}"
            #echo "set smtp_url = \"smtp://smtp.mail.${email_yahoo##*@}:587/\"" >> "${conf_mutt}"
            #echo "set from = \"${email_account}\"" >> "${conf_mutt}"
            #echo "set smtp_pass = \"${email_password}\"" >> "${conf_mutt}"

            #echo "email_account=\"$email_account\"" >> "$conf"
            #echo "email_password=\"$email_password\"" >> "$conf"
            #echo "# References that needs to be updated: $HOME/.mutt/accounts/email-sender" >> "$conf"
            #;;

        *)
            $guitool --error --text="Unknown email service provider, you should use a gmail account"
            ;;
    esac

}

#===  FUNCTION  ================================================================
#          NAME:  usage
#   DESCRIPTION:  shows usage help
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
usage(){
    echo -e "
    Usage: $(basename $0) args:

[sending options]:
-a attach_file (can be called multiple times, optional)
-t to
-s subject (optional)
-S super-subject (title message, optional)
-m message (can be file or text passed)
-T template to use (if you want to use, optional) [default|none]

[other options]
-c  configure: it sets up your email sending and then exits
-C  check:  checks if your sending of email works, and exits
-d  debug mode
-v  verbose mode

[modes]
- You can use this tool with -m 'message' or concatenating from the standard input
"

exit

}

main(){
    # pre {{{
    local conf

    # user conf
    conf="$HOME/.config/email-sender"
    conf_mutt="$HOME/.mutt/accounts/elive-sender"
    if [[ -s "$conf" ]] ; then
        source "$conf"
    fi

    if [[ ! -t 0 ]] ; then
        is_stdin=1
    fi

    # do not fill /tmp with visual trash
    TMPDIR="/tmp/.$(basename $0)-${USER}"
    mkdir -p "$TMPDIR"
    export TMPDIR

    # }}}

    # Usage
    if [[ -z "${1}" ]] ; then
        usage
    fi


    while getopts ":a:cCdhm:s:S:pt:T:v" opt; do
        case $opt in
            a)
                el_array_member_add "$OPTARG" "${attachments[@]}" ; attachments=("${_out[@]}")
                el_explain 2 "attached file: $OPTARG"

                echo -e "${attachments[@]}"

                ;;
            c)
                el_debug "configure mode"
                is_configure_force=1
                do_configure
                do_validate_sending
                exit

                ;;
            C)
                do_validate_sending
                exit

                ;;
            d)
                export EL_DEBUG=3

                ;;
            h)
                usage
                exit
                ;;

            p)
                is_plain_mode=1
                el_explain 2 "__plain__ mode selected"

                ;;
            m)
                message="$OPTARG"
                el_explain 2 "message is __${message}__"

                ;;
            s)
                subject="$OPTARG"
                el_explain 2 "subject is __${subject}__"

                ;;
            S)
                title="$OPTARG"
                el_explain 2 "Title is __${title}__"

                ;;
            v)
                export EL_DEBUG=2

                ;;
            t)
                to="$OPTARG"
                el_explain 2 "target (to) is __${to}__"

                ;;
            T)
                template="$OPTARG"
                el_explain 2 "template is __${template}__"

                ;;
            \?)
                el_error "Invalid option: -$OPTARG"
                usage
                exit 1
                ;;
            :)
                el_error "Option -$OPTARG requires an argument."
                usage
                exit 1
                ;;
        esac
    done

    # is our message from stdin ? use it
    if ((is_stdin)) ; then
        #message="$( cat 2>&1 | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" )"
        cat 2>&1 > "$tempfile_tmp"
        message="$tempfile_tmp"
    fi


    do_email_send

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
