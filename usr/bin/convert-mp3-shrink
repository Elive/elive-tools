#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
EL_REPORTS="1"
#el_make_environment


main(){
    # pre {{{
    local file from to rate logs returned

    # Usage
    if [[ -z "${2}" ]] ; then
        echo -e "Usage: $(basename $BASH_SOURCE) from-dir to-dir"
        exit 1
    fi


    from="${1%/}"
    shift
    to="${1%/}"
    shift

    if ! el_dependencies_check "lame" ; then
        el_dependencies_install lame
    fi

    if ! el_dependencies_check "eyeD3" ; then
        el_dependencies_install eyed3
    fi


    mkdir -p "$to"

    logs="/tmp/.$(basename $0)-${USER}-logs.txt"

    # }}}

    while read -ru 3 file
    do
        dest="${to}/$( dirname "$file" )"

        if [[ -s "$dest/$( basename "$file" )" ]] ; then
            el_explain 0 "skipping $(basename "$file" )"
            continue
        fi

        mkdir -p "$dest"
        rm -f "$logs"

        rate="$( eyeD3 --no-color "$file" 2>/dev/null | strings | grep "kb/s" | sed -e 's|^.*\[ ||g' -e 's|kb/s .*$||g' -e 's|~||g' )"


        if { [[ "$rate" -gt 160 ]] && [[ "$rate" -lt 350 ]] ; }  || [[ -z "$rate" ]] ; then
            #echo convert "$file"
            el_explain 0 "converting: $file"

            # v4 for a much more quality (flac converter)
            precache "$file" 1>/dev/null

            lame --vbr-new -V 3 -q 0 "$file" -o "$dest/$( basename "$file" )"  1>"$logs" 2>&1
            returned="$?"

            if grep -qsE "(Aborting layer . decode|illegal bit allocation value)" "$logs" ; then
                el_explain 0 "  MPEG-3 mode force: $(basename "$file" )"
                lame --vbr-new --mp3input -V 3 -q 0 "$file" -o "$dest/$( basename "$file" )"  1>"$logs" 2>&1
                returned="$?"
            fi

            if [[ "$returned" != 0 ]] ; then
                NOREPORTS=1 el_warning "error converting, using back original file..."
                cp -f "$file" "$dest"
                continue
            fi

            # file is bigger than original AND file is bigger than 800 kb (which should be broken in conversion) --> copy back the original one
            size_dest="$( du -s "$dest/$( basename "$file" )" | awk '{print $1}' )"
            size_orig="$( du -s "$file" | awk '{print $1}' )"

            # make it at least 200k smaller or ignore
            size_dest_extra="$(( $size_dest + 200 ))"

            el_debug "orig ${size_orig} vs dest ${size_dest} (${size_dest_extra})"

            if [[ "$size_dest_extra" -lt "$size_orig" ]] \
                && [[ "$( du -s "$dest/$( basename "$file" )" | awk '{print $1}' )" -gt 800 ]] ; then
                # add a visual mark (ls) to see that we have converted it
                #chmod +x "$dest/$( basename "$file" )"
                continue
            else
                if [[ "$( du -s "$dest/$( basename "$file" )" | awk '{print $1}' )" -gt 800 ]] ; then
                    el_explain 0 "Oops, resulting file was bigger, using copy instead"
                else
                    NOREPORTS=1 el_warning "Less than 800 kb, maybe broken file, copying back the original one"
                fi
                cp -f "$file" "$dest"
            fi

        else
            el_explain 0 "Using original file (already good sized): copied back '$(basename "$file" )'"
            cp -f "$file" "$dest"
        fi
    done 3<<< "$( find "$from" -type f -iname '*'.mp3 | sed -e 's|^\./||g' )"

    rm -f "$logs"
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
