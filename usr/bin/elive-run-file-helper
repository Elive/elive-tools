#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
EL_REPORTS="1"
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-tools"
export TEXTDOMAIN

not_supported(){
    local mime file

    mime="$1"
    shift
    file="$1"
    shift

    el_warning "mimetype '$mime' not implemented for '$file'\nls -la: $(ls -la "$file" )\nfile --mime-type: $(file --mime-type "$file")"
}

run_dmg(){
    local message_dmg
    message_dmg="$( printf "$( eval_gettext "DMG files belong to MacOS systems. You cannot use them in Linux, but we can open them in Elive so you can extract its contents. Do you want to open it now?" )" "" )"

    if $guitool --question --text="$message_dmg" ; then
        filename="$( basename "$file" )"

        if ! el_dependencies_check "7z" ; then
            el_dependencies_install "p7zip-full"
        fi

        mkdir "$(basename $file).EXTRACTED"
        cd "$(basename $file).EXTRACTED"

        7z x "../$( basename "${file}" )"
        # open thunar/fm in actual director
        xdg-open "$(pwd)"
    fi
}

run_edje(){
    local file
    file="$1"
    shift

    while read -ru 3 line
    do
        [[ "$line" = *"'e/theme/about'"* ]] && is_e_theme=1
        [[ "$line" = *"'e/modules/ibox/"* ]] && is_e_theme=1
        [[ "$line" = *"'e/desktop/background'"* ]] && is_e_wallpaper=1
        [[ "$line" = "0 groups in file"* ]] && is_e_invalid=1

    done 3<<< "$( LC_ALL="$EL_LC_EN" edje_player -G "$file" )"

    # uncompatible edje file
    if ((is_e_invalid)) ; then
        $guitool --error --text="$( eval_gettext "This EDJE file doesn't look to be compatible or we don't know its usage. Make sure that is compatible with your version of Enlightenment" )"
        return 0
    fi

    # only wallpaper
    if ((is_e_wallpaper)) && ! ((is_e_theme)) ; then
        # show a preview
        $precmd edje_player "$file"

        if $guitool --question --text="$( eval_gettext "Do you want to install this wallpaper?" )" ; then
            $precmd enlightenment_remote -desktop-bg-add-set "$file"
        fi

        return 0
    fi

    # full E theme
    if ((is_e_theme)) ; then
        if $guitools --question --text="$( eval_gettext "Do you want to install this theme?" )" ; then
            $precmd cp -f "$file" "$HOME/.e/e17/themes/"
            # update: seems like it doesn't works?
            #enlightenment_remote -theme-set
            $guitool --info --text="$( eval_gettext "You can now activate the new theme from the preferences menu. Note that they may be not always fully compatible, we suggest to use the Elive theme for compatibility, stability and features." )"

        fi

        return 0
    fi

    # still here? implement it
    $guitool --warning --text="$( eval_gettext "You are trying to run an EDJE file, but we don't know how to use it. Tell us about this type of file in the Elive forums so we can implement it" )"

    el_warning "Unknown EDJE purpose file: groups:\n$( edje_player -G "$file" )"
}

run_script(){
    local file mode

    mode="$1"
    shift
    file="$1"
    shift

    local message_done
    message_done="$( printf "$( eval_gettext "All operations are finished. You can close the terminal" )" "" )"


    # nvidia installer?
    if echo "$file" | grep -qsi "NVIDIA.*\.run$" ; then
        if $guitool --question --text="$( eval_gettext "Elive includes a much better and cleaner installer for the Nvidia drivers. Do you want to run it instead of the official Nvidia installer?" )" ; then
            if [[ -x "$( which urxvt )" ]] ; then
                $precmd gksu "urxvt -e bash -c '/usr/sbin/nvidia-privative-drivers-install'"
            else
                el_error "no urxvt found"
            fi

            #all done
            exit
        fi
    fi

    # warn user
    if ! $guitool --question --text="$( eval_gettext "You are going to execute a script, since a script can run arbitrary code in your machine, you should always verify that they comes from a confident author or source. Continue?" )" ; then
        return 0
    fi

    #el_config_get "is_user_warned_root"
    #if ! ((is_user_warned_root)) ; then
        #$guitool --info --text="$( eval_gettext "Important: sometimes these scripts needs administrator privileges, if is the case you need to right-click in the filemanager to enter in admin mode, then running the file from this new session." )"
        #is_user_warned_root=1
        #el_config_save "conf_is_user_warned_root"
    #fi

    if ! [[ "$UID" = 0 ]] ; then
        if $guitool --question --text="$( eval_gettext "Do you need administrator privileges to run this file? This is commonly needed if you are trying to install software or a driver in your system. We suggest to first try to run the file without the administrator privileges." )" ; then
            is_root_wanted=1
        fi
    fi

    if ! test -x "$file" ; then
        if $guitool --question --text="$( eval_gettext "Add executable permissions to the file?" )" ; then
            $precmd chmod +x "$file"
        else
            $guitool --error --text="$( eval_gettext "If the file has no executable permissions we cannot run it. Exiting..." )"
            return 1
        fi
    fi

    if [[ "$UID" = 0 ]] ; then
        # root run from a terminal
        if [[ -x "$( which urxvt )" ]] ; then
            $precmd urxvt -hold -e bash -c "$file ; apt-get -f install ; echo ; echo ; echo ${message_done}"
        else
            if readlink -f /etc/altenatives/x-terminal-emulator | grep -qs "terminology" ; then
                $precmd terminology -hold -e "${file} ; apt-get -f install ; echo ; echo ; echo ${message_done}"
            fi
        fi
    else
        # user mode
        if [[ -s "/etc/sudoers.d/sudo_nopasswd_packagers_$USER" ]] ; then
            # auto sudo
            if [[ -x "$( which urxvt )" ]] ; then
                if ((is_root_wanted)) ; then
                    $precmd urxvt -hold -e bash -c "gksu $file ; sudo apt-get -f install ; echo ; echo ; echo ${message_done}"
                else
                    $precmd urxvt -hold -e bash -c "$file ; sudo apt-get -f install ; echo ; echo ; echo ${message_done}"
                fi
            else
                if readlink -f /etc/altenatives/x-terminal-emulator | grep -qs "terminology" ; then
                    if ((is_root_wanted)) ; then
                        $precmd terminology -hold -e "gksu ${file} ; sudo apt-get -f install ; echo ; echo ; echo ${message_done}"
                    else
                        $precmd terminology -hold -e "${file} ; sudo apt-get -f install ; echo ; echo ; echo ${message_done}"
                    fi
                fi
            fi
        else
            # no sudo
            if [[ -x "$( which urxvt )" ]] ; then
                if ((is_root_wanted)) ; then
                    $precmd urxvt -hold -e bash -c "gksu $file ; echo ; echo ; echo ${message_done}"
                else
                    $precmd urxvt -hold -e bash -c "$file ; echo ; echo ; echo ${message_done}"
                fi
            else
                if readlink -f /etc/altenatives/x-terminal-emulator | grep -qs "terminology" ; then
                    if ((is_root_wanted)) ; then
                        $precmd terminology -hold -e "gksu ${file} ; echo ; echo ; echo ${message_done}"
                    else
                        $precmd terminology -hold -e "${file} ; echo ; echo ; echo ${message_done}"
                    fi
                fi
            fi
        fi
    fi
}


main(){
    # pre {{{
    local file

    # include simulate mode
    if [[ "$1" = "-s" ]] || [[ "$1" = "--simulate" ]] ; then
        is_simulate=1
        precmd="echo"
        shift
    fi

    # }}}

    for file in "$@"
    do
        file="$( LC_ALL="$EL_LC_EN" readlink -f "$file" )"
        dirname="$( dirname "$file" )"

        mime="$( LC_ALL="$EL_LC_EN" file -bi "$file" | sed -e 's|; charset.*$||g' )"

        # some fixes
        case "$mime" in
            "text/plain"|"application/octet-stream")
                unset mime

                # flatpak
                if echo "$file" | grep -qsi "\.flatpakref" ; then
                    # install dep
                    if ! el_dependencies_check "flatpak" ; then
                        el_dependencies_install "flatpak|gnome-software-plugin-flatpak"
                    fi
                fi

                # edje files are octets
                if echo "$file" | grep -qsi "\.edj" ; then
                    if edje_player -G "$file" | head -5 | grep -qs "group.*in file" ; then
                        mime="edj/edje"
                    fi
                fi

                # script files
                if [[ -z "$mime" ]] ; then
                    if head -1 "$file" | grep -qsE "^#!.*(bin/env |bin/)(bash|sh|dash|zsh)$" ; then
                        mime="text/x-shellscript"
                    fi
                fi
                if [[ -z "$mime" ]] ; then
                    if echo "$file" | grep -qsi ".*\.run" ; then
                        mime="text/x-shellscript"
                    fi
                fi
                if [[ -z "$mime" ]] ; then
                    if LC_ALL="$EL_LC_EN" file "$file" | grep -qsi "script.*text.*executable" ; then
                        mime="text/x-shellscript"
                    fi
                fi

                ;;
        esac

        # do not run empty mimes
        if ! [[ -n "$mime" ]] ; then
            $guitool --info --text="$( eval_gettext "This file doesn't have a Mimetype assigned, we cannot run or open something that we don't know how it should be run. This file is probably used for other purposes." )"
            exit
        fi

        # always do things from the dir itself
        cd "$dirname"

        # parse and run
        case "$mime" in
            "text/x-shellscript"|"application/x-executable")
                run_script "user" "$file"
                ;;
            "text/x-ruby"|"text/x-perl"|"text/x-awk"|"text/x-python")
                run_script "user" "$file"
                ;;
            "application/zlib")
                if echo "$file" | grep -qsi "\.dmg$" ; then
                    run_dmg "user" "$file"
                fi
                ;;
            "text/x-makefile")

                if [[ -x "$( which urxvt )" ]] ; then
                    $precmd urxvt -hold -e bash -c "make && echo -e \"\n\nCOMPILED\n\""
                fi
                ;;
            "edj/edje"|"application/x-extension-edj"|"application/edje")
                run_edje "$file"
                ;;
            *)
                # already supported by default list (they just works using thunar), tested with starting by application/
                if ! echo "$mime" | grep -qsE "(/.*debian.*package$|inode/directory)" ; then
                    not_supported "$mime" "$file"
                fi
                # run a default launcher in any of the cases!
                if [[ -x "/usr/bin/thunar" ]] ; then
                    $precmd thunar "$file"
                fi
                ;;
        esac
    done
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
