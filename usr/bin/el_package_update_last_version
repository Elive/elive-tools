#!/bin/bash
source /usr/lib/elive-tools/functions
el_set_display_variables

# translations
. gettext.sh
export TEXTDOMAIN="elive-tools"

main(){
    # pre {{{
    local packagename line package_version_installed package_version_newer_found_maybe url_package_dir url_repository version


    # Usage
    if [[ -z "${1}" ]] ; then
        echo -e "Usage: $(basename $BASH_SOURCE) packagename"
        exit 1
    fi

    packagename="${1}"
    url_repository="$( apt-cache madison ${packagename} | tr ' ' '\n' | grep http | head -1 )"

    # check internet
    if ! el_verify_internet ; then
	el_explain 1 "No internet found, ignoring checking of newer packages available"
	exit 1
    fi

    # check repo url
    if ! el_check_variables "url_repository" ; then
	el_error "no url found for ${packagename} package, ignoring check in $(basename $0)"
	exit
    fi

    if ! el_dependencies_check "apt-get,apt-cache,zenity,dpkg" ; then
	exit 1
    fi



    # }}}

    package_version_installed="$( LC_ALL=C  apt-cache policy "${packagename}" | grep "Installed:" | sed -e 's|^.*Installed: ||g' | head -1 )"

    # first pass, check if we can have a possible candidate (fuzzy mode) {{{
    while read -ru 3 line
    do
	url_package_dir="${url_repository%/}/${line%/*}/"

	# compare all teh versions found with a simple curl with the installed version
	while read -ru 3 version
	do
	    # cleanup var and url-decode it
	    read -r version <<< "$version"
	    #version="$( hURL -us --nocolor "$version" )"
	    version="$( printf "$( echo "$version" | sed -e 's|%|\\x|g' )" )"

	    if dpkg --compare-versions "${version}" gt "${package_version_installed}" 2>/dev/null ; then
		package_version_newer_found_maybe=1
	    fi
	done 3<<< "$( curl -s "${url_package_dir}" | grep href | sed -e 's|^.*href="||g' -e 's|".*$||g' | grep '\.deb$' | cut -d'_' -f2 | sort -u )"

    done 3<<< "$( apt-cache show "${packagename}" 2>/dev/null | grep "Filename:" | sed -e 's|^Filename: ||g' | sort -u )"



    # - first pass, check if we can have a possible candidate (fuzzy mode) }}}
    # checking results and deciding {{{
    # nothing found in a first shot?
    if ! ((package_version_newer_found_maybe)) ; then
	# return false if we have not updated or found anything
	exit 1
    fi


    # - checking results and deciding }}}

    el_aptget_update

    # install new package if found
    if el_package_newer_check "${packagename}" ; then

	local message_upgrade_please
	message_upgrade_please="$( printf "$( eval_gettext "Newer version found for %s, we suggest to update it, continue?" )" "$packagename" )"

	if [[ -n "$DISPLAY" ]] ; then
	    if zenity --question --text="$message_upgrade_please" ; then
		el_dependencies_install "$packagename"
		exit 0
	    fi
	else
	    if el_confirm "$message_upgrade_please" ; then
		su -c "apt-get install $packagename" root
		exit 0
	    fi
	fi
    else
	exit 1
    fi


}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
