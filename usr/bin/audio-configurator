#!/bin/bash
source /usr/lib/elive-tools/functions

. gettext.sh
export TEXTDOMAIN="elive-tools"

# set user home
[[ -z $HOME ]] && export HOME="/home/$(id -un)"

select_card_multiple(){
    local _id _description menu
    # list cards, per priority
    unset menu

    while read -ru 3 line
    do
        if [[ "$line" != *"]:"* ]] ; then
            continue
        fi

        _id="$( echo "$line" | sed -e 's|\]:.*$||g' -e 's|^.*\[||g' )"
        # remove extra leading blank chars
        read -r _id <<< "$_id"
        el_debug "id = '$_id'"

        _description="${line##*- }"
        # remove extra leading blank chars
        read -r _description <<< "$_description"
        el_debug "description = '$_description'"


        if [[ "$_id" ]] && [[ -n "$_description" ]] ; then

            # skip unwanted ones
            if ((is_smart_mode)) ; then
                # smart cards to skip: ThinkPad Console Audio Control
                if [[ "$_id" = "ThinkPadEC" ]] && [[ "$_description" = "ThinkPad Console Audio Control" ]] ; then
                    continue
                fi
            fi


            menu+=("$( echo "$_id" )")
            menu+=("$( echo "$_description" )")
        fi
    done 3<<< "$( cat /proc/asound/cards | psort -- -p "EWX" -p "PCH" -p "USB" -p "DAC" -p "Intel" -p "SB16" -p "CS4236" | grep -v "at 0x.*irq" )"

    if [[ "${#menu[@]}" -eq 2 ]] ; then
        selection="$( echo "${menu[0]}" | head -1 )"
        is_auto_mode=1
    else
        selection="$( $guitool --list --width=400 --height=240 --column="Identifier" --column="$( eval_gettext "Description" )" --text="$( eval_gettext "Select the desired audio card that you want to use as default" )" "${menu[@]}" || echo cancel )"
    fi

    # remove extra leading blank chars
    read -r selection <<< "$selection"

    if [[ "${selection}" = "cancel" ]] ; then
        return 1
    fi
}

main(){
    # pre {{{
    local list_cards number_cards selection guitool line is_auto_mode is_quiet_mode

    if ! el_dependencies_check zenity ; then
        if ! el_dependencies_install zenity ; then
            exit 1
        fi
    fi

    # }}}

    # NOTE: this is a temporal tool, a lot of improvements will be made about this, so don't try to improve this one

    guitool=zenity

    list_cards="$(cat /proc/asound/cards | grep "^.*[[:digit:]].*\[.*\]:" | grep -v "at 0x.*irq" | sed -e 's|\]:.*$||g' -e 's|^.*\[||g')"

    # if our first argument is the card name to use, change the list of cards to use this one
    # try to be smart determining cards that we know that they are valid
    for arg in "$@"
    do
        if [[ "$arg" = "--smart" ]] ; then
            is_smart_mode=1
            shift
        fi
        if [[ "$arg" = "--auto" ]] ; then
            is_auto_mode=1
            shift
        fi
        if [[ "$arg" = "--quiet" ]] ; then
            is_quiet_mode=1
            shift
        fi
        # if first argument is the name of the card that we want to use itself
        if [[ -n "$arg" ]] && [[ "$arg" != -* ]] ; then
            if echo "$list_cards" | grep -qs -- "$arg" ; then
                list_cards="$arg"
            fi
        fi
        if [[ "$arg" = "--help" ]] ; then
            echo -e "Usage: $(basename $0) without arguments allows you to select the audio card to use"
            echo -e "--smart: performs a smart way to detect the correct audio card to use"
            echo -e "--auto: automatically selects the audio card to use"
            echo -e "--quiet: silent mode, not interactive at all"
            echo -e "NAME: this allows to configure the audio card to the given parameter name of the audio card to use"
            exit
        fi
    done

    # no cards found
    if [[ -z "$list_cards" ]] ; then
        rm -f "${HOME}/.asoundrc"

        # reconfigure alsa.conf to defaults to correctly work, only if is not a number value
        if [[ "$UID" = 0 ]] ; then
            sed -i "s|^defaults.ctl.card.*$|defaults.ctl.card 0|g" /usr/share/alsa/alsa.conf
            sed -i "s|^defaults.pcm.card.*$|defaults.pcm.card 0|g" /usr/share/alsa/alsa.conf
        fi

        $guitool --warning --text="$( eval_gettext "No audio cards were detected in your system. We suggest you to try a different kernel version to see if it has drivers for it." )"

        exit
    fi

    number_cards="$( echo -e "$list_cards" | wc -l )"

    # only one card found
    if [[ "$number_cards" -eq "1" ]] ; then
        selection="$list_cards"
        # remove extra leading blank chars
        read -r selection <<< "$selection"

    else
        # more than one card found
        if ((is_auto_mode)) ; then

            el_dependencies_check "psort"

            # detect the optimal card based in their number of tracks
            if ((is_smart_mode)) ; then
                read -r selection <<< "$selection"

                while read -ru 3 line ; do
                    rm -f "${HOME}/.asoundrc"
                    echo "defaults.ctl.card ${line}" >> "${HOME}/.asoundrc"
                    echo "defaults.pcm.card ${line}" >> "${HOME}/.asoundrc"

                    array_cards="$( echo -e "${array_cards}" ; amixer | grep -i "Simple mixer control" | wc -l ) :: $line"

                done 3<<< "$( echo "$list_cards" | tr ' ' '\n' | psort -- -p "^ThinkPadEC" -p "^NVidia" -p "midi" -p "MIDI" -p "^VX-5000" -p "^VX5000" -p "^Webcam" -p "^Dummy" -p "^HDMI" -p "system" -p "Modem" | sed -e '/^$/d' | tac  )"

                # select the card that has most tracks
                # first detect the max number of tracks
                selection_number="$( echo "${array_cards}" | sort -g | tail -1 | sed -e 's| :: .*$||g' )"
                # now pick the card with same max tracks by prior, like if we have MID and ThinkPadEC both as 2 (pulseaudio?) like in Venus computer
                selection="$( echo "${array_cards}" | sort -g | grep "${selection_number} :: " | sed -e 's|^.* :: ||g' | psort -- -p "^ThinkPadEC" -p "^NVidia" -p "midi" -p "MIDI" -p "^VX-5000" -p "^VX5000" -p "^Webcam" -p "^Dummy" -p "^HDMI" -p "system" -p "Modem" | sed -e '/^$/d' | tail -1  )"

                if [[ "$( echo "${array_cards}" | sort -g | grep -vE "^(1|2|3|4) ::" | sed '/^$/d' | wc -l )" -gt 1 ]] ; then
                    $guitool --warning --text="$( eval_gettext "Seems like you have multiple audio cards, Elive has a smart way to detect the correct one to use, but if has not been the case please reconfigure your audio card from the applications menus of Elive." )"
                fi

            else
                selection="$(echo "$list_cards" | tr ' ' '\n' | psort -- -p "^ThinkPadEC" -p "^NVidia" -p "midi" -p "MIDI" -p "^VX-5000" -p "^VX5000" -p "^Webcam" -p "^Dummy" -p "^HDMI" -p "system" -p "Modem" | tac | head -1 )"
                read -r selection <<< "$selection"
            fi


        else
            if select_card_multiple ; then
                is_multiple_cards=1
            else
                if [[ -s "$HOME/.asoundrc" ]] ; then
                    exit
                else
                    unset is_multiple_cards
                    is_auto_mode=1
                fi
            fi
        fi

    fi

    # cleanup, new conf
    rm -f "${HOME}/.asoundrc"

    # user's conf
    if [[ -e "$DHOME/.shared-home" ]] ; then
        if $guitool --question --text="$( eval_gettext "Your home is shared with another system, if you try to configure your audio card it may not work in your other system. In such a case you will need to remove the .asoundrc file later. Do you want to continue?" )" ; then
            echo "defaults.ctl.card ${selection}" >> "${HOME}/.asoundrc"
            echo "defaults.pcm.card ${selection}" >> "${HOME}/.asoundrc"
        fi
    else
        echo "defaults.ctl.card ${selection}" >> "${HOME}/.asoundrc"
        echo "defaults.pcm.card ${selection}" >> "${HOME}/.asoundrc"
    fi

    # reconfigure alsa.conf to our audio card
    if [[ "$UID" = 0 ]] && ! echo "$selection" | grep -qs "^[[:digit:]]*$" ; then
        sed -i "s|^defaults.ctl.card.*$|defaults.ctl.card ${selection}|g" /usr/share/alsa/alsa.conf
        sed -i "s|^defaults.pcm.card.*$|defaults.pcm.card ${selection}|g" /usr/share/alsa/alsa.conf
    fi

    # set microphone default
    if ! ((is_auto_mode)) && ! [[ -e "$DHOME/.shared-home" ]] ; then
        if ((is_multiple_cards)) ; then
            if ! $guitool --question --text="$( eval_gettext "Use the same audio card for your microphone?" )" ; then
                select_card_multiple

                cat >> "${HOME}/.asoundrc" << EOF

pcm.mic
{
    type hw
    card ${selection}
}

pcm.!default
{
    type asym
    playback.pcm
    {
        type plug
        slave.pcm "dmix"
    }
    capture.pcm
    {
        type plug
        slave.pcm "mic"
    }
}
EOF

            #else

                #local translated_message
                #translated_message="$( printf "$( eval_gettext "Using default card %s for your microphone" )" "$selection" )"

                #$guitool --info --text="$translated_message"
            fi

            # TODO: include a way to detect if mic is working, etc... maybe more easy to implement it on the C future mixer code
            #$guitool --info --text="$( eval_gettext "If you experience noise in your speakers, or your microphone doesn't capture anything, just play with the settings in your audio card mixer. Sometimes you need to enable the capture mode or set it to the microphone for make it working, and sometimes the microphone is repeated to your audio card giving you echo or noise, you can solve those problems trying different settings" )"

        fi

        if ! ((is_quiet_mode)) ; then
            $guitool --info --text="$( eval_gettext "Your audio card has been configured. To raise and lower the volume, use your keyboard hotkeys. If they do not work you can configure them in your Enlightenment hotkey preferences." )"
        fi

    fi
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

