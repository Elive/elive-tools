#!/bin/bash
source /usr/lib/elive-tools/functions

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"

exit_ok(){
    rm -f "$lockfile"
}
exit_error(){
    rm -f "$lockfile"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    el_debug "$(basename $0) already running"
    exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
# INFO signals:
# 0 EXIT: when program finishes
# 1 HUP: loss of terminal
# 2 INT: is ^C
# 3 QUIT: ^d quit from keyboard
# 4 ILL: illegal instruction
# 5 TRAP: breakpoints
# 6 ABRT: abort
# 7 BUS: hardware problem
# 8 FPE: wrong math operation
# 9 KILL: uncatcheable / unstopable
# 10 USR1: customizable
# 13 PIPE: broken pipe
# 14 ALMR: timers
# 15 TERM: termination
# 17 CHLD: children monitor
# 20 TSTP: ^z
# 24 XCPU: too much cpu consumption
# 28 WINCH: window resize
trap "exit_ok" EXIT
#trap "exit_error" 1 3 5 6 14 15 ERR
trap "exit_error" 1 3 5 6 14 ERR

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}


main(){

    # Kill any running nm-applet instances (ignore errors)
    killall nm-applet 2>/dev/null || true

    # Start nm-applet in the background with the popup option
    ( nm-applet --popup & )

    # Wait for 6 minutes
    sleep 6m

    # Kill nm-applet again after the sleep (ignore errors)
    killall nm-applet 2>/dev/null || true
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
