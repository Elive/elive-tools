#!/bin/bash
el_c_n="\033[0;39m" # Normal color  (orig: normal)
el_c_r="\033[1;31m" # Red color  (orig: red)
el_c_r2="\033[0;31m" # Red2 color  (orig: red)
el_c_g="\033[1;32m" # Green color  (orig: green)
el_c_g2="\033[0;32m" # Green2 color  (orig. green2)
el_c_y="\033[1;33m" # Yellow color  (orig. yellow)
el_c_y2="\033[0;33m" # Yellow2 color  (orig. yellow)
el_c_m="\033[1;35m" # Magenta color
el_c_m2="\033[0;35m" # Magenta2 color
el_c_c="\033[1;36m" # Cyan color
el_c_c2="\033[0;36m" # Cyan2 color
el_c_b="\033[1;34m" # Blue color
el_c_b2="\033[0;34m" # Blue2 color
el_c_gr="\033[1;30m" # Gray color
el_c_gr2="\033[0;30m" # Gray2 color

el_c_blink="\033[5m" # Blink 'color' effect  (orig. blink)
el_c_underline="\033[4m" # Underline 'color' effect  (orig. underline)
el_c_italic="\033[3m" # Italic 'color' effect
el_c_bold="\033[1m" # Bold 'color' effect

: "${EL_DEBUG:="0"}" # debug default level

set -e

case "$( cat /etc/debian_version )" in
    12.*|"bookworm"*)
        is_bookworm=1
        ;;
    11.*|"bullseye"*)
        is_bullseye=1
        is_old_rdiff=1
        ;;
    10.*|9.*|8.*)
        is_old_rdiff=1
        ;;
    # *)
    #     is_new=1
    #     ;;
esac

if ! ((is_old_rdiff)) ; then
    rdiff_opts="--terminal-verbosity 2"
fi

# if we have the original and updated functions, use them (so: we are in elive)
if [[ -s /usr/lib/elive-tools/functions ]] ; then
    source /usr/lib/elive-tools/functions
    el_make_environment
fi

check_files_owner_compatibility(){
    local dir
    # check for files that are not owned by you so it can cause problems using this tool
    for dir in "$@"
    do
        if [[ -d "$dir" ]] ; then
            el_debug "checking for files not owned by you in '$dir'"

            if [[ "$( find "$dir" ! -user "$USER" 2>/dev/null | wc -l )" -gt 0 ]] && [[ "$UID" != 0 ]] ; then
                echo ""
                echo ""
                el_error "These files can give problems:"
                find "$dir" ! -user "$USER" 2>/dev/null

                echo ""
                EL_DEBUG=2 el_warning "Files owned by someone else found"
                el_info "We suggest to configure your sudo to NOPASSWD so this tool can use it, this is important because you are trying to deal with a directory that has files owned not by you and this can cause problems like owners changed on these files when restoring it"
                el_info "Configuration example: add your user to the sudo group and an entry to your /etc/sudoers like:"
                #el_info "$USER ALL=NOPASSWD: /usr/bin/apt-get install"
                #el_info "$USER ALL=NOPASSWD: /usr/bin/apt-get*"
                el_info "$USER ALL=NOPASSWD: /usr/bin/bkp"
                echo ""

                # we have informed so we can finish here
                break
            fi
        fi
    done
}

do_sudo(){
    # run something as sudo, but if fails warn it
    if ! $SUDO_MODE "$@" ; then
        el_error "Unable to run \"$*\""
        el_info "this could be caused by lack of permissions in the files, a solution is to configured a NOPASSWD mode of sudo for your user and this will will use it"
        return 1
    else
        return 0
    fi
}



do_work(){
    # this feature does a temporal copy of the directory for work from it,
    # everything is erased after the logout
    local dir tmpdir

    dir="$( pwd )"
    tmpdir="${bkpdir_works}/${namedir}"

    do_sudo rm -rf "${tmpdir}"
    mkdir -p "${tmpdir}"
    rmdir "${tmpdir}" # remove last dir in order to really-copy here

    cp -a "${dir}" "${tmpdir}"

    cd "${tmpdir}"

    echo -e "You are now in a sandbox copy where you can modify safely these files"
    echo -e "Your modifications will be merged or erased after you finish"
    el_explain 0 "logout from the shell for finish your working state"

    # entering in new shell
    $SHELL || true
    # go back
    cd "$target"

    if el_confirm "Do you want to run meld with your previous working state?" ; then
        if ! el_dependencies_check meld ; then
            if ! el_dependencies_install meld ; then
                el_error "Install required dependencies"
            fi
        fi
        meld "${tmpdir}" .
    fi
    do_sudo rm -rf "${tmpdir}"

}

do_purge_olds(){
    local others_list_num

    others_list_num="$( ls -1 "${bkpdir_backups}" 2>/dev/null | wc -l )"

    # remove backups
    if [[ -d "${bkpdir_backups}" ]] ; then
        do_sudo rm -rf "${bkpdir_backups}/%"*
    fi
    # remove working states
    if [[ -d "${bkpdir_works}" ]] ; then
        do_sudo rm -rf "${bkpdir_works}/%"*
    fi


    echo -e "${el_c_y}All backups and workstates removed${el_c_n}  [${others_list_num}]"
}


do_save(){
    local version others_list_num ref

    mkdir -p "${bkpdir_backups}"

    # show old existing backups
    if ! ((is_quiet)) ; then
        others_list_num="$( ls -1 "${bkpdir_backups}" 2>/dev/null | grep "\.rdiff$" | wc -l )"
        if [[ "$others_list_num" -gt 5 ]] ; then
            echo -e "Warning: other backups found:"
            while read -ru 3 line
            do
               ref="${line//%//}"
               ref="${ref%.rdiff*}"
               if [[ -d "${ref}" ]] ; then
                   echo -e " * ref: ${el_c_c}${ref}${el_c_n}"
               else
                   echo -e " * ref: ${el_c_r2}${ref}${el_c_n}"
               fi

            done 3<<< "$( ls -1 "${bkpdir_backups}" | grep "\.rdiff$" )"

            echo -e ""
            echo -e "To remove single entry's just enter in the dir and run: ${el_c_g}$(basename $0) ${el_c_m}remove${el_c_n}"
            echo -e "You can remove ALL in one shot with: ${el_c_g}$(basename $0) ${el_c_y}purge${el_c_n}\n"
        fi
    fi

    if ! [[ -d "$bkpdir_id" ]] ; then
        mkdir -p "$bkpdir_id"
    fi

    echo -ne "Saving..."

    #      rsync -av --delete "${target}/" "${bkpdir_id}/"
    check_files_owner_compatibility "${1}/"
    if ((is_old_rdiff)) ; then
        do_sudo rdiff-backup "${1}/" "${2}/"
    else
        do_sudo rdiff-backup $rdiff_opts backup "${1}/" "${2}/"
    fi

    if ((is_old_rdiff)) ; then
        version="$( do_sudo rdiff-backup -l --parsable-output "$2" | wc -l )"
    else
        version="$( do_sudo rdiff-backup --parsable-output list increments "$2" | wc -l )"
    fi

    echo -e "\r\033[K${el_c_g}Saved${el_c_n}  [${version}]"
    #echo -e "${el_c_g}Saved${el_c_n} $(du -hs ${2} | awk '{print $1}')"

}


do_get(){
    local version history_num
    cd "${2}"

    if ! [[ -d "$bkpdir_id" ]] ; then
        echo -e "E: dir $bkpdir_id not exists, not backup saved yet ?"
        exit 1
    fi

    if [[ -n "$3" ]] ; then
        history_num="$3"
    else
        history_num="1"
    fi

    if ((is_quiet)) ; then
        echo -ne "Recovering..."
    fi

    if ((is_old_rdiff)) ; then
        version="$( do_sudo rdiff-backup -l --parsable-output "$1" | awk '{print $1}' | tail -${history_num} | head -1 )"
    else
        version="$( do_sudo rdiff-backup --parsable-output list increments "$1" | awk '{print $1}' | tail -${history_num} | head -1 )"
    fi

    el_check_variables "version"

    do_sudo rm -rf "${1}.get"

    #check_files_owner_compatibility "${1}" # we don't need to check a dir to restore, so we have checked it at saving
    if ((is_old_rdiff)) ; then
        do_sudo rdiff-backup -r "$version" "${1}/" "${1}.get/"
    else
        do_sudo rdiff-backup restore --at "$version" "${1}/" "${1}.get/"
    fi

    if ((is_quiet)) ; then
        do_sudo rsync -aq --delete "${1}.get/" "${2}/"
        echo -e "\r\033[KRecovered      "
    else
        do_sudo rsync -av --delete "${1}.get/" "${2}/"
    fi

    cd "${2}"

}


do_list(){
    if [[ -d "$1" ]] ; then
        if ((is_old_rdiff)) ; then
            do_sudo rdiff-backup -l "${1}"
            echo ""
            do_sudo rdiff-backup --parsable-output -l "${1}"
        else
            do_sudo rdiff-backup list increments "${1}"
            echo ""
            do_sudo rdiff-backup --parsable-output list increments "${1}"
        fi
    else
        el_info "no backups found for this directory"
    fi
}


do_meld(){
    local version history_num

    if ! [[ -d "$bkpdir_id" ]] ; then
        echo -e "E: dir $bkpdir_id not exists, not backup saved yet ?"
    fi

    if ! el_dependencies_check meld ; then
        if ! el_dependencies_install meld ; then
            el_error "Install required dependencies"
        fi
    fi

    if [[ -n "$3" ]] ; then
        history_num="$3"
    else
        history_num="1"
    fi

    if ((is_old_rdiff)) ; then
        version="$( do_sudo rdiff-backup -l --parsable-output "$1" | awk '{print $1}' | tail -${history_num} | head -1 )"
    else
        version="$( do_sudo rdiff-backup --parsable-output list increments "$1" | awk '{print $1}' | tail -${history_num} | head -1 )"
    fi

    el_check_variables "version"

    do_sudo rm -rf "${1}.differ"
    if ((is_old_rdiff)) ; then
        do_sudo rdiff-backup -r "$version" "${1}/" "${1}.differ/"
    else
        do_sudo rdiff-backup restore --at "$version" "${1}/" "${1}.differ/"
    fi

    echo -e "\n\n${el_c_y}###############################################################${el_c_n}\n"

    do_sudo meld "${1}.differ/" "${2}/"

    do_sudo rm -rf "${1}.differ"

    cd "${2}"
}


do_diff(){
    local version history_num

    if ! [[ -d "$bkpdir_id" ]] ; then
        echo -e "E: dir $bkpdir_id not exists, not backup saved yet ?"
    fi

    if [[ -n "$3" ]] ; then
        history_num="$3"
    else
        history_num="1"
    fi

    if ((is_old_rdiff)) ; then
        version="$( do_sudo rdiff-backup -l --parsable-output "$1" | awk '{print $1}' | tail -${history_num} | head -1 )"
    else
        version="$( do_sudo rdiff-backup --parsable-output list increments "$1" | awk '{print $1}' | tail -${history_num} | head -1 )"
    fi

    el_check_variables "version"

    do_sudo rm -rf "${1}.differ"

    if ((is_old_rdiff)) ; then
        do_sudo rdiff-backup -r "$version" "${1}/" "${1}.differ/"
    else
        do_sudo rdiff-backup restore --at "$version" "${1}/" "${1}.differ/"
    fi

    #echo -e "\n\n${el_c_y}###############################################################${el_c_n}\n"

    #diff -Naur --exclude=".git" "${1}.differ/" "${2}/" | strings | sed -e "s|--- ${1}.differ|--- a|g" -e "s|+++ ${2}|+++ b|g" | colordiff
    # seems like "strings" eat words, but maybe we need it?
    diff -Naur --exclude=".git" "${1}.differ/" "${2}/" | sed -e "s|--- ${1}.differ|--- a|g" -e "s|+++ ${2}|+++ b|g" | colordiff

    #if [[ -n "$( which lsdiff )" ]] ; then
        #echo -e "\n ${el_c_y}Total different files:${el_c_n} $( diff -Naur --exclude=".git" "${1}.differ/" "${2}/" | lsdiff | wc -l )"
        #diff -Naur --exclude=".git" "${1}.differ/" "${2}/" | lsdiff | sed 's|^.*rdiff\.differ/||g'
    #else
        local _different_files
        _different_files="$( diff -Naur --exclude=".git" "${1}.differ/" "${2}/" | sed -r -e "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" -e "s/\x0f//g" | grep '^\-\-\-\s' | wc -l )"
        echo -e "\n ${el_c_y}Total different files:${el_c_n} $_different_files" 1>&2
        diff -Naur --exclude=".git" "${1}.differ/" "${2}/" | sed -r -e "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" -e "s/\x0f//g" | grep '^\-\-\-\s' | sed -r -e 's|^.*rdiff\.differ/||g' -e 's|([[:digit:]]{4})-([[:digit:]]{2})-([[:digit:]]{2}).*$||g' 1>&2
    #fi

    do_sudo rm -rf "${1}.differ"

    cd "${2}"
}


do_diff_reverse(){
    local version history_num

    if ! [[ -d "$bkpdir_id" ]] ; then
        echo -e "E: dir $bkpdir_id not exists, not backup saved yet ?"
    fi

    if [[ -n "$3" ]] ; then
        history_num="$3"
    else
        history_num="1"
    fi

    if ((is_old_rdiff)) ; then
        version="$( do_sudo rdiff-backup -l --parsable-output "$1" | awk '{print $1}' | tail -${history_num} | head -1 )"
    else
        version="$( do_sudo rdiff-backup --parsable-output list increments "$1" | awk '{print $1}' | tail -${history_num} | head -1 )"
    fi

    el_check_variables "version"

    do_sudo rm -rf "${1}.differ"
    if ((is_old_rdiff)) ; then
        do_sudo rdiff-backup -r "$version" "${1}/" "${1}.differ/"
    else
        do_sudo rdiff-backup restore --at "$version" "${1}/" "${1}.differ/"
    fi

    #echo -e "\n\n${el_c_y}###############################################################${el_c_n}\n"

    diff -Naur --exclude=".git" "${2}/" "${1}.differ/" | strings | sed -e "s|+++ ${1}.differ|+++ a|g" -e "s|--- ${2}|--- b|g" | colordiff

    #if [[ -n "$( which lsdiff )" ]] ; then
        #echo -e "\n ${el_c_y}Total different files:${el_c_n} $( diff -Naur --exclude=".git" "${2}/" "${1}.differ/" | lsdiff | wc -l )"
        #diff -Naur --exclude=".git" "${2}/" "${1}.differ/" | lsdiff | sed 's|^.*rdiff\.differ/||g'
    #else
        local _different_files
        _different_files="$( diff -Naur --exclude=".git" "${2}/" "${1}.differ/" | sed -r -e "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" -e "s/\x0f//g" | grep '^\-\-\-\s' | wc -l )"
        echo -e "\n ${el_c_y}Total different files:${el_c_n} $_different_files" 1>&2
        diff -Naur --exclude=".git" "${2}/" "${1}.differ/" | sed -r -e "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" -e "s/\x0f//g" | grep '^\-\-\-\s' | sed -r -e 's|^.*rdiff\.differ/||g' -e 's|([[:digit:]]{4})-([[:digit:]]{2})-([[:digit:]]{2}).*$||g' 1>&2
    #fi

    do_sudo rm -rf "${1}.differ"

    cd "${2}"
}


do_remove(){
    cd "$2"

    if [[ -d "${1}" ]] ; then
        do_sudo rm -rf "${1}"
        do_sudo rm -rf "${1}."*

        echo -e "${el_c_r}Removed dir ${el_c_y}${1}${el_c_n}"
    else
        echo -e "${el_c_r}E: ${el_c_n}Already removed ?"
    fi
}



main(){
    # pre {{{
    local tool namedir bkpdir_id target history_num

    tool="$(basename $0)"
    namedir="$( pwd )"
    namedir="${namedir//\//%}"
    if [[ -n $XDG_CACHE_HOME ]] ; then
        bkpdir_main="${XDG_CACHE_HOME}/${tool}"
    else
        bkpdir_main="${HOME}/.cache/${tool}"
    fi
    bkpdir_backups="${bkpdir_main}/backups"
    bkpdir_works="${bkpdir_main}/working"
    bkpdir_id="${bkpdir_backups}/${namedir}.rdiff"
    target="$( pwd )"

    # TODO: delete
    if [[ -d "${HOME}/.${tool}.backups" ]] ; then
        el_warning "you still having the old dir for backups, remove it entirely: ${HOME}/.${tool}.backups"
    fi


    if [[ -L "$target" ]] ; then
        target="$( readlink -f "$target" )"
    fi

    # do we have automated access to sudo ? use sudo
    if el_check_sudo_automated 2>/dev/null ; then
        SUDO_MODE="sudo"
    else
        SUDO_MODE=""
    fi



    if ! el_dependencies_check "rsync|rdiff-backup|diff|colordiff" ; then
        if ! el_dependencies_install "rsync|rdiff-backup|diffutils|colordiff" ; then
            el_error "Install required dependencies"
        fi
    fi

    el_check_variables "tool|namedir|bkpdir_id|target"
    el_check_dirs      "${target}"


    # }}}

    for arg in "$@"
    do
        case "$arg" in
            --quiet|-q)
                is_quiet=1
                shift
                ;;
            work|w|-w)
                do_work
                shift
                ;;
            save|s|-s|--save)
                do_save "${target}" "${bkpdir_id}"
                shift
                ;;
            get|g|-g|--get)
                do_get "${bkpdir_id}" "${target}" "$2"
                if [[ -n "$2" ]] ; then
                    shift
                fi
                shift
                ;;
            list|l|-l|--list)
                do_list "${bkpdir_id}"
                shift
                ;;
            diff)
                do_diff "${bkpdir_id}" "${target}" "${2}"
                if [[ -n "$2" ]] ; then
                    shift
                fi
                shift
                ;;
            diff-reverse)
                do_diff_reverse "${bkpdir_id}" "${target}" "${2}"
                if [[ -n "$2" ]] ; then
                    shift
                fi
                shift
                ;;
            meld)
                do_meld "${bkpdir_id}" "${target}" "${2}"
                if [[ -n "$2" ]] ; then
                    shift
                fi
                shift
                ;;
            remove|-r)
                do_remove "${bkpdir_id}" "${target}"
                shift
                ;;
            forget)
                el_error "did you mean remove?"
                shift
                exit 1
                ;;
            purge)
                do_purge_olds "${bkpdir_backups}"
                shift
                ;;
        esac
    done



}

# Usage
if [[ -z "${1}" ]] ; then
    echo -e "Usage: $(basename $BASH_SOURCE) save | get {n} | list | diff {n} | meld {n} | remove | purge | work"
    echo -e "               extra options: diff-reverse {n}"
    echo -e "  where [n] is the number of previously historied backup"
    exit 1
fi



#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
