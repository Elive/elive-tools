#!/bin/bash
source /usr/lib/elive-tools/functions
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-tools"
export TEXTDOMAIN

exit_me(){
    rm -rf "${tempdir}"
    exit 1
}

trap "exit_me 0" 1 2 5 15


# http://www.alfredklomp.com/programming/shrinkpdf
# Licensed under the 3-clause BSD license:
#
# Copyright (c) 2014, Alfred Klomp
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


shrink(){
    ghostscript                  \
      -q -dNOPAUSE -dBATCH -dSAFER      \
      -sDEVICE=pdfwrite         \
      -dCompatibilityLevel=1.3      \
      -dPDFSETTINGS=/screen         \
      -dEmbedAllFonts=true          \
      -dSubsetFonts=true            \
      -dColorImageDownsampleType=/Bicubic   \
      -dColorImageResolution=72     \
      -dGrayImageDownsampleType=/Bicubic    \
      -dGrayImageResolution=72      \
      -dMonoImageDownsampleType=/Bicubic    \
      -dMonoImageResolution=72      \
      -sOutputFile="$2"         \
      "$1" || { zenity --error ; exit 1 ; }
}

check_smaller(){
    # If $1 and $2 are regular files, we can compare file sizes to
    # see if we succeeded in shrinking. If not, we copy $1 over $2:
    if [ ! -f "$1" -o ! -f "$2" ]; then
        return 0;
    fi

    ISIZE="$(echo $(wc -c "$1") | cut -f1 -d\ )"
    OSIZE="$(echo $(wc -c "$2") | cut -f1 -d\ )"

    if [ "$ISIZE" -lt "$OSIZE" ]; then
        echo "# Input smaller than output, doing straight copy" >&2
        sleep 2
        cp "$1" "$2"
    fi
}

usage(){
    echo "Reduces PDF filesize by lossy recompressing with Ghostscript."
    echo "Not guaranteed to succeed, but usually works."
    echo "  Usage: $1 infile [outfile]"
    exit
}


# Need an input file:
if [ -z "$1" ]; then
    usage "$0"
    exit 1
fi


main(){
    # pre {{{
    local file PROCESS NUMBER_OF_FILES ARTIST TITLE ALBUM GENRE TRACKNUMBER DATEYEAR file_dest_dir GENRE_NUM GENRE_NUM2 is_delete_original PROGRESS filename tempdir extension
    # How many files to make the progress bar
    PROGRESS=0
    NUMBER_OF_FILES="$#"

    guitool=zenity
    tempdir="/tmp/.${USER}-audio-converter-$$"


    # }}}

    if [[ -z "$@" ]] ; then
        $guitool --error --text="$( eval_gettext "No files provided to convert" )"
        exit 1
    fi

    let "INCREMENT=10000000/$NUMBER_OF_FILES"

    mkdir -p "$tempdir"

    file_dest_dir="$(pwd)/Reconverted_PDFs"

    mkdir -p "$file_dest_dir"

    local message_quality_select
    message_quality_select="$( printf "$( eval_gettext "Select a quality" )" )"


    #quality="$( $guitool --list --height=220 --width=410 --text="$( eval_gettext "Select a quality" )" --column="Id" --column="$( eval_gettext "Quality" )" 1 "$( eval_gettext "Low resolution images, high compressed" )" 2 "$( eval_gettext "Medium resolution images" )" 3 "$( eval_gettext "High resolution images, low compression"  )" )"
    quality="$( $guitool --list --height=190 --width=440 --text="$message_quality_select" --column="Id" --column="$( eval_gettext "Quality" )" 1 "$( eval_gettext "Low quality, smallest size, slow to convert" )" 2 "$( eval_gettext "High quality, biggest size, fast"  )" )"

    case $quality in
        1)
            quality="low"
            ;;
        2)
            quality="high"
            ;;
        *)
            #$guitool --error --text="Wrong option selected"
            exit
            ;;
    esac


    (

    if [[ -z "$2" ]] ; then
        progress_opts="--pulsate"
    fi

    for file in "$@"
    do
        echo "$(( ${PROGRESS%%.*} / 100000 ))"
        file="$file"
        filename="${file##*/}"
        filenameraw="${filename%.*}"
        echo -e "# Converting \t ${filenameraw}"

        # cache it for faster multiprocess (not i/o overload)
        cat "${file}" > /dev/null

        rm -rf "${tempdir}"
        mkdir -p "${tempdir}"

        #
        # convert it !
        #

        case $quality in
            low)
                if ! el_dependencies_check "ghostscript" ; then
                    if ! el_dependencies_install ghostscript ; then
                        exit 1
                    fi
                fi

                while read -ru 3 line
                do
                    echo "# $line"
                    LC_ALL=C sleep 0.3
                done 3<<< "$( shrink "$file" "${tempdir}/$filename" )"

                ;;
            high)
                if ! el_dependencies_check "qpdf" ; then
                    if ! el_dependencies_install qpdf ; then
                        exit 1
                    fi
                fi

                while read -ru 3 line
                do
                    echo "# $line"
                    LC_ALL=C sleep 0.3
                done 3<<< "$( qpdf --linearize "$file" "${tempdir}/$filename" )"
                ;;
        esac

        check_smaller "$file" "${tempdir}/$filename"

        # move it after success
        mv "${tempdir}/$filename" "${file_dest_dir}/${filename}"

        let "PROGRESS+=$INCREMENT"

    done
    ) | $guitool  --progress $progress_opts --title "$( eval_gettext "Converting documents, please be patient..." )" --percentage=0 --auto-close --auto-kill


    rm -rf "${tempdir}"


    if ! ((is_delete_original)) ; then
        thunar "${file_dest_dir}" &
        sleep 2
    fi

    $guitool --info --text="$( eval_gettext "Files converted, please verify that they works correctly" )"


}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
