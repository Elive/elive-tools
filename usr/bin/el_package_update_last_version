#!/bin/bash
source /usr/lib/elive-tools/functions
el_set_display_variables

# translations
. gettext.sh
export TEXTDOMAIN="elive-tools"

usage(){
    echo -e "Usage: $(basename $BASH_SOURCE) packagename [--force]"
}

main(){
    # pre {{{
    local packagename line package_version_installed package_version_newer_found_maybe url_package_dir url_repository version is_mode_force arg args packages


    # Usage
    if [[ -z "${1}" ]] ; then
        usage
        exit
    fi

    for arg in "$@"
    do
        case "$arg" in
            -f|--force)
                is_mode_force=1
                ;;
            -a|--automated)
                is_automated=1
                is_quiet=1
                ;;
            -h|--help)
                usage
                exit
                ;;
            -q|--quiet)
                is_quiet=1
                ;;
            -c|--check)
                # check only and exit, return value is used
                is_check_only=1
                ;;
            *)
                if [[ -n "$packagename" ]] ; then
                    # this tool is made to only install one package at time, hum... so things like eliveinstaller checks the return status, and this depends on a single one
                    el_error "this tool only allows one package argument, no more. Using the first given one"
                else
                    packagename="$arg"
                fi
                ;;
        esac
    done

    el_debug "looking for updates for the package '${packagename}' "
    url_repository="$( apt-cache madison ${packagename} | tr ' ' '\n' | grep http | head -1 )"

    # check if exist or apt-get update
    if [[ -z "$url_repository" ]] ; then
        el_aptget_update
    fi
    if [[ -z "$url_repository" ]] ; then
        el_warning "Package $packagename not found in the repos, ignoring it..."
        exit 1
    fi


    # check internet
    if ! el_verify_internet ; then
        el_explain 1 "No internet found, ignoring checking of newer packages available"
        exit 1
    fi

    # check repo url
    if ! el_check_variables "url_repository" ; then
        el_error "no url found for ${packagename} package, ignoring check in $(basename $0)"
        exit 1
    fi

    if ! el_dependencies_check "apt-get,apt-cache,zenity,dpkg" ; then
        exit 1
    fi


    # }}}

    package_version_installed="$( LC_ALL=C  apt-cache policy "${packagename}" | grep "Installed:" | sed -e 's|^.*Installed: ||g' | head -1 )"

    # first pass, check if we can have a possible candidate (fuzzy mode) {{{
    while read -ru 3 line
    do
        url_package_dir="${url_repository%/}/${line%/*}/"

        # compare all teh versions found with a simple curl with the installed version
        while read -ru 3 version
        do
            # cleanup var and url-decode it
            read -r version <<< "$version"
            #version="$( hURL -us --nocolor "$version" )"
            version="$( printf "$( echo "$version" | sed -e 's|%|\\x|g' )" )"

            if dpkg --compare-versions "${version}" gt "${package_version_installed}" 2>/dev/null ; then
                package_version_newer_found_maybe=1
            fi
        done 3<<< "$( curl -s "${url_package_dir}" | grep href | sed -e 's|^.*href="||g' -e 's|".*$||g' | grep '\.deb$' | cut -d'_' -f2 | sort -u )"

    done 3<<< "$( apt-cache show "${packagename}" 2>/dev/null | grep "Filename:" | sed -e 's|^Filename: ||g' | sort -u )"



    # - first pass, check if we can have a possible candidate (fuzzy mode) }}}
    # checking results and deciding {{{
    # nothing found in a first shot?
    if ! ((package_version_newer_found_maybe)) ; then
        # return false if we have not updated or found anything
        exit 1
    fi

    # return true always, if we arrived here
    if ((is_check_only)) ; then
        exit 0
    fi


    # - checking results and deciding }}}

    # make sure that we update caches or we will be unable to install it
    el_aptget_update force

    # install new package if found
    if el_package_newer_check "${packagename}" ; then

        local message_upgrade_please message_upgrade_force
        message_upgrade_please="$( printf "$( eval_gettext "Found a newer version of %s, update it?" )" "${packagename%:*}" )"

        message_upgrade_force="$( printf "$( eval_gettext "The package %s needs to be updated." )" "${packagename%:*}" )"

        # install
        if ((is_automated)) ; then
            if [[ "$UID" = 0 ]] ; then
                if ! timeout 1200 bash -c "DEBIAN_FRONTEND=noninteractive apt-get -f install" ; then
                    el_error "problem with apt-get -f install"
                fi
                if ! timeout 1200 bash -c "DEBIAN_FRONTEND=noninteractive apt-get install -y ${packagename}" ; then
                    el_error "problem with apt-get install -y $packagename"
                fi
            else
                el_error "$(basename $0) called in automated mode and we are non-root, how we should proceed? ignoring..."
            fi
        else
            if [[ -n "$DISPLAY" ]] ; then
                if ((is_mode_force)) ; then
                    if ! ((is_quiet)) ; then
                        zenity --info --text="$message_upgrade_force" || true
                    fi
                    if ! el_dependencies_install "$packagename" ; then
                        exit 1
                    fi
                    exit 0
                else
                    if ((is_quiet)) ; then
                        if ! el_dependencies_install "$packagename" ; then
                            exit 1
                        fi
                        exit 0
                    else
                        if zenity --question --text="$message_upgrade_please" ; then
                            if ! el_dependencies_install "$packagename" ; then
                                exit 1
                            fi
                            exit 0
                        else
                            exit 1
                        fi
                    fi
                fi

            else
                if ((is_terminal)) ; then
                    if ((is_mode_force)) ; then
                        echo -e "The package $packagename needs to be updated.\nPlease insert root/admin password:"
                        su -c "DEBIAN_FRONTEND=noninteractive apt-get install $packagename" root
                        exit 0
                    else
                        if el_confirm "$message_upgrade_please" ; then
                            echo -e "Please insert root/admin password:"
                            su -c "DEBIAN_FRONTEND=noninteractive apt-get install $packagename" root
                            exit 0
                        else
                            exit 1
                        fi
                    fi
                else
                    if [[ "$UID" = 0 ]] ; then
                        if ! timeout 900 bash -c "DEBIAN_FRONTEND=noninteractive apt-get -f install" ; then
                            el_error "problem with apt-get -f install"
                        fi
                        if ! timeout 900 bash -c "DEBIAN_FRONTEND=noninteractive apt-get install -y ${packagename}" ; then
                            el_error "problem with apt-get install -y $packagename"
                        fi
                    else
                        el_error "$(basename $0) called outside graphical system and outside terminal and non-root mode, how we should proceed? ignoring..."
                    fi
                fi
            fi
        fi
    else
        exit 1
    fi


}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker expandtab :
